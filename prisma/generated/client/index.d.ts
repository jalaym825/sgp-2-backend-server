
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model OTP
 * 
 */
export type OTP = $Result.DefaultSelection<Prisma.$OTPPayload>
/**
 * Model Users
 * 
 */
export type Users = $Result.DefaultSelection<Prisma.$UsersPayload>
/**
 * Model CricketTeam
 * 
 */
export type CricketTeam = $Result.DefaultSelection<Prisma.$CricketTeamPayload>
/**
 * Model CricketPlayer
 * 
 */
export type CricketPlayer = $Result.DefaultSelection<Prisma.$CricketPlayerPayload>
/**
 * Model CricketMatch
 * 
 */
export type CricketMatch = $Result.DefaultSelection<Prisma.$CricketMatchPayload>
/**
 * Model CricketTeamMatchData
 * 
 */
export type CricketTeamMatchData = $Result.DefaultSelection<Prisma.$CricketTeamMatchDataPayload>
/**
 * Model CricketOver
 * 
 */
export type CricketOver = $Result.DefaultSelection<Prisma.$CricketOverPayload>
/**
 * Model CricketOverBall
 * 
 */
export type CricketOverBall = $Result.DefaultSelection<Prisma.$CricketOverBallPayload>
/**
 * Model CricketMatchPlayerBattingScore
 * 
 */
export type CricketMatchPlayerBattingScore = $Result.DefaultSelection<Prisma.$CricketMatchPlayerBattingScorePayload>
/**
 * Model CricketMatchPlayerBowlingScore
 * 
 */
export type CricketMatchPlayerBowlingScore = $Result.DefaultSelection<Prisma.$CricketMatchPlayerBowlingScorePayload>
/**
 * Model VerificationToken
 * 
 */
export type VerificationToken = $Result.DefaultSelection<Prisma.$VerificationTokenPayload>
/**
 * Model Ticket
 * 
 */
export type Ticket = $Result.DefaultSelection<Prisma.$TicketPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  USER: 'USER',
  SPORTS_HEAD: 'SPORTS_HEAD',
  DEPT_SPORTS_CC: 'DEPT_SPORTS_CC'
};

export type Role = (typeof Role)[keyof typeof Role]


export const BallType: {
  NORMAL: 'NORMAL',
  NO_BALL: 'NO_BALL',
  WIDE: 'WIDE',
  LEG_BYE: 'LEG_BYE',
  BYE: 'BYE'
};

export type BallType = (typeof BallType)[keyof typeof BallType]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type BallType = $Enums.BallType

export const BallType: typeof $Enums.BallType

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more OTPS
 * const oTPS = await prisma.oTP.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more OTPS
   * const oTPS = await prisma.oTP.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.oTP`: Exposes CRUD operations for the **OTP** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OTPS
    * const oTPS = await prisma.oTP.findMany()
    * ```
    */
  get oTP(): Prisma.OTPDelegate<ExtArgs>;

  /**
   * `prisma.users`: Exposes CRUD operations for the **Users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.UsersDelegate<ExtArgs>;

  /**
   * `prisma.cricketTeam`: Exposes CRUD operations for the **CricketTeam** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CricketTeams
    * const cricketTeams = await prisma.cricketTeam.findMany()
    * ```
    */
  get cricketTeam(): Prisma.CricketTeamDelegate<ExtArgs>;

  /**
   * `prisma.cricketPlayer`: Exposes CRUD operations for the **CricketPlayer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CricketPlayers
    * const cricketPlayers = await prisma.cricketPlayer.findMany()
    * ```
    */
  get cricketPlayer(): Prisma.CricketPlayerDelegate<ExtArgs>;

  /**
   * `prisma.cricketMatch`: Exposes CRUD operations for the **CricketMatch** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CricketMatches
    * const cricketMatches = await prisma.cricketMatch.findMany()
    * ```
    */
  get cricketMatch(): Prisma.CricketMatchDelegate<ExtArgs>;

  /**
   * `prisma.cricketTeamMatchData`: Exposes CRUD operations for the **CricketTeamMatchData** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CricketTeamMatchData
    * const cricketTeamMatchData = await prisma.cricketTeamMatchData.findMany()
    * ```
    */
  get cricketTeamMatchData(): Prisma.CricketTeamMatchDataDelegate<ExtArgs>;

  /**
   * `prisma.cricketOver`: Exposes CRUD operations for the **CricketOver** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CricketOvers
    * const cricketOvers = await prisma.cricketOver.findMany()
    * ```
    */
  get cricketOver(): Prisma.CricketOverDelegate<ExtArgs>;

  /**
   * `prisma.cricketOverBall`: Exposes CRUD operations for the **CricketOverBall** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CricketOverBalls
    * const cricketOverBalls = await prisma.cricketOverBall.findMany()
    * ```
    */
  get cricketOverBall(): Prisma.CricketOverBallDelegate<ExtArgs>;

  /**
   * `prisma.cricketMatchPlayerBattingScore`: Exposes CRUD operations for the **CricketMatchPlayerBattingScore** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CricketMatchPlayerBattingScores
    * const cricketMatchPlayerBattingScores = await prisma.cricketMatchPlayerBattingScore.findMany()
    * ```
    */
  get cricketMatchPlayerBattingScore(): Prisma.CricketMatchPlayerBattingScoreDelegate<ExtArgs>;

  /**
   * `prisma.cricketMatchPlayerBowlingScore`: Exposes CRUD operations for the **CricketMatchPlayerBowlingScore** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CricketMatchPlayerBowlingScores
    * const cricketMatchPlayerBowlingScores = await prisma.cricketMatchPlayerBowlingScore.findMany()
    * ```
    */
  get cricketMatchPlayerBowlingScore(): Prisma.CricketMatchPlayerBowlingScoreDelegate<ExtArgs>;

  /**
   * `prisma.verificationToken`: Exposes CRUD operations for the **VerificationToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VerificationTokens
    * const verificationTokens = await prisma.verificationToken.findMany()
    * ```
    */
  get verificationToken(): Prisma.VerificationTokenDelegate<ExtArgs>;

  /**
   * `prisma.ticket`: Exposes CRUD operations for the **Ticket** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tickets
    * const tickets = await prisma.ticket.findMany()
    * ```
    */
  get ticket(): Prisma.TicketDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.12.1
   * Query Engine version: 473ed3124229e22d881cb7addf559799debae1ab
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    OTP: 'OTP',
    Users: 'Users',
    CricketTeam: 'CricketTeam',
    CricketPlayer: 'CricketPlayer',
    CricketMatch: 'CricketMatch',
    CricketTeamMatchData: 'CricketTeamMatchData',
    CricketOver: 'CricketOver',
    CricketOverBall: 'CricketOverBall',
    CricketMatchPlayerBattingScore: 'CricketMatchPlayerBattingScore',
    CricketMatchPlayerBowlingScore: 'CricketMatchPlayerBowlingScore',
    VerificationToken: 'VerificationToken',
    Ticket: 'Ticket'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'oTP' | 'users' | 'cricketTeam' | 'cricketPlayer' | 'cricketMatch' | 'cricketTeamMatchData' | 'cricketOver' | 'cricketOverBall' | 'cricketMatchPlayerBattingScore' | 'cricketMatchPlayerBowlingScore' | 'verificationToken' | 'ticket'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      OTP: {
        payload: Prisma.$OTPPayload<ExtArgs>
        fields: Prisma.OTPFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OTPFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OTPPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OTPFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OTPPayload>
          }
          findFirst: {
            args: Prisma.OTPFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OTPPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OTPFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OTPPayload>
          }
          findMany: {
            args: Prisma.OTPFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OTPPayload>[]
          }
          create: {
            args: Prisma.OTPCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OTPPayload>
          }
          createMany: {
            args: Prisma.OTPCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.OTPDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OTPPayload>
          }
          update: {
            args: Prisma.OTPUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OTPPayload>
          }
          deleteMany: {
            args: Prisma.OTPDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.OTPUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.OTPUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OTPPayload>
          }
          aggregate: {
            args: Prisma.OTPAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateOTP>
          }
          groupBy: {
            args: Prisma.OTPGroupByArgs<ExtArgs>,
            result: $Utils.Optional<OTPGroupByOutputType>[]
          }
          count: {
            args: Prisma.OTPCountArgs<ExtArgs>,
            result: $Utils.Optional<OTPCountAggregateOutputType> | number
          }
        }
      }
      Users: {
        payload: Prisma.$UsersPayload<ExtArgs>
        fields: Prisma.UsersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findFirst: {
            args: Prisma.UsersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findMany: {
            args: Prisma.UsersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>[]
          }
          create: {
            args: Prisma.UsersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          createMany: {
            args: Prisma.UsersCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UsersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          update: {
            args: Prisma.UsersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          deleteMany: {
            args: Prisma.UsersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UsersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UsersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.UsersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsersCountArgs<ExtArgs>,
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      CricketTeam: {
        payload: Prisma.$CricketTeamPayload<ExtArgs>
        fields: Prisma.CricketTeamFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CricketTeamFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketTeamPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CricketTeamFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketTeamPayload>
          }
          findFirst: {
            args: Prisma.CricketTeamFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketTeamPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CricketTeamFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketTeamPayload>
          }
          findMany: {
            args: Prisma.CricketTeamFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketTeamPayload>[]
          }
          create: {
            args: Prisma.CricketTeamCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketTeamPayload>
          }
          createMany: {
            args: Prisma.CricketTeamCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CricketTeamDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketTeamPayload>
          }
          update: {
            args: Prisma.CricketTeamUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketTeamPayload>
          }
          deleteMany: {
            args: Prisma.CricketTeamDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CricketTeamUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CricketTeamUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketTeamPayload>
          }
          aggregate: {
            args: Prisma.CricketTeamAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCricketTeam>
          }
          groupBy: {
            args: Prisma.CricketTeamGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CricketTeamGroupByOutputType>[]
          }
          count: {
            args: Prisma.CricketTeamCountArgs<ExtArgs>,
            result: $Utils.Optional<CricketTeamCountAggregateOutputType> | number
          }
        }
      }
      CricketPlayer: {
        payload: Prisma.$CricketPlayerPayload<ExtArgs>
        fields: Prisma.CricketPlayerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CricketPlayerFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketPlayerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CricketPlayerFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketPlayerPayload>
          }
          findFirst: {
            args: Prisma.CricketPlayerFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketPlayerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CricketPlayerFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketPlayerPayload>
          }
          findMany: {
            args: Prisma.CricketPlayerFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketPlayerPayload>[]
          }
          create: {
            args: Prisma.CricketPlayerCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketPlayerPayload>
          }
          createMany: {
            args: Prisma.CricketPlayerCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CricketPlayerDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketPlayerPayload>
          }
          update: {
            args: Prisma.CricketPlayerUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketPlayerPayload>
          }
          deleteMany: {
            args: Prisma.CricketPlayerDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CricketPlayerUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CricketPlayerUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketPlayerPayload>
          }
          aggregate: {
            args: Prisma.CricketPlayerAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCricketPlayer>
          }
          groupBy: {
            args: Prisma.CricketPlayerGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CricketPlayerGroupByOutputType>[]
          }
          count: {
            args: Prisma.CricketPlayerCountArgs<ExtArgs>,
            result: $Utils.Optional<CricketPlayerCountAggregateOutputType> | number
          }
        }
      }
      CricketMatch: {
        payload: Prisma.$CricketMatchPayload<ExtArgs>
        fields: Prisma.CricketMatchFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CricketMatchFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketMatchPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CricketMatchFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketMatchPayload>
          }
          findFirst: {
            args: Prisma.CricketMatchFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketMatchPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CricketMatchFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketMatchPayload>
          }
          findMany: {
            args: Prisma.CricketMatchFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketMatchPayload>[]
          }
          create: {
            args: Prisma.CricketMatchCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketMatchPayload>
          }
          createMany: {
            args: Prisma.CricketMatchCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CricketMatchDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketMatchPayload>
          }
          update: {
            args: Prisma.CricketMatchUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketMatchPayload>
          }
          deleteMany: {
            args: Prisma.CricketMatchDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CricketMatchUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CricketMatchUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketMatchPayload>
          }
          aggregate: {
            args: Prisma.CricketMatchAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCricketMatch>
          }
          groupBy: {
            args: Prisma.CricketMatchGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CricketMatchGroupByOutputType>[]
          }
          count: {
            args: Prisma.CricketMatchCountArgs<ExtArgs>,
            result: $Utils.Optional<CricketMatchCountAggregateOutputType> | number
          }
        }
      }
      CricketTeamMatchData: {
        payload: Prisma.$CricketTeamMatchDataPayload<ExtArgs>
        fields: Prisma.CricketTeamMatchDataFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CricketTeamMatchDataFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketTeamMatchDataPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CricketTeamMatchDataFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketTeamMatchDataPayload>
          }
          findFirst: {
            args: Prisma.CricketTeamMatchDataFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketTeamMatchDataPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CricketTeamMatchDataFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketTeamMatchDataPayload>
          }
          findMany: {
            args: Prisma.CricketTeamMatchDataFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketTeamMatchDataPayload>[]
          }
          create: {
            args: Prisma.CricketTeamMatchDataCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketTeamMatchDataPayload>
          }
          createMany: {
            args: Prisma.CricketTeamMatchDataCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CricketTeamMatchDataDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketTeamMatchDataPayload>
          }
          update: {
            args: Prisma.CricketTeamMatchDataUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketTeamMatchDataPayload>
          }
          deleteMany: {
            args: Prisma.CricketTeamMatchDataDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CricketTeamMatchDataUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CricketTeamMatchDataUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketTeamMatchDataPayload>
          }
          aggregate: {
            args: Prisma.CricketTeamMatchDataAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCricketTeamMatchData>
          }
          groupBy: {
            args: Prisma.CricketTeamMatchDataGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CricketTeamMatchDataGroupByOutputType>[]
          }
          count: {
            args: Prisma.CricketTeamMatchDataCountArgs<ExtArgs>,
            result: $Utils.Optional<CricketTeamMatchDataCountAggregateOutputType> | number
          }
        }
      }
      CricketOver: {
        payload: Prisma.$CricketOverPayload<ExtArgs>
        fields: Prisma.CricketOverFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CricketOverFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketOverPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CricketOverFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketOverPayload>
          }
          findFirst: {
            args: Prisma.CricketOverFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketOverPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CricketOverFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketOverPayload>
          }
          findMany: {
            args: Prisma.CricketOverFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketOverPayload>[]
          }
          create: {
            args: Prisma.CricketOverCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketOverPayload>
          }
          createMany: {
            args: Prisma.CricketOverCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CricketOverDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketOverPayload>
          }
          update: {
            args: Prisma.CricketOverUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketOverPayload>
          }
          deleteMany: {
            args: Prisma.CricketOverDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CricketOverUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CricketOverUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketOverPayload>
          }
          aggregate: {
            args: Prisma.CricketOverAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCricketOver>
          }
          groupBy: {
            args: Prisma.CricketOverGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CricketOverGroupByOutputType>[]
          }
          count: {
            args: Prisma.CricketOverCountArgs<ExtArgs>,
            result: $Utils.Optional<CricketOverCountAggregateOutputType> | number
          }
        }
      }
      CricketOverBall: {
        payload: Prisma.$CricketOverBallPayload<ExtArgs>
        fields: Prisma.CricketOverBallFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CricketOverBallFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketOverBallPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CricketOverBallFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketOverBallPayload>
          }
          findFirst: {
            args: Prisma.CricketOverBallFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketOverBallPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CricketOverBallFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketOverBallPayload>
          }
          findMany: {
            args: Prisma.CricketOverBallFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketOverBallPayload>[]
          }
          create: {
            args: Prisma.CricketOverBallCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketOverBallPayload>
          }
          createMany: {
            args: Prisma.CricketOverBallCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CricketOverBallDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketOverBallPayload>
          }
          update: {
            args: Prisma.CricketOverBallUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketOverBallPayload>
          }
          deleteMany: {
            args: Prisma.CricketOverBallDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CricketOverBallUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CricketOverBallUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketOverBallPayload>
          }
          aggregate: {
            args: Prisma.CricketOverBallAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCricketOverBall>
          }
          groupBy: {
            args: Prisma.CricketOverBallGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CricketOverBallGroupByOutputType>[]
          }
          count: {
            args: Prisma.CricketOverBallCountArgs<ExtArgs>,
            result: $Utils.Optional<CricketOverBallCountAggregateOutputType> | number
          }
        }
      }
      CricketMatchPlayerBattingScore: {
        payload: Prisma.$CricketMatchPlayerBattingScorePayload<ExtArgs>
        fields: Prisma.CricketMatchPlayerBattingScoreFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CricketMatchPlayerBattingScoreFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketMatchPlayerBattingScorePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CricketMatchPlayerBattingScoreFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketMatchPlayerBattingScorePayload>
          }
          findFirst: {
            args: Prisma.CricketMatchPlayerBattingScoreFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketMatchPlayerBattingScorePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CricketMatchPlayerBattingScoreFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketMatchPlayerBattingScorePayload>
          }
          findMany: {
            args: Prisma.CricketMatchPlayerBattingScoreFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketMatchPlayerBattingScorePayload>[]
          }
          create: {
            args: Prisma.CricketMatchPlayerBattingScoreCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketMatchPlayerBattingScorePayload>
          }
          createMany: {
            args: Prisma.CricketMatchPlayerBattingScoreCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CricketMatchPlayerBattingScoreDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketMatchPlayerBattingScorePayload>
          }
          update: {
            args: Prisma.CricketMatchPlayerBattingScoreUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketMatchPlayerBattingScorePayload>
          }
          deleteMany: {
            args: Prisma.CricketMatchPlayerBattingScoreDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CricketMatchPlayerBattingScoreUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CricketMatchPlayerBattingScoreUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketMatchPlayerBattingScorePayload>
          }
          aggregate: {
            args: Prisma.CricketMatchPlayerBattingScoreAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCricketMatchPlayerBattingScore>
          }
          groupBy: {
            args: Prisma.CricketMatchPlayerBattingScoreGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CricketMatchPlayerBattingScoreGroupByOutputType>[]
          }
          count: {
            args: Prisma.CricketMatchPlayerBattingScoreCountArgs<ExtArgs>,
            result: $Utils.Optional<CricketMatchPlayerBattingScoreCountAggregateOutputType> | number
          }
        }
      }
      CricketMatchPlayerBowlingScore: {
        payload: Prisma.$CricketMatchPlayerBowlingScorePayload<ExtArgs>
        fields: Prisma.CricketMatchPlayerBowlingScoreFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CricketMatchPlayerBowlingScoreFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketMatchPlayerBowlingScorePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CricketMatchPlayerBowlingScoreFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketMatchPlayerBowlingScorePayload>
          }
          findFirst: {
            args: Prisma.CricketMatchPlayerBowlingScoreFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketMatchPlayerBowlingScorePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CricketMatchPlayerBowlingScoreFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketMatchPlayerBowlingScorePayload>
          }
          findMany: {
            args: Prisma.CricketMatchPlayerBowlingScoreFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketMatchPlayerBowlingScorePayload>[]
          }
          create: {
            args: Prisma.CricketMatchPlayerBowlingScoreCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketMatchPlayerBowlingScorePayload>
          }
          createMany: {
            args: Prisma.CricketMatchPlayerBowlingScoreCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CricketMatchPlayerBowlingScoreDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketMatchPlayerBowlingScorePayload>
          }
          update: {
            args: Prisma.CricketMatchPlayerBowlingScoreUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketMatchPlayerBowlingScorePayload>
          }
          deleteMany: {
            args: Prisma.CricketMatchPlayerBowlingScoreDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CricketMatchPlayerBowlingScoreUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CricketMatchPlayerBowlingScoreUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CricketMatchPlayerBowlingScorePayload>
          }
          aggregate: {
            args: Prisma.CricketMatchPlayerBowlingScoreAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCricketMatchPlayerBowlingScore>
          }
          groupBy: {
            args: Prisma.CricketMatchPlayerBowlingScoreGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CricketMatchPlayerBowlingScoreGroupByOutputType>[]
          }
          count: {
            args: Prisma.CricketMatchPlayerBowlingScoreCountArgs<ExtArgs>,
            result: $Utils.Optional<CricketMatchPlayerBowlingScoreCountAggregateOutputType> | number
          }
        }
      }
      VerificationToken: {
        payload: Prisma.$VerificationTokenPayload<ExtArgs>
        fields: Prisma.VerificationTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VerificationTokenFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VerificationTokenFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          findFirst: {
            args: Prisma.VerificationTokenFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VerificationTokenFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          findMany: {
            args: Prisma.VerificationTokenFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          create: {
            args: Prisma.VerificationTokenCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          createMany: {
            args: Prisma.VerificationTokenCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.VerificationTokenDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          update: {
            args: Prisma.VerificationTokenUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          deleteMany: {
            args: Prisma.VerificationTokenDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.VerificationTokenUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.VerificationTokenUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          aggregate: {
            args: Prisma.VerificationTokenAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateVerificationToken>
          }
          groupBy: {
            args: Prisma.VerificationTokenGroupByArgs<ExtArgs>,
            result: $Utils.Optional<VerificationTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.VerificationTokenCountArgs<ExtArgs>,
            result: $Utils.Optional<VerificationTokenCountAggregateOutputType> | number
          }
        }
      }
      Ticket: {
        payload: Prisma.$TicketPayload<ExtArgs>
        fields: Prisma.TicketFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TicketFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TicketPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TicketFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TicketPayload>
          }
          findFirst: {
            args: Prisma.TicketFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TicketPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TicketFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TicketPayload>
          }
          findMany: {
            args: Prisma.TicketFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TicketPayload>[]
          }
          create: {
            args: Prisma.TicketCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TicketPayload>
          }
          createMany: {
            args: Prisma.TicketCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TicketDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TicketPayload>
          }
          update: {
            args: Prisma.TicketUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TicketPayload>
          }
          deleteMany: {
            args: Prisma.TicketDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TicketUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TicketUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TicketPayload>
          }
          aggregate: {
            args: Prisma.TicketAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTicket>
          }
          groupBy: {
            args: Prisma.TicketGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TicketGroupByOutputType>[]
          }
          count: {
            args: Prisma.TicketCountArgs<ExtArgs>,
            result: $Utils.Optional<TicketCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsersCountOutputType
   */

  export type UsersCountOutputType = {
    cricket_players: number
    verification_token: number
    user_tickets: number
  }

  export type UsersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cricket_players?: boolean | UsersCountOutputTypeCountCricket_playersArgs
    verification_token?: boolean | UsersCountOutputTypeCountVerification_tokenArgs
    user_tickets?: boolean | UsersCountOutputTypeCountUser_ticketsArgs
  }

  // Custom InputTypes

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountCricket_playersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CricketPlayerWhereInput
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountVerification_tokenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VerificationTokenWhereInput
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountUser_ticketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TicketWhereInput
  }



  /**
   * Count Type CricketTeamCountOutputType
   */

  export type CricketTeamCountOutputType = {
    players: number
    winning_team: number
    toss_winning_team: number
    player_team: number
    cricket_match_teamData: number
    cricket_match_player_batting_score: number
    cricket_match_player_bowling_score: number
    CricketMatchTeamA: number
    CricketMatchTeamB: number
  }

  export type CricketTeamCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    players?: boolean | CricketTeamCountOutputTypeCountPlayersArgs
    winning_team?: boolean | CricketTeamCountOutputTypeCountWinning_teamArgs
    toss_winning_team?: boolean | CricketTeamCountOutputTypeCountToss_winning_teamArgs
    player_team?: boolean | CricketTeamCountOutputTypeCountPlayer_teamArgs
    cricket_match_teamData?: boolean | CricketTeamCountOutputTypeCountCricket_match_teamDataArgs
    cricket_match_player_batting_score?: boolean | CricketTeamCountOutputTypeCountCricket_match_player_batting_scoreArgs
    cricket_match_player_bowling_score?: boolean | CricketTeamCountOutputTypeCountCricket_match_player_bowling_scoreArgs
    CricketMatchTeamA?: boolean | CricketTeamCountOutputTypeCountCricketMatchTeamAArgs
    CricketMatchTeamB?: boolean | CricketTeamCountOutputTypeCountCricketMatchTeamBArgs
  }

  // Custom InputTypes

  /**
   * CricketTeamCountOutputType without action
   */
  export type CricketTeamCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketTeamCountOutputType
     */
    select?: CricketTeamCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CricketTeamCountOutputType without action
   */
  export type CricketTeamCountOutputTypeCountPlayersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CricketPlayerWhereInput
  }


  /**
   * CricketTeamCountOutputType without action
   */
  export type CricketTeamCountOutputTypeCountWinning_teamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CricketMatchWhereInput
  }


  /**
   * CricketTeamCountOutputType without action
   */
  export type CricketTeamCountOutputTypeCountToss_winning_teamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CricketMatchWhereInput
  }


  /**
   * CricketTeamCountOutputType without action
   */
  export type CricketTeamCountOutputTypeCountPlayer_teamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CricketPlayerWhereInput
  }


  /**
   * CricketTeamCountOutputType without action
   */
  export type CricketTeamCountOutputTypeCountCricket_match_teamDataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CricketTeamMatchDataWhereInput
  }


  /**
   * CricketTeamCountOutputType without action
   */
  export type CricketTeamCountOutputTypeCountCricket_match_player_batting_scoreArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CricketMatchPlayerBattingScoreWhereInput
  }


  /**
   * CricketTeamCountOutputType without action
   */
  export type CricketTeamCountOutputTypeCountCricket_match_player_bowling_scoreArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CricketMatchPlayerBowlingScoreWhereInput
  }


  /**
   * CricketTeamCountOutputType without action
   */
  export type CricketTeamCountOutputTypeCountCricketMatchTeamAArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CricketMatchWhereInput
  }


  /**
   * CricketTeamCountOutputType without action
   */
  export type CricketTeamCountOutputTypeCountCricketMatchTeamBArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CricketMatchWhereInput
  }



  /**
   * Count Type CricketPlayerCountOutputType
   */

  export type CricketPlayerCountOutputType = {
    matches: number
    user_cricket_players: number
    team_players: number
    batting_score_player: number
    bowling_score_player: number
  }

  export type CricketPlayerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    matches?: boolean | CricketPlayerCountOutputTypeCountMatchesArgs
    user_cricket_players?: boolean | CricketPlayerCountOutputTypeCountUser_cricket_playersArgs
    team_players?: boolean | CricketPlayerCountOutputTypeCountTeam_playersArgs
    batting_score_player?: boolean | CricketPlayerCountOutputTypeCountBatting_score_playerArgs
    bowling_score_player?: boolean | CricketPlayerCountOutputTypeCountBowling_score_playerArgs
  }

  // Custom InputTypes

  /**
   * CricketPlayerCountOutputType without action
   */
  export type CricketPlayerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketPlayerCountOutputType
     */
    select?: CricketPlayerCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CricketPlayerCountOutputType without action
   */
  export type CricketPlayerCountOutputTypeCountMatchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CricketMatchWhereInput
  }


  /**
   * CricketPlayerCountOutputType without action
   */
  export type CricketPlayerCountOutputTypeCountUser_cricket_playersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
  }


  /**
   * CricketPlayerCountOutputType without action
   */
  export type CricketPlayerCountOutputTypeCountTeam_playersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CricketTeamWhereInput
  }


  /**
   * CricketPlayerCountOutputType without action
   */
  export type CricketPlayerCountOutputTypeCountBatting_score_playerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CricketMatchPlayerBattingScoreWhereInput
  }


  /**
   * CricketPlayerCountOutputType without action
   */
  export type CricketPlayerCountOutputTypeCountBowling_score_playerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CricketMatchPlayerBowlingScoreWhereInput
  }



  /**
   * Count Type CricketMatchCountOutputType
   */

  export type CricketMatchCountOutputType = {
    players: number
    over_match: number
    team_batting_score: number
    team_bowling_score: number
  }

  export type CricketMatchCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    players?: boolean | CricketMatchCountOutputTypeCountPlayersArgs
    over_match?: boolean | CricketMatchCountOutputTypeCountOver_matchArgs
    team_batting_score?: boolean | CricketMatchCountOutputTypeCountTeam_batting_scoreArgs
    team_bowling_score?: boolean | CricketMatchCountOutputTypeCountTeam_bowling_scoreArgs
  }

  // Custom InputTypes

  /**
   * CricketMatchCountOutputType without action
   */
  export type CricketMatchCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketMatchCountOutputType
     */
    select?: CricketMatchCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CricketMatchCountOutputType without action
   */
  export type CricketMatchCountOutputTypeCountPlayersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CricketPlayerWhereInput
  }


  /**
   * CricketMatchCountOutputType without action
   */
  export type CricketMatchCountOutputTypeCountOver_matchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CricketOverWhereInput
  }


  /**
   * CricketMatchCountOutputType without action
   */
  export type CricketMatchCountOutputTypeCountTeam_batting_scoreArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CricketMatchPlayerBattingScoreWhereInput
  }


  /**
   * CricketMatchCountOutputType without action
   */
  export type CricketMatchCountOutputTypeCountTeam_bowling_scoreArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CricketMatchPlayerBowlingScoreWhereInput
  }



  /**
   * Count Type CricketTeamMatchDataCountOutputType
   */

  export type CricketTeamMatchDataCountOutputType = {
    batters: number
    bowlers: number
    cricketMatchTeamA: number
    cricketMatchTeamB: number
    matchBttingTeam: number
    matchBowlingTeam: number
  }

  export type CricketTeamMatchDataCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    batters?: boolean | CricketTeamMatchDataCountOutputTypeCountBattersArgs
    bowlers?: boolean | CricketTeamMatchDataCountOutputTypeCountBowlersArgs
    cricketMatchTeamA?: boolean | CricketTeamMatchDataCountOutputTypeCountCricketMatchTeamAArgs
    cricketMatchTeamB?: boolean | CricketTeamMatchDataCountOutputTypeCountCricketMatchTeamBArgs
    matchBttingTeam?: boolean | CricketTeamMatchDataCountOutputTypeCountMatchBttingTeamArgs
    matchBowlingTeam?: boolean | CricketTeamMatchDataCountOutputTypeCountMatchBowlingTeamArgs
  }

  // Custom InputTypes

  /**
   * CricketTeamMatchDataCountOutputType without action
   */
  export type CricketTeamMatchDataCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketTeamMatchDataCountOutputType
     */
    select?: CricketTeamMatchDataCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CricketTeamMatchDataCountOutputType without action
   */
  export type CricketTeamMatchDataCountOutputTypeCountBattersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CricketMatchPlayerBattingScoreWhereInput
  }


  /**
   * CricketTeamMatchDataCountOutputType without action
   */
  export type CricketTeamMatchDataCountOutputTypeCountBowlersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CricketMatchPlayerBowlingScoreWhereInput
  }


  /**
   * CricketTeamMatchDataCountOutputType without action
   */
  export type CricketTeamMatchDataCountOutputTypeCountCricketMatchTeamAArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CricketMatchWhereInput
  }


  /**
   * CricketTeamMatchDataCountOutputType without action
   */
  export type CricketTeamMatchDataCountOutputTypeCountCricketMatchTeamBArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CricketMatchWhereInput
  }


  /**
   * CricketTeamMatchDataCountOutputType without action
   */
  export type CricketTeamMatchDataCountOutputTypeCountMatchBttingTeamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CricketMatchWhereInput
  }


  /**
   * CricketTeamMatchDataCountOutputType without action
   */
  export type CricketTeamMatchDataCountOutputTypeCountMatchBowlingTeamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CricketMatchWhereInput
  }



  /**
   * Count Type CricketOverCountOutputType
   */

  export type CricketOverCountOutputType = {
    balls: number
    match_current_over: number
  }

  export type CricketOverCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    balls?: boolean | CricketOverCountOutputTypeCountBallsArgs
    match_current_over?: boolean | CricketOverCountOutputTypeCountMatch_current_overArgs
  }

  // Custom InputTypes

  /**
   * CricketOverCountOutputType without action
   */
  export type CricketOverCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketOverCountOutputType
     */
    select?: CricketOverCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CricketOverCountOutputType without action
   */
  export type CricketOverCountOutputTypeCountBallsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CricketOverBallWhereInput
  }


  /**
   * CricketOverCountOutputType without action
   */
  export type CricketOverCountOutputTypeCountMatch_current_overArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CricketMatchWhereInput
  }



  /**
   * Count Type CricketMatchPlayerBattingScoreCountOutputType
   */

  export type CricketMatchPlayerBattingScoreCountOutputType = {
    match_batters: number
    over_striker: number
    over_non_striker: number
  }

  export type CricketMatchPlayerBattingScoreCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    match_batters?: boolean | CricketMatchPlayerBattingScoreCountOutputTypeCountMatch_battersArgs
    over_striker?: boolean | CricketMatchPlayerBattingScoreCountOutputTypeCountOver_strikerArgs
    over_non_striker?: boolean | CricketMatchPlayerBattingScoreCountOutputTypeCountOver_non_strikerArgs
  }

  // Custom InputTypes

  /**
   * CricketMatchPlayerBattingScoreCountOutputType without action
   */
  export type CricketMatchPlayerBattingScoreCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketMatchPlayerBattingScoreCountOutputType
     */
    select?: CricketMatchPlayerBattingScoreCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CricketMatchPlayerBattingScoreCountOutputType without action
   */
  export type CricketMatchPlayerBattingScoreCountOutputTypeCountMatch_battersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CricketTeamMatchDataWhereInput
  }


  /**
   * CricketMatchPlayerBattingScoreCountOutputType without action
   */
  export type CricketMatchPlayerBattingScoreCountOutputTypeCountOver_strikerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CricketOverWhereInput
  }


  /**
   * CricketMatchPlayerBattingScoreCountOutputType without action
   */
  export type CricketMatchPlayerBattingScoreCountOutputTypeCountOver_non_strikerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CricketOverWhereInput
  }



  /**
   * Count Type CricketMatchPlayerBowlingScoreCountOutputType
   */

  export type CricketMatchPlayerBowlingScoreCountOutputType = {
    match_bowlers: number
    over_bowler: number
  }

  export type CricketMatchPlayerBowlingScoreCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    match_bowlers?: boolean | CricketMatchPlayerBowlingScoreCountOutputTypeCountMatch_bowlersArgs
    over_bowler?: boolean | CricketMatchPlayerBowlingScoreCountOutputTypeCountOver_bowlerArgs
  }

  // Custom InputTypes

  /**
   * CricketMatchPlayerBowlingScoreCountOutputType without action
   */
  export type CricketMatchPlayerBowlingScoreCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketMatchPlayerBowlingScoreCountOutputType
     */
    select?: CricketMatchPlayerBowlingScoreCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CricketMatchPlayerBowlingScoreCountOutputType without action
   */
  export type CricketMatchPlayerBowlingScoreCountOutputTypeCountMatch_bowlersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CricketTeamMatchDataWhereInput
  }


  /**
   * CricketMatchPlayerBowlingScoreCountOutputType without action
   */
  export type CricketMatchPlayerBowlingScoreCountOutputTypeCountOver_bowlerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CricketOverWhereInput
  }



  /**
   * Models
   */

  /**
   * Model OTP
   */

  export type AggregateOTP = {
    _count: OTPCountAggregateOutputType | null
    _min: OTPMinAggregateOutputType | null
    _max: OTPMaxAggregateOutputType | null
  }

  export type OTPMinAggregateOutputType = {
    otp: string | null
    email: string | null
    createdAt: Date | null
  }

  export type OTPMaxAggregateOutputType = {
    otp: string | null
    email: string | null
    createdAt: Date | null
  }

  export type OTPCountAggregateOutputType = {
    otp: number
    email: number
    createdAt: number
    _all: number
  }


  export type OTPMinAggregateInputType = {
    otp?: true
    email?: true
    createdAt?: true
  }

  export type OTPMaxAggregateInputType = {
    otp?: true
    email?: true
    createdAt?: true
  }

  export type OTPCountAggregateInputType = {
    otp?: true
    email?: true
    createdAt?: true
    _all?: true
  }

  export type OTPAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OTP to aggregate.
     */
    where?: OTPWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OTPS to fetch.
     */
    orderBy?: OTPOrderByWithRelationInput | OTPOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OTPWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OTPS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OTPS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OTPS
    **/
    _count?: true | OTPCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OTPMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OTPMaxAggregateInputType
  }

  export type GetOTPAggregateType<T extends OTPAggregateArgs> = {
        [P in keyof T & keyof AggregateOTP]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOTP[P]>
      : GetScalarType<T[P], AggregateOTP[P]>
  }




  export type OTPGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OTPWhereInput
    orderBy?: OTPOrderByWithAggregationInput | OTPOrderByWithAggregationInput[]
    by: OTPScalarFieldEnum[] | OTPScalarFieldEnum
    having?: OTPScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OTPCountAggregateInputType | true
    _min?: OTPMinAggregateInputType
    _max?: OTPMaxAggregateInputType
  }

  export type OTPGroupByOutputType = {
    otp: string
    email: string
    createdAt: Date
    _count: OTPCountAggregateOutputType | null
    _min: OTPMinAggregateOutputType | null
    _max: OTPMaxAggregateOutputType | null
  }

  type GetOTPGroupByPayload<T extends OTPGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OTPGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OTPGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OTPGroupByOutputType[P]>
            : GetScalarType<T[P], OTPGroupByOutputType[P]>
        }
      >
    >


  export type OTPSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    otp?: boolean
    email?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["oTP"]>

  export type OTPSelectScalar = {
    otp?: boolean
    email?: boolean
    createdAt?: boolean
  }


  export type $OTPPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OTP"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      otp: string
      email: string
      createdAt: Date
    }, ExtArgs["result"]["oTP"]>
    composites: {}
  }


  type OTPGetPayload<S extends boolean | null | undefined | OTPDefaultArgs> = $Result.GetResult<Prisma.$OTPPayload, S>

  type OTPCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OTPFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OTPCountAggregateInputType | true
    }

  export interface OTPDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OTP'], meta: { name: 'OTP' } }
    /**
     * Find zero or one OTP that matches the filter.
     * @param {OTPFindUniqueArgs} args - Arguments to find a OTP
     * @example
     * // Get one OTP
     * const oTP = await prisma.oTP.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends OTPFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, OTPFindUniqueArgs<ExtArgs>>
    ): Prisma__OTPClient<$Result.GetResult<Prisma.$OTPPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one OTP that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {OTPFindUniqueOrThrowArgs} args - Arguments to find a OTP
     * @example
     * // Get one OTP
     * const oTP = await prisma.oTP.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends OTPFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, OTPFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__OTPClient<$Result.GetResult<Prisma.$OTPPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first OTP that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OTPFindFirstArgs} args - Arguments to find a OTP
     * @example
     * // Get one OTP
     * const oTP = await prisma.oTP.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends OTPFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, OTPFindFirstArgs<ExtArgs>>
    ): Prisma__OTPClient<$Result.GetResult<Prisma.$OTPPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first OTP that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OTPFindFirstOrThrowArgs} args - Arguments to find a OTP
     * @example
     * // Get one OTP
     * const oTP = await prisma.oTP.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends OTPFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, OTPFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__OTPClient<$Result.GetResult<Prisma.$OTPPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more OTPS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OTPFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OTPS
     * const oTPS = await prisma.oTP.findMany()
     * 
     * // Get first 10 OTPS
     * const oTPS = await prisma.oTP.findMany({ take: 10 })
     * 
     * // Only select the `otp`
     * const oTPWithOtpOnly = await prisma.oTP.findMany({ select: { otp: true } })
     * 
    **/
    findMany<T extends OTPFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OTPFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OTPPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a OTP.
     * @param {OTPCreateArgs} args - Arguments to create a OTP.
     * @example
     * // Create one OTP
     * const OTP = await prisma.oTP.create({
     *   data: {
     *     // ... data to create a OTP
     *   }
     * })
     * 
    **/
    create<T extends OTPCreateArgs<ExtArgs>>(
      args: SelectSubset<T, OTPCreateArgs<ExtArgs>>
    ): Prisma__OTPClient<$Result.GetResult<Prisma.$OTPPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many OTPS.
     *     @param {OTPCreateManyArgs} args - Arguments to create many OTPS.
     *     @example
     *     // Create many OTPS
     *     const oTP = await prisma.oTP.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends OTPCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OTPCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a OTP.
     * @param {OTPDeleteArgs} args - Arguments to delete one OTP.
     * @example
     * // Delete one OTP
     * const OTP = await prisma.oTP.delete({
     *   where: {
     *     // ... filter to delete one OTP
     *   }
     * })
     * 
    **/
    delete<T extends OTPDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, OTPDeleteArgs<ExtArgs>>
    ): Prisma__OTPClient<$Result.GetResult<Prisma.$OTPPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one OTP.
     * @param {OTPUpdateArgs} args - Arguments to update one OTP.
     * @example
     * // Update one OTP
     * const oTP = await prisma.oTP.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OTPUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, OTPUpdateArgs<ExtArgs>>
    ): Prisma__OTPClient<$Result.GetResult<Prisma.$OTPPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more OTPS.
     * @param {OTPDeleteManyArgs} args - Arguments to filter OTPS to delete.
     * @example
     * // Delete a few OTPS
     * const { count } = await prisma.oTP.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OTPDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OTPDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OTPS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OTPUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OTPS
     * const oTP = await prisma.oTP.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OTPUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, OTPUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one OTP.
     * @param {OTPUpsertArgs} args - Arguments to update or create a OTP.
     * @example
     * // Update or create a OTP
     * const oTP = await prisma.oTP.upsert({
     *   create: {
     *     // ... data to create a OTP
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OTP we want to update
     *   }
     * })
    **/
    upsert<T extends OTPUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, OTPUpsertArgs<ExtArgs>>
    ): Prisma__OTPClient<$Result.GetResult<Prisma.$OTPPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of OTPS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OTPCountArgs} args - Arguments to filter OTPS to count.
     * @example
     * // Count the number of OTPS
     * const count = await prisma.oTP.count({
     *   where: {
     *     // ... the filter for the OTPS we want to count
     *   }
     * })
    **/
    count<T extends OTPCountArgs>(
      args?: Subset<T, OTPCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OTPCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OTP.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OTPAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OTPAggregateArgs>(args: Subset<T, OTPAggregateArgs>): Prisma.PrismaPromise<GetOTPAggregateType<T>>

    /**
     * Group by OTP.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OTPGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OTPGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OTPGroupByArgs['orderBy'] }
        : { orderBy?: OTPGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OTPGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOTPGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OTP model
   */
  readonly fields: OTPFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OTP.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OTPClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the OTP model
   */ 
  interface OTPFieldRefs {
    readonly otp: FieldRef<"OTP", 'String'>
    readonly email: FieldRef<"OTP", 'String'>
    readonly createdAt: FieldRef<"OTP", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * OTP findUnique
   */
  export type OTPFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OTP
     */
    select?: OTPSelect<ExtArgs> | null
    /**
     * Filter, which OTP to fetch.
     */
    where: OTPWhereUniqueInput
  }


  /**
   * OTP findUniqueOrThrow
   */
  export type OTPFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OTP
     */
    select?: OTPSelect<ExtArgs> | null
    /**
     * Filter, which OTP to fetch.
     */
    where: OTPWhereUniqueInput
  }


  /**
   * OTP findFirst
   */
  export type OTPFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OTP
     */
    select?: OTPSelect<ExtArgs> | null
    /**
     * Filter, which OTP to fetch.
     */
    where?: OTPWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OTPS to fetch.
     */
    orderBy?: OTPOrderByWithRelationInput | OTPOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OTPS.
     */
    cursor?: OTPWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OTPS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OTPS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OTPS.
     */
    distinct?: OTPScalarFieldEnum | OTPScalarFieldEnum[]
  }


  /**
   * OTP findFirstOrThrow
   */
  export type OTPFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OTP
     */
    select?: OTPSelect<ExtArgs> | null
    /**
     * Filter, which OTP to fetch.
     */
    where?: OTPWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OTPS to fetch.
     */
    orderBy?: OTPOrderByWithRelationInput | OTPOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OTPS.
     */
    cursor?: OTPWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OTPS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OTPS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OTPS.
     */
    distinct?: OTPScalarFieldEnum | OTPScalarFieldEnum[]
  }


  /**
   * OTP findMany
   */
  export type OTPFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OTP
     */
    select?: OTPSelect<ExtArgs> | null
    /**
     * Filter, which OTPS to fetch.
     */
    where?: OTPWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OTPS to fetch.
     */
    orderBy?: OTPOrderByWithRelationInput | OTPOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OTPS.
     */
    cursor?: OTPWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OTPS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OTPS.
     */
    skip?: number
    distinct?: OTPScalarFieldEnum | OTPScalarFieldEnum[]
  }


  /**
   * OTP create
   */
  export type OTPCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OTP
     */
    select?: OTPSelect<ExtArgs> | null
    /**
     * The data needed to create a OTP.
     */
    data: XOR<OTPCreateInput, OTPUncheckedCreateInput>
  }


  /**
   * OTP createMany
   */
  export type OTPCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OTPS.
     */
    data: OTPCreateManyInput | OTPCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * OTP update
   */
  export type OTPUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OTP
     */
    select?: OTPSelect<ExtArgs> | null
    /**
     * The data needed to update a OTP.
     */
    data: XOR<OTPUpdateInput, OTPUncheckedUpdateInput>
    /**
     * Choose, which OTP to update.
     */
    where: OTPWhereUniqueInput
  }


  /**
   * OTP updateMany
   */
  export type OTPUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OTPS.
     */
    data: XOR<OTPUpdateManyMutationInput, OTPUncheckedUpdateManyInput>
    /**
     * Filter which OTPS to update
     */
    where?: OTPWhereInput
  }


  /**
   * OTP upsert
   */
  export type OTPUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OTP
     */
    select?: OTPSelect<ExtArgs> | null
    /**
     * The filter to search for the OTP to update in case it exists.
     */
    where: OTPWhereUniqueInput
    /**
     * In case the OTP found by the `where` argument doesn't exist, create a new OTP with this data.
     */
    create: XOR<OTPCreateInput, OTPUncheckedCreateInput>
    /**
     * In case the OTP was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OTPUpdateInput, OTPUncheckedUpdateInput>
  }


  /**
   * OTP delete
   */
  export type OTPDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OTP
     */
    select?: OTPSelect<ExtArgs> | null
    /**
     * Filter which OTP to delete.
     */
    where: OTPWhereUniqueInput
  }


  /**
   * OTP deleteMany
   */
  export type OTPDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OTPS to delete
     */
    where?: OTPWhereInput
  }


  /**
   * OTP without action
   */
  export type OTPDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OTP
     */
    select?: OTPSelect<ExtArgs> | null
  }



  /**
   * Model Users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersMinAggregateOutputType = {
    userId: string | null
    email: string | null
    name: string | null
    password: string | null
    token: string | null
    createdAt: Date | null
    updatedAt: Date | null
    rec_status: boolean | null
    cricketPlayerId: string | null
  }

  export type UsersMaxAggregateOutputType = {
    userId: string | null
    email: string | null
    name: string | null
    password: string | null
    token: string | null
    createdAt: Date | null
    updatedAt: Date | null
    rec_status: boolean | null
    cricketPlayerId: string | null
  }

  export type UsersCountAggregateOutputType = {
    userId: number
    email: number
    name: number
    password: number
    token: number
    roles: number
    createdAt: number
    updatedAt: number
    rec_status: number
    cricketPlayerId: number
    _all: number
  }


  export type UsersMinAggregateInputType = {
    userId?: true
    email?: true
    name?: true
    password?: true
    token?: true
    createdAt?: true
    updatedAt?: true
    rec_status?: true
    cricketPlayerId?: true
  }

  export type UsersMaxAggregateInputType = {
    userId?: true
    email?: true
    name?: true
    password?: true
    token?: true
    createdAt?: true
    updatedAt?: true
    rec_status?: true
    cricketPlayerId?: true
  }

  export type UsersCountAggregateInputType = {
    userId?: true
    email?: true
    name?: true
    password?: true
    token?: true
    roles?: true
    createdAt?: true
    updatedAt?: true
    rec_status?: true
    cricketPlayerId?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to aggregate.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithAggregationInput | UsersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: UsersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    userId: string
    email: string
    name: string | null
    password: string | null
    token: string | null
    roles: $Enums.Role[]
    createdAt: Date
    updatedAt: Date
    rec_status: boolean
    cricketPlayerId: string | null
    _count: UsersCountAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type UsersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    token?: boolean
    roles?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    rec_status?: boolean
    cricketPlayerId?: boolean
    cricketPlayer?: boolean | Users$cricketPlayerArgs<ExtArgs>
    cricket_players?: boolean | Users$cricket_playersArgs<ExtArgs>
    verification_token?: boolean | Users$verification_tokenArgs<ExtArgs>
    user_tickets?: boolean | Users$user_ticketsArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type UsersSelectScalar = {
    userId?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    token?: boolean
    roles?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    rec_status?: boolean
    cricketPlayerId?: boolean
  }

  export type UsersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cricketPlayer?: boolean | Users$cricketPlayerArgs<ExtArgs>
    cricket_players?: boolean | Users$cricket_playersArgs<ExtArgs>
    verification_token?: boolean | Users$verification_tokenArgs<ExtArgs>
    user_tickets?: boolean | Users$user_ticketsArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UsersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Users"
    objects: {
      cricketPlayer: Prisma.$CricketPlayerPayload<ExtArgs> | null
      cricket_players: Prisma.$CricketPlayerPayload<ExtArgs>[]
      verification_token: Prisma.$VerificationTokenPayload<ExtArgs>[]
      user_tickets: Prisma.$TicketPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: string
      email: string
      name: string | null
      password: string | null
      token: string | null
      roles: $Enums.Role[]
      createdAt: Date
      updatedAt: Date
      rec_status: boolean
      cricketPlayerId: string | null
    }, ExtArgs["result"]["users"]>
    composites: {}
  }


  type UsersGetPayload<S extends boolean | null | undefined | UsersDefaultArgs> = $Result.GetResult<Prisma.$UsersPayload, S>

  type UsersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UsersFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface UsersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Users'], meta: { name: 'Users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {UsersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UsersFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UsersFindUniqueArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Users that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UsersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UsersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UsersFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindFirstArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UsersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const usersWithUserIdOnly = await prisma.users.findMany({ select: { userId: true } })
     * 
    **/
    findMany<T extends UsersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Users.
     * @param {UsersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends UsersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UsersCreateArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UsersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UsersCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {UsersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends UsersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UsersDeleteArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Users.
     * @param {UsersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UsersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UsersUpdateArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UsersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UsersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UsersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UsersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {UsersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends UsersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UsersUpsertArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UsersCountArgs>(
      args?: Subset<T, UsersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Users model
   */
  readonly fields: UsersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    cricketPlayer<T extends Users$cricketPlayerArgs<ExtArgs> = {}>(args?: Subset<T, Users$cricketPlayerArgs<ExtArgs>>): Prisma__CricketPlayerClient<$Result.GetResult<Prisma.$CricketPlayerPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    cricket_players<T extends Users$cricket_playersArgs<ExtArgs> = {}>(args?: Subset<T, Users$cricket_playersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CricketPlayerPayload<ExtArgs>, T, 'findMany'> | Null>;

    verification_token<T extends Users$verification_tokenArgs<ExtArgs> = {}>(args?: Subset<T, Users$verification_tokenArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, 'findMany'> | Null>;

    user_tickets<T extends Users$user_ticketsArgs<ExtArgs> = {}>(args?: Subset<T, Users$user_ticketsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Users model
   */ 
  interface UsersFieldRefs {
    readonly userId: FieldRef<"Users", 'String'>
    readonly email: FieldRef<"Users", 'String'>
    readonly name: FieldRef<"Users", 'String'>
    readonly password: FieldRef<"Users", 'String'>
    readonly token: FieldRef<"Users", 'String'>
    readonly roles: FieldRef<"Users", 'Role[]'>
    readonly createdAt: FieldRef<"Users", 'DateTime'>
    readonly updatedAt: FieldRef<"Users", 'DateTime'>
    readonly rec_status: FieldRef<"Users", 'Boolean'>
    readonly cricketPlayerId: FieldRef<"Users", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Users findUnique
   */
  export type UsersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }


  /**
   * Users findUniqueOrThrow
   */
  export type UsersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }


  /**
   * Users findFirst
   */
  export type UsersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * Users findFirstOrThrow
   */
  export type UsersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * Users findMany
   */
  export type UsersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * Users create
   */
  export type UsersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to create a Users.
     */
    data: XOR<UsersCreateInput, UsersUncheckedCreateInput>
  }


  /**
   * Users createMany
   */
  export type UsersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UsersCreateManyInput | UsersCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Users update
   */
  export type UsersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to update a Users.
     */
    data: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
    /**
     * Choose, which Users to update.
     */
    where: UsersWhereUniqueInput
  }


  /**
   * Users updateMany
   */
  export type UsersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UsersWhereInput
  }


  /**
   * Users upsert
   */
  export type UsersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The filter to search for the Users to update in case it exists.
     */
    where: UsersWhereUniqueInput
    /**
     * In case the Users found by the `where` argument doesn't exist, create a new Users with this data.
     */
    create: XOR<UsersCreateInput, UsersUncheckedCreateInput>
    /**
     * In case the Users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
  }


  /**
   * Users delete
   */
  export type UsersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter which Users to delete.
     */
    where: UsersWhereUniqueInput
  }


  /**
   * Users deleteMany
   */
  export type UsersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UsersWhereInput
  }


  /**
   * Users.cricketPlayer
   */
  export type Users$cricketPlayerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketPlayer
     */
    select?: CricketPlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketPlayerInclude<ExtArgs> | null
    where?: CricketPlayerWhereInput
  }


  /**
   * Users.cricket_players
   */
  export type Users$cricket_playersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketPlayer
     */
    select?: CricketPlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketPlayerInclude<ExtArgs> | null
    where?: CricketPlayerWhereInput
    orderBy?: CricketPlayerOrderByWithRelationInput | CricketPlayerOrderByWithRelationInput[]
    cursor?: CricketPlayerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CricketPlayerScalarFieldEnum | CricketPlayerScalarFieldEnum[]
  }


  /**
   * Users.verification_token
   */
  export type Users$verification_tokenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VerificationTokenInclude<ExtArgs> | null
    where?: VerificationTokenWhereInput
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    cursor?: VerificationTokenWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }


  /**
   * Users.user_tickets
   */
  export type Users$user_ticketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TicketInclude<ExtArgs> | null
    where?: TicketWhereInput
    orderBy?: TicketOrderByWithRelationInput | TicketOrderByWithRelationInput[]
    cursor?: TicketWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TicketScalarFieldEnum | TicketScalarFieldEnum[]
  }


  /**
   * Users without action
   */
  export type UsersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
  }



  /**
   * Model CricketTeam
   */

  export type AggregateCricketTeam = {
    _count: CricketTeamCountAggregateOutputType | null
    _min: CricketTeamMinAggregateOutputType | null
    _max: CricketTeamMaxAggregateOutputType | null
  }

  export type CricketTeamMinAggregateOutputType = {
    sis_id: string | null
    name: string | null
    year: string | null
  }

  export type CricketTeamMaxAggregateOutputType = {
    sis_id: string | null
    name: string | null
    year: string | null
  }

  export type CricketTeamCountAggregateOutputType = {
    sis_id: number
    name: number
    year: number
    _all: number
  }


  export type CricketTeamMinAggregateInputType = {
    sis_id?: true
    name?: true
    year?: true
  }

  export type CricketTeamMaxAggregateInputType = {
    sis_id?: true
    name?: true
    year?: true
  }

  export type CricketTeamCountAggregateInputType = {
    sis_id?: true
    name?: true
    year?: true
    _all?: true
  }

  export type CricketTeamAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CricketTeam to aggregate.
     */
    where?: CricketTeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CricketTeams to fetch.
     */
    orderBy?: CricketTeamOrderByWithRelationInput | CricketTeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CricketTeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CricketTeams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CricketTeams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CricketTeams
    **/
    _count?: true | CricketTeamCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CricketTeamMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CricketTeamMaxAggregateInputType
  }

  export type GetCricketTeamAggregateType<T extends CricketTeamAggregateArgs> = {
        [P in keyof T & keyof AggregateCricketTeam]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCricketTeam[P]>
      : GetScalarType<T[P], AggregateCricketTeam[P]>
  }




  export type CricketTeamGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CricketTeamWhereInput
    orderBy?: CricketTeamOrderByWithAggregationInput | CricketTeamOrderByWithAggregationInput[]
    by: CricketTeamScalarFieldEnum[] | CricketTeamScalarFieldEnum
    having?: CricketTeamScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CricketTeamCountAggregateInputType | true
    _min?: CricketTeamMinAggregateInputType
    _max?: CricketTeamMaxAggregateInputType
  }

  export type CricketTeamGroupByOutputType = {
    sis_id: string
    name: string
    year: string
    _count: CricketTeamCountAggregateOutputType | null
    _min: CricketTeamMinAggregateOutputType | null
    _max: CricketTeamMaxAggregateOutputType | null
  }

  type GetCricketTeamGroupByPayload<T extends CricketTeamGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CricketTeamGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CricketTeamGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CricketTeamGroupByOutputType[P]>
            : GetScalarType<T[P], CricketTeamGroupByOutputType[P]>
        }
      >
    >


  export type CricketTeamSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    sis_id?: boolean
    name?: boolean
    year?: boolean
    players?: boolean | CricketTeam$playersArgs<ExtArgs>
    winning_team?: boolean | CricketTeam$winning_teamArgs<ExtArgs>
    toss_winning_team?: boolean | CricketTeam$toss_winning_teamArgs<ExtArgs>
    player_team?: boolean | CricketTeam$player_teamArgs<ExtArgs>
    cricket_match_teamData?: boolean | CricketTeam$cricket_match_teamDataArgs<ExtArgs>
    cricket_match_player_batting_score?: boolean | CricketTeam$cricket_match_player_batting_scoreArgs<ExtArgs>
    cricket_match_player_bowling_score?: boolean | CricketTeam$cricket_match_player_bowling_scoreArgs<ExtArgs>
    CricketMatchTeamA?: boolean | CricketTeam$CricketMatchTeamAArgs<ExtArgs>
    CricketMatchTeamB?: boolean | CricketTeam$CricketMatchTeamBArgs<ExtArgs>
    _count?: boolean | CricketTeamCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cricketTeam"]>

  export type CricketTeamSelectScalar = {
    sis_id?: boolean
    name?: boolean
    year?: boolean
  }

  export type CricketTeamInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    players?: boolean | CricketTeam$playersArgs<ExtArgs>
    winning_team?: boolean | CricketTeam$winning_teamArgs<ExtArgs>
    toss_winning_team?: boolean | CricketTeam$toss_winning_teamArgs<ExtArgs>
    player_team?: boolean | CricketTeam$player_teamArgs<ExtArgs>
    cricket_match_teamData?: boolean | CricketTeam$cricket_match_teamDataArgs<ExtArgs>
    cricket_match_player_batting_score?: boolean | CricketTeam$cricket_match_player_batting_scoreArgs<ExtArgs>
    cricket_match_player_bowling_score?: boolean | CricketTeam$cricket_match_player_bowling_scoreArgs<ExtArgs>
    CricketMatchTeamA?: boolean | CricketTeam$CricketMatchTeamAArgs<ExtArgs>
    CricketMatchTeamB?: boolean | CricketTeam$CricketMatchTeamBArgs<ExtArgs>
    _count?: boolean | CricketTeamCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CricketTeamPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CricketTeam"
    objects: {
      players: Prisma.$CricketPlayerPayload<ExtArgs>[]
      winning_team: Prisma.$CricketMatchPayload<ExtArgs>[]
      toss_winning_team: Prisma.$CricketMatchPayload<ExtArgs>[]
      player_team: Prisma.$CricketPlayerPayload<ExtArgs>[]
      cricket_match_teamData: Prisma.$CricketTeamMatchDataPayload<ExtArgs>[]
      cricket_match_player_batting_score: Prisma.$CricketMatchPlayerBattingScorePayload<ExtArgs>[]
      cricket_match_player_bowling_score: Prisma.$CricketMatchPlayerBowlingScorePayload<ExtArgs>[]
      CricketMatchTeamA: Prisma.$CricketMatchPayload<ExtArgs>[]
      CricketMatchTeamB: Prisma.$CricketMatchPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      sis_id: string
      name: string
      year: string
    }, ExtArgs["result"]["cricketTeam"]>
    composites: {}
  }


  type CricketTeamGetPayload<S extends boolean | null | undefined | CricketTeamDefaultArgs> = $Result.GetResult<Prisma.$CricketTeamPayload, S>

  type CricketTeamCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CricketTeamFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CricketTeamCountAggregateInputType | true
    }

  export interface CricketTeamDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CricketTeam'], meta: { name: 'CricketTeam' } }
    /**
     * Find zero or one CricketTeam that matches the filter.
     * @param {CricketTeamFindUniqueArgs} args - Arguments to find a CricketTeam
     * @example
     * // Get one CricketTeam
     * const cricketTeam = await prisma.cricketTeam.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CricketTeamFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CricketTeamFindUniqueArgs<ExtArgs>>
    ): Prisma__CricketTeamClient<$Result.GetResult<Prisma.$CricketTeamPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one CricketTeam that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CricketTeamFindUniqueOrThrowArgs} args - Arguments to find a CricketTeam
     * @example
     * // Get one CricketTeam
     * const cricketTeam = await prisma.cricketTeam.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CricketTeamFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CricketTeamFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CricketTeamClient<$Result.GetResult<Prisma.$CricketTeamPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first CricketTeam that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CricketTeamFindFirstArgs} args - Arguments to find a CricketTeam
     * @example
     * // Get one CricketTeam
     * const cricketTeam = await prisma.cricketTeam.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CricketTeamFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CricketTeamFindFirstArgs<ExtArgs>>
    ): Prisma__CricketTeamClient<$Result.GetResult<Prisma.$CricketTeamPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first CricketTeam that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CricketTeamFindFirstOrThrowArgs} args - Arguments to find a CricketTeam
     * @example
     * // Get one CricketTeam
     * const cricketTeam = await prisma.cricketTeam.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CricketTeamFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CricketTeamFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CricketTeamClient<$Result.GetResult<Prisma.$CricketTeamPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more CricketTeams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CricketTeamFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CricketTeams
     * const cricketTeams = await prisma.cricketTeam.findMany()
     * 
     * // Get first 10 CricketTeams
     * const cricketTeams = await prisma.cricketTeam.findMany({ take: 10 })
     * 
     * // Only select the `sis_id`
     * const cricketTeamWithSis_idOnly = await prisma.cricketTeam.findMany({ select: { sis_id: true } })
     * 
    **/
    findMany<T extends CricketTeamFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CricketTeamFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CricketTeamPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a CricketTeam.
     * @param {CricketTeamCreateArgs} args - Arguments to create a CricketTeam.
     * @example
     * // Create one CricketTeam
     * const CricketTeam = await prisma.cricketTeam.create({
     *   data: {
     *     // ... data to create a CricketTeam
     *   }
     * })
     * 
    **/
    create<T extends CricketTeamCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CricketTeamCreateArgs<ExtArgs>>
    ): Prisma__CricketTeamClient<$Result.GetResult<Prisma.$CricketTeamPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many CricketTeams.
     *     @param {CricketTeamCreateManyArgs} args - Arguments to create many CricketTeams.
     *     @example
     *     // Create many CricketTeams
     *     const cricketTeam = await prisma.cricketTeam.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CricketTeamCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CricketTeamCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CricketTeam.
     * @param {CricketTeamDeleteArgs} args - Arguments to delete one CricketTeam.
     * @example
     * // Delete one CricketTeam
     * const CricketTeam = await prisma.cricketTeam.delete({
     *   where: {
     *     // ... filter to delete one CricketTeam
     *   }
     * })
     * 
    **/
    delete<T extends CricketTeamDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CricketTeamDeleteArgs<ExtArgs>>
    ): Prisma__CricketTeamClient<$Result.GetResult<Prisma.$CricketTeamPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one CricketTeam.
     * @param {CricketTeamUpdateArgs} args - Arguments to update one CricketTeam.
     * @example
     * // Update one CricketTeam
     * const cricketTeam = await prisma.cricketTeam.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CricketTeamUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CricketTeamUpdateArgs<ExtArgs>>
    ): Prisma__CricketTeamClient<$Result.GetResult<Prisma.$CricketTeamPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more CricketTeams.
     * @param {CricketTeamDeleteManyArgs} args - Arguments to filter CricketTeams to delete.
     * @example
     * // Delete a few CricketTeams
     * const { count } = await prisma.cricketTeam.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CricketTeamDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CricketTeamDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CricketTeams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CricketTeamUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CricketTeams
     * const cricketTeam = await prisma.cricketTeam.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CricketTeamUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CricketTeamUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CricketTeam.
     * @param {CricketTeamUpsertArgs} args - Arguments to update or create a CricketTeam.
     * @example
     * // Update or create a CricketTeam
     * const cricketTeam = await prisma.cricketTeam.upsert({
     *   create: {
     *     // ... data to create a CricketTeam
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CricketTeam we want to update
     *   }
     * })
    **/
    upsert<T extends CricketTeamUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CricketTeamUpsertArgs<ExtArgs>>
    ): Prisma__CricketTeamClient<$Result.GetResult<Prisma.$CricketTeamPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of CricketTeams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CricketTeamCountArgs} args - Arguments to filter CricketTeams to count.
     * @example
     * // Count the number of CricketTeams
     * const count = await prisma.cricketTeam.count({
     *   where: {
     *     // ... the filter for the CricketTeams we want to count
     *   }
     * })
    **/
    count<T extends CricketTeamCountArgs>(
      args?: Subset<T, CricketTeamCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CricketTeamCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CricketTeam.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CricketTeamAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CricketTeamAggregateArgs>(args: Subset<T, CricketTeamAggregateArgs>): Prisma.PrismaPromise<GetCricketTeamAggregateType<T>>

    /**
     * Group by CricketTeam.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CricketTeamGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CricketTeamGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CricketTeamGroupByArgs['orderBy'] }
        : { orderBy?: CricketTeamGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CricketTeamGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCricketTeamGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CricketTeam model
   */
  readonly fields: CricketTeamFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CricketTeam.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CricketTeamClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    players<T extends CricketTeam$playersArgs<ExtArgs> = {}>(args?: Subset<T, CricketTeam$playersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CricketPlayerPayload<ExtArgs>, T, 'findMany'> | Null>;

    winning_team<T extends CricketTeam$winning_teamArgs<ExtArgs> = {}>(args?: Subset<T, CricketTeam$winning_teamArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CricketMatchPayload<ExtArgs>, T, 'findMany'> | Null>;

    toss_winning_team<T extends CricketTeam$toss_winning_teamArgs<ExtArgs> = {}>(args?: Subset<T, CricketTeam$toss_winning_teamArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CricketMatchPayload<ExtArgs>, T, 'findMany'> | Null>;

    player_team<T extends CricketTeam$player_teamArgs<ExtArgs> = {}>(args?: Subset<T, CricketTeam$player_teamArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CricketPlayerPayload<ExtArgs>, T, 'findMany'> | Null>;

    cricket_match_teamData<T extends CricketTeam$cricket_match_teamDataArgs<ExtArgs> = {}>(args?: Subset<T, CricketTeam$cricket_match_teamDataArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CricketTeamMatchDataPayload<ExtArgs>, T, 'findMany'> | Null>;

    cricket_match_player_batting_score<T extends CricketTeam$cricket_match_player_batting_scoreArgs<ExtArgs> = {}>(args?: Subset<T, CricketTeam$cricket_match_player_batting_scoreArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CricketMatchPlayerBattingScorePayload<ExtArgs>, T, 'findMany'> | Null>;

    cricket_match_player_bowling_score<T extends CricketTeam$cricket_match_player_bowling_scoreArgs<ExtArgs> = {}>(args?: Subset<T, CricketTeam$cricket_match_player_bowling_scoreArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CricketMatchPlayerBowlingScorePayload<ExtArgs>, T, 'findMany'> | Null>;

    CricketMatchTeamA<T extends CricketTeam$CricketMatchTeamAArgs<ExtArgs> = {}>(args?: Subset<T, CricketTeam$CricketMatchTeamAArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CricketMatchPayload<ExtArgs>, T, 'findMany'> | Null>;

    CricketMatchTeamB<T extends CricketTeam$CricketMatchTeamBArgs<ExtArgs> = {}>(args?: Subset<T, CricketTeam$CricketMatchTeamBArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CricketMatchPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the CricketTeam model
   */ 
  interface CricketTeamFieldRefs {
    readonly sis_id: FieldRef<"CricketTeam", 'String'>
    readonly name: FieldRef<"CricketTeam", 'String'>
    readonly year: FieldRef<"CricketTeam", 'String'>
  }
    

  // Custom InputTypes

  /**
   * CricketTeam findUnique
   */
  export type CricketTeamFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketTeam
     */
    select?: CricketTeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketTeamInclude<ExtArgs> | null
    /**
     * Filter, which CricketTeam to fetch.
     */
    where: CricketTeamWhereUniqueInput
  }


  /**
   * CricketTeam findUniqueOrThrow
   */
  export type CricketTeamFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketTeam
     */
    select?: CricketTeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketTeamInclude<ExtArgs> | null
    /**
     * Filter, which CricketTeam to fetch.
     */
    where: CricketTeamWhereUniqueInput
  }


  /**
   * CricketTeam findFirst
   */
  export type CricketTeamFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketTeam
     */
    select?: CricketTeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketTeamInclude<ExtArgs> | null
    /**
     * Filter, which CricketTeam to fetch.
     */
    where?: CricketTeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CricketTeams to fetch.
     */
    orderBy?: CricketTeamOrderByWithRelationInput | CricketTeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CricketTeams.
     */
    cursor?: CricketTeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CricketTeams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CricketTeams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CricketTeams.
     */
    distinct?: CricketTeamScalarFieldEnum | CricketTeamScalarFieldEnum[]
  }


  /**
   * CricketTeam findFirstOrThrow
   */
  export type CricketTeamFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketTeam
     */
    select?: CricketTeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketTeamInclude<ExtArgs> | null
    /**
     * Filter, which CricketTeam to fetch.
     */
    where?: CricketTeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CricketTeams to fetch.
     */
    orderBy?: CricketTeamOrderByWithRelationInput | CricketTeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CricketTeams.
     */
    cursor?: CricketTeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CricketTeams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CricketTeams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CricketTeams.
     */
    distinct?: CricketTeamScalarFieldEnum | CricketTeamScalarFieldEnum[]
  }


  /**
   * CricketTeam findMany
   */
  export type CricketTeamFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketTeam
     */
    select?: CricketTeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketTeamInclude<ExtArgs> | null
    /**
     * Filter, which CricketTeams to fetch.
     */
    where?: CricketTeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CricketTeams to fetch.
     */
    orderBy?: CricketTeamOrderByWithRelationInput | CricketTeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CricketTeams.
     */
    cursor?: CricketTeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CricketTeams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CricketTeams.
     */
    skip?: number
    distinct?: CricketTeamScalarFieldEnum | CricketTeamScalarFieldEnum[]
  }


  /**
   * CricketTeam create
   */
  export type CricketTeamCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketTeam
     */
    select?: CricketTeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketTeamInclude<ExtArgs> | null
    /**
     * The data needed to create a CricketTeam.
     */
    data: XOR<CricketTeamCreateInput, CricketTeamUncheckedCreateInput>
  }


  /**
   * CricketTeam createMany
   */
  export type CricketTeamCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CricketTeams.
     */
    data: CricketTeamCreateManyInput | CricketTeamCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * CricketTeam update
   */
  export type CricketTeamUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketTeam
     */
    select?: CricketTeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketTeamInclude<ExtArgs> | null
    /**
     * The data needed to update a CricketTeam.
     */
    data: XOR<CricketTeamUpdateInput, CricketTeamUncheckedUpdateInput>
    /**
     * Choose, which CricketTeam to update.
     */
    where: CricketTeamWhereUniqueInput
  }


  /**
   * CricketTeam updateMany
   */
  export type CricketTeamUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CricketTeams.
     */
    data: XOR<CricketTeamUpdateManyMutationInput, CricketTeamUncheckedUpdateManyInput>
    /**
     * Filter which CricketTeams to update
     */
    where?: CricketTeamWhereInput
  }


  /**
   * CricketTeam upsert
   */
  export type CricketTeamUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketTeam
     */
    select?: CricketTeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketTeamInclude<ExtArgs> | null
    /**
     * The filter to search for the CricketTeam to update in case it exists.
     */
    where: CricketTeamWhereUniqueInput
    /**
     * In case the CricketTeam found by the `where` argument doesn't exist, create a new CricketTeam with this data.
     */
    create: XOR<CricketTeamCreateInput, CricketTeamUncheckedCreateInput>
    /**
     * In case the CricketTeam was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CricketTeamUpdateInput, CricketTeamUncheckedUpdateInput>
  }


  /**
   * CricketTeam delete
   */
  export type CricketTeamDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketTeam
     */
    select?: CricketTeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketTeamInclude<ExtArgs> | null
    /**
     * Filter which CricketTeam to delete.
     */
    where: CricketTeamWhereUniqueInput
  }


  /**
   * CricketTeam deleteMany
   */
  export type CricketTeamDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CricketTeams to delete
     */
    where?: CricketTeamWhereInput
  }


  /**
   * CricketTeam.players
   */
  export type CricketTeam$playersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketPlayer
     */
    select?: CricketPlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketPlayerInclude<ExtArgs> | null
    where?: CricketPlayerWhereInput
    orderBy?: CricketPlayerOrderByWithRelationInput | CricketPlayerOrderByWithRelationInput[]
    cursor?: CricketPlayerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CricketPlayerScalarFieldEnum | CricketPlayerScalarFieldEnum[]
  }


  /**
   * CricketTeam.winning_team
   */
  export type CricketTeam$winning_teamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketMatch
     */
    select?: CricketMatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketMatchInclude<ExtArgs> | null
    where?: CricketMatchWhereInput
    orderBy?: CricketMatchOrderByWithRelationInput | CricketMatchOrderByWithRelationInput[]
    cursor?: CricketMatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CricketMatchScalarFieldEnum | CricketMatchScalarFieldEnum[]
  }


  /**
   * CricketTeam.toss_winning_team
   */
  export type CricketTeam$toss_winning_teamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketMatch
     */
    select?: CricketMatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketMatchInclude<ExtArgs> | null
    where?: CricketMatchWhereInput
    orderBy?: CricketMatchOrderByWithRelationInput | CricketMatchOrderByWithRelationInput[]
    cursor?: CricketMatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CricketMatchScalarFieldEnum | CricketMatchScalarFieldEnum[]
  }


  /**
   * CricketTeam.player_team
   */
  export type CricketTeam$player_teamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketPlayer
     */
    select?: CricketPlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketPlayerInclude<ExtArgs> | null
    where?: CricketPlayerWhereInput
    orderBy?: CricketPlayerOrderByWithRelationInput | CricketPlayerOrderByWithRelationInput[]
    cursor?: CricketPlayerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CricketPlayerScalarFieldEnum | CricketPlayerScalarFieldEnum[]
  }


  /**
   * CricketTeam.cricket_match_teamData
   */
  export type CricketTeam$cricket_match_teamDataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketTeamMatchData
     */
    select?: CricketTeamMatchDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketTeamMatchDataInclude<ExtArgs> | null
    where?: CricketTeamMatchDataWhereInput
    orderBy?: CricketTeamMatchDataOrderByWithRelationInput | CricketTeamMatchDataOrderByWithRelationInput[]
    cursor?: CricketTeamMatchDataWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CricketTeamMatchDataScalarFieldEnum | CricketTeamMatchDataScalarFieldEnum[]
  }


  /**
   * CricketTeam.cricket_match_player_batting_score
   */
  export type CricketTeam$cricket_match_player_batting_scoreArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketMatchPlayerBattingScore
     */
    select?: CricketMatchPlayerBattingScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketMatchPlayerBattingScoreInclude<ExtArgs> | null
    where?: CricketMatchPlayerBattingScoreWhereInput
    orderBy?: CricketMatchPlayerBattingScoreOrderByWithRelationInput | CricketMatchPlayerBattingScoreOrderByWithRelationInput[]
    cursor?: CricketMatchPlayerBattingScoreWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CricketMatchPlayerBattingScoreScalarFieldEnum | CricketMatchPlayerBattingScoreScalarFieldEnum[]
  }


  /**
   * CricketTeam.cricket_match_player_bowling_score
   */
  export type CricketTeam$cricket_match_player_bowling_scoreArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketMatchPlayerBowlingScore
     */
    select?: CricketMatchPlayerBowlingScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketMatchPlayerBowlingScoreInclude<ExtArgs> | null
    where?: CricketMatchPlayerBowlingScoreWhereInput
    orderBy?: CricketMatchPlayerBowlingScoreOrderByWithRelationInput | CricketMatchPlayerBowlingScoreOrderByWithRelationInput[]
    cursor?: CricketMatchPlayerBowlingScoreWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CricketMatchPlayerBowlingScoreScalarFieldEnum | CricketMatchPlayerBowlingScoreScalarFieldEnum[]
  }


  /**
   * CricketTeam.CricketMatchTeamA
   */
  export type CricketTeam$CricketMatchTeamAArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketMatch
     */
    select?: CricketMatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketMatchInclude<ExtArgs> | null
    where?: CricketMatchWhereInput
    orderBy?: CricketMatchOrderByWithRelationInput | CricketMatchOrderByWithRelationInput[]
    cursor?: CricketMatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CricketMatchScalarFieldEnum | CricketMatchScalarFieldEnum[]
  }


  /**
   * CricketTeam.CricketMatchTeamB
   */
  export type CricketTeam$CricketMatchTeamBArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketMatch
     */
    select?: CricketMatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketMatchInclude<ExtArgs> | null
    where?: CricketMatchWhereInput
    orderBy?: CricketMatchOrderByWithRelationInput | CricketMatchOrderByWithRelationInput[]
    cursor?: CricketMatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CricketMatchScalarFieldEnum | CricketMatchScalarFieldEnum[]
  }


  /**
   * CricketTeam without action
   */
  export type CricketTeamDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketTeam
     */
    select?: CricketTeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketTeamInclude<ExtArgs> | null
  }



  /**
   * Model CricketPlayer
   */

  export type AggregateCricketPlayer = {
    _count: CricketPlayerCountAggregateOutputType | null
    _avg: CricketPlayerAvgAggregateOutputType | null
    _sum: CricketPlayerSumAggregateOutputType | null
    _min: CricketPlayerMinAggregateOutputType | null
    _max: CricketPlayerMaxAggregateOutputType | null
  }

  export type CricketPlayerAvgAggregateOutputType = {
    runs: number | null
    noOfMatchesPlayed: number | null
    noOfSixes: number | null
    noOfFours: number | null
    noOfWicketsTaken: number | null
    noOfHalfCenturies: number | null
    noOfCenturies: number | null
    noOfWickets: number | null
  }

  export type CricketPlayerSumAggregateOutputType = {
    runs: number | null
    noOfMatchesPlayed: number | null
    noOfSixes: number | null
    noOfFours: number | null
    noOfWicketsTaken: number | null
    noOfHalfCenturies: number | null
    noOfCenturies: number | null
    noOfWickets: number | null
  }

  export type CricketPlayerMinAggregateOutputType = {
    sis_id: string | null
    userId: string | null
    teamId: string | null
    isSelected: boolean | null
    isCaptain: boolean | null
    isWicketKeeper: boolean | null
    isAllRounder: boolean | null
    isBatsman: boolean | null
    isBowler: boolean | null
    runs: number | null
    noOfMatchesPlayed: number | null
    noOfSixes: number | null
    noOfFours: number | null
    noOfWicketsTaken: number | null
    noOfHalfCenturies: number | null
    noOfCenturies: number | null
    noOfWickets: number | null
  }

  export type CricketPlayerMaxAggregateOutputType = {
    sis_id: string | null
    userId: string | null
    teamId: string | null
    isSelected: boolean | null
    isCaptain: boolean | null
    isWicketKeeper: boolean | null
    isAllRounder: boolean | null
    isBatsman: boolean | null
    isBowler: boolean | null
    runs: number | null
    noOfMatchesPlayed: number | null
    noOfSixes: number | null
    noOfFours: number | null
    noOfWicketsTaken: number | null
    noOfHalfCenturies: number | null
    noOfCenturies: number | null
    noOfWickets: number | null
  }

  export type CricketPlayerCountAggregateOutputType = {
    sis_id: number
    userId: number
    teamId: number
    isSelected: number
    isCaptain: number
    isWicketKeeper: number
    isAllRounder: number
    isBatsman: number
    isBowler: number
    runs: number
    noOfMatchesPlayed: number
    noOfSixes: number
    noOfFours: number
    noOfWicketsTaken: number
    noOfHalfCenturies: number
    noOfCenturies: number
    noOfWickets: number
    _all: number
  }


  export type CricketPlayerAvgAggregateInputType = {
    runs?: true
    noOfMatchesPlayed?: true
    noOfSixes?: true
    noOfFours?: true
    noOfWicketsTaken?: true
    noOfHalfCenturies?: true
    noOfCenturies?: true
    noOfWickets?: true
  }

  export type CricketPlayerSumAggregateInputType = {
    runs?: true
    noOfMatchesPlayed?: true
    noOfSixes?: true
    noOfFours?: true
    noOfWicketsTaken?: true
    noOfHalfCenturies?: true
    noOfCenturies?: true
    noOfWickets?: true
  }

  export type CricketPlayerMinAggregateInputType = {
    sis_id?: true
    userId?: true
    teamId?: true
    isSelected?: true
    isCaptain?: true
    isWicketKeeper?: true
    isAllRounder?: true
    isBatsman?: true
    isBowler?: true
    runs?: true
    noOfMatchesPlayed?: true
    noOfSixes?: true
    noOfFours?: true
    noOfWicketsTaken?: true
    noOfHalfCenturies?: true
    noOfCenturies?: true
    noOfWickets?: true
  }

  export type CricketPlayerMaxAggregateInputType = {
    sis_id?: true
    userId?: true
    teamId?: true
    isSelected?: true
    isCaptain?: true
    isWicketKeeper?: true
    isAllRounder?: true
    isBatsman?: true
    isBowler?: true
    runs?: true
    noOfMatchesPlayed?: true
    noOfSixes?: true
    noOfFours?: true
    noOfWicketsTaken?: true
    noOfHalfCenturies?: true
    noOfCenturies?: true
    noOfWickets?: true
  }

  export type CricketPlayerCountAggregateInputType = {
    sis_id?: true
    userId?: true
    teamId?: true
    isSelected?: true
    isCaptain?: true
    isWicketKeeper?: true
    isAllRounder?: true
    isBatsman?: true
    isBowler?: true
    runs?: true
    noOfMatchesPlayed?: true
    noOfSixes?: true
    noOfFours?: true
    noOfWicketsTaken?: true
    noOfHalfCenturies?: true
    noOfCenturies?: true
    noOfWickets?: true
    _all?: true
  }

  export type CricketPlayerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CricketPlayer to aggregate.
     */
    where?: CricketPlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CricketPlayers to fetch.
     */
    orderBy?: CricketPlayerOrderByWithRelationInput | CricketPlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CricketPlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CricketPlayers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CricketPlayers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CricketPlayers
    **/
    _count?: true | CricketPlayerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CricketPlayerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CricketPlayerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CricketPlayerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CricketPlayerMaxAggregateInputType
  }

  export type GetCricketPlayerAggregateType<T extends CricketPlayerAggregateArgs> = {
        [P in keyof T & keyof AggregateCricketPlayer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCricketPlayer[P]>
      : GetScalarType<T[P], AggregateCricketPlayer[P]>
  }




  export type CricketPlayerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CricketPlayerWhereInput
    orderBy?: CricketPlayerOrderByWithAggregationInput | CricketPlayerOrderByWithAggregationInput[]
    by: CricketPlayerScalarFieldEnum[] | CricketPlayerScalarFieldEnum
    having?: CricketPlayerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CricketPlayerCountAggregateInputType | true
    _avg?: CricketPlayerAvgAggregateInputType
    _sum?: CricketPlayerSumAggregateInputType
    _min?: CricketPlayerMinAggregateInputType
    _max?: CricketPlayerMaxAggregateInputType
  }

  export type CricketPlayerGroupByOutputType = {
    sis_id: string
    userId: string
    teamId: string | null
    isSelected: boolean
    isCaptain: boolean
    isWicketKeeper: boolean
    isAllRounder: boolean
    isBatsman: boolean
    isBowler: boolean
    runs: number
    noOfMatchesPlayed: number
    noOfSixes: number
    noOfFours: number
    noOfWicketsTaken: number
    noOfHalfCenturies: number
    noOfCenturies: number
    noOfWickets: number
    _count: CricketPlayerCountAggregateOutputType | null
    _avg: CricketPlayerAvgAggregateOutputType | null
    _sum: CricketPlayerSumAggregateOutputType | null
    _min: CricketPlayerMinAggregateOutputType | null
    _max: CricketPlayerMaxAggregateOutputType | null
  }

  type GetCricketPlayerGroupByPayload<T extends CricketPlayerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CricketPlayerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CricketPlayerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CricketPlayerGroupByOutputType[P]>
            : GetScalarType<T[P], CricketPlayerGroupByOutputType[P]>
        }
      >
    >


  export type CricketPlayerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    sis_id?: boolean
    userId?: boolean
    teamId?: boolean
    isSelected?: boolean
    isCaptain?: boolean
    isWicketKeeper?: boolean
    isAllRounder?: boolean
    isBatsman?: boolean
    isBowler?: boolean
    runs?: boolean
    noOfMatchesPlayed?: boolean
    noOfSixes?: boolean
    noOfFours?: boolean
    noOfWicketsTaken?: boolean
    noOfHalfCenturies?: boolean
    noOfCenturies?: boolean
    noOfWickets?: boolean
    user?: boolean | UsersDefaultArgs<ExtArgs>
    matches?: boolean | CricketPlayer$matchesArgs<ExtArgs>
    team?: boolean | CricketPlayer$teamArgs<ExtArgs>
    user_cricket_players?: boolean | CricketPlayer$user_cricket_playersArgs<ExtArgs>
    team_players?: boolean | CricketPlayer$team_playersArgs<ExtArgs>
    batting_score_player?: boolean | CricketPlayer$batting_score_playerArgs<ExtArgs>
    bowling_score_player?: boolean | CricketPlayer$bowling_score_playerArgs<ExtArgs>
    _count?: boolean | CricketPlayerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cricketPlayer"]>

  export type CricketPlayerSelectScalar = {
    sis_id?: boolean
    userId?: boolean
    teamId?: boolean
    isSelected?: boolean
    isCaptain?: boolean
    isWicketKeeper?: boolean
    isAllRounder?: boolean
    isBatsman?: boolean
    isBowler?: boolean
    runs?: boolean
    noOfMatchesPlayed?: boolean
    noOfSixes?: boolean
    noOfFours?: boolean
    noOfWicketsTaken?: boolean
    noOfHalfCenturies?: boolean
    noOfCenturies?: boolean
    noOfWickets?: boolean
  }

  export type CricketPlayerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UsersDefaultArgs<ExtArgs>
    matches?: boolean | CricketPlayer$matchesArgs<ExtArgs>
    team?: boolean | CricketPlayer$teamArgs<ExtArgs>
    user_cricket_players?: boolean | CricketPlayer$user_cricket_playersArgs<ExtArgs>
    team_players?: boolean | CricketPlayer$team_playersArgs<ExtArgs>
    batting_score_player?: boolean | CricketPlayer$batting_score_playerArgs<ExtArgs>
    bowling_score_player?: boolean | CricketPlayer$bowling_score_playerArgs<ExtArgs>
    _count?: boolean | CricketPlayerCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CricketPlayerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CricketPlayer"
    objects: {
      user: Prisma.$UsersPayload<ExtArgs>
      matches: Prisma.$CricketMatchPayload<ExtArgs>[]
      team: Prisma.$CricketTeamPayload<ExtArgs> | null
      user_cricket_players: Prisma.$UsersPayload<ExtArgs>[]
      team_players: Prisma.$CricketTeamPayload<ExtArgs>[]
      batting_score_player: Prisma.$CricketMatchPlayerBattingScorePayload<ExtArgs>[]
      bowling_score_player: Prisma.$CricketMatchPlayerBowlingScorePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      sis_id: string
      userId: string
      teamId: string | null
      isSelected: boolean
      isCaptain: boolean
      isWicketKeeper: boolean
      isAllRounder: boolean
      isBatsman: boolean
      isBowler: boolean
      runs: number
      noOfMatchesPlayed: number
      noOfSixes: number
      noOfFours: number
      noOfWicketsTaken: number
      noOfHalfCenturies: number
      noOfCenturies: number
      noOfWickets: number
    }, ExtArgs["result"]["cricketPlayer"]>
    composites: {}
  }


  type CricketPlayerGetPayload<S extends boolean | null | undefined | CricketPlayerDefaultArgs> = $Result.GetResult<Prisma.$CricketPlayerPayload, S>

  type CricketPlayerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CricketPlayerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CricketPlayerCountAggregateInputType | true
    }

  export interface CricketPlayerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CricketPlayer'], meta: { name: 'CricketPlayer' } }
    /**
     * Find zero or one CricketPlayer that matches the filter.
     * @param {CricketPlayerFindUniqueArgs} args - Arguments to find a CricketPlayer
     * @example
     * // Get one CricketPlayer
     * const cricketPlayer = await prisma.cricketPlayer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CricketPlayerFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CricketPlayerFindUniqueArgs<ExtArgs>>
    ): Prisma__CricketPlayerClient<$Result.GetResult<Prisma.$CricketPlayerPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one CricketPlayer that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CricketPlayerFindUniqueOrThrowArgs} args - Arguments to find a CricketPlayer
     * @example
     * // Get one CricketPlayer
     * const cricketPlayer = await prisma.cricketPlayer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CricketPlayerFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CricketPlayerFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CricketPlayerClient<$Result.GetResult<Prisma.$CricketPlayerPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first CricketPlayer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CricketPlayerFindFirstArgs} args - Arguments to find a CricketPlayer
     * @example
     * // Get one CricketPlayer
     * const cricketPlayer = await prisma.cricketPlayer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CricketPlayerFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CricketPlayerFindFirstArgs<ExtArgs>>
    ): Prisma__CricketPlayerClient<$Result.GetResult<Prisma.$CricketPlayerPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first CricketPlayer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CricketPlayerFindFirstOrThrowArgs} args - Arguments to find a CricketPlayer
     * @example
     * // Get one CricketPlayer
     * const cricketPlayer = await prisma.cricketPlayer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CricketPlayerFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CricketPlayerFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CricketPlayerClient<$Result.GetResult<Prisma.$CricketPlayerPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more CricketPlayers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CricketPlayerFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CricketPlayers
     * const cricketPlayers = await prisma.cricketPlayer.findMany()
     * 
     * // Get first 10 CricketPlayers
     * const cricketPlayers = await prisma.cricketPlayer.findMany({ take: 10 })
     * 
     * // Only select the `sis_id`
     * const cricketPlayerWithSis_idOnly = await prisma.cricketPlayer.findMany({ select: { sis_id: true } })
     * 
    **/
    findMany<T extends CricketPlayerFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CricketPlayerFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CricketPlayerPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a CricketPlayer.
     * @param {CricketPlayerCreateArgs} args - Arguments to create a CricketPlayer.
     * @example
     * // Create one CricketPlayer
     * const CricketPlayer = await prisma.cricketPlayer.create({
     *   data: {
     *     // ... data to create a CricketPlayer
     *   }
     * })
     * 
    **/
    create<T extends CricketPlayerCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CricketPlayerCreateArgs<ExtArgs>>
    ): Prisma__CricketPlayerClient<$Result.GetResult<Prisma.$CricketPlayerPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many CricketPlayers.
     *     @param {CricketPlayerCreateManyArgs} args - Arguments to create many CricketPlayers.
     *     @example
     *     // Create many CricketPlayers
     *     const cricketPlayer = await prisma.cricketPlayer.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CricketPlayerCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CricketPlayerCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CricketPlayer.
     * @param {CricketPlayerDeleteArgs} args - Arguments to delete one CricketPlayer.
     * @example
     * // Delete one CricketPlayer
     * const CricketPlayer = await prisma.cricketPlayer.delete({
     *   where: {
     *     // ... filter to delete one CricketPlayer
     *   }
     * })
     * 
    **/
    delete<T extends CricketPlayerDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CricketPlayerDeleteArgs<ExtArgs>>
    ): Prisma__CricketPlayerClient<$Result.GetResult<Prisma.$CricketPlayerPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one CricketPlayer.
     * @param {CricketPlayerUpdateArgs} args - Arguments to update one CricketPlayer.
     * @example
     * // Update one CricketPlayer
     * const cricketPlayer = await prisma.cricketPlayer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CricketPlayerUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CricketPlayerUpdateArgs<ExtArgs>>
    ): Prisma__CricketPlayerClient<$Result.GetResult<Prisma.$CricketPlayerPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more CricketPlayers.
     * @param {CricketPlayerDeleteManyArgs} args - Arguments to filter CricketPlayers to delete.
     * @example
     * // Delete a few CricketPlayers
     * const { count } = await prisma.cricketPlayer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CricketPlayerDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CricketPlayerDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CricketPlayers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CricketPlayerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CricketPlayers
     * const cricketPlayer = await prisma.cricketPlayer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CricketPlayerUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CricketPlayerUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CricketPlayer.
     * @param {CricketPlayerUpsertArgs} args - Arguments to update or create a CricketPlayer.
     * @example
     * // Update or create a CricketPlayer
     * const cricketPlayer = await prisma.cricketPlayer.upsert({
     *   create: {
     *     // ... data to create a CricketPlayer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CricketPlayer we want to update
     *   }
     * })
    **/
    upsert<T extends CricketPlayerUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CricketPlayerUpsertArgs<ExtArgs>>
    ): Prisma__CricketPlayerClient<$Result.GetResult<Prisma.$CricketPlayerPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of CricketPlayers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CricketPlayerCountArgs} args - Arguments to filter CricketPlayers to count.
     * @example
     * // Count the number of CricketPlayers
     * const count = await prisma.cricketPlayer.count({
     *   where: {
     *     // ... the filter for the CricketPlayers we want to count
     *   }
     * })
    **/
    count<T extends CricketPlayerCountArgs>(
      args?: Subset<T, CricketPlayerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CricketPlayerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CricketPlayer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CricketPlayerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CricketPlayerAggregateArgs>(args: Subset<T, CricketPlayerAggregateArgs>): Prisma.PrismaPromise<GetCricketPlayerAggregateType<T>>

    /**
     * Group by CricketPlayer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CricketPlayerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CricketPlayerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CricketPlayerGroupByArgs['orderBy'] }
        : { orderBy?: CricketPlayerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CricketPlayerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCricketPlayerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CricketPlayer model
   */
  readonly fields: CricketPlayerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CricketPlayer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CricketPlayerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    matches<T extends CricketPlayer$matchesArgs<ExtArgs> = {}>(args?: Subset<T, CricketPlayer$matchesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CricketMatchPayload<ExtArgs>, T, 'findMany'> | Null>;

    team<T extends CricketPlayer$teamArgs<ExtArgs> = {}>(args?: Subset<T, CricketPlayer$teamArgs<ExtArgs>>): Prisma__CricketTeamClient<$Result.GetResult<Prisma.$CricketTeamPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    user_cricket_players<T extends CricketPlayer$user_cricket_playersArgs<ExtArgs> = {}>(args?: Subset<T, CricketPlayer$user_cricket_playersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findMany'> | Null>;

    team_players<T extends CricketPlayer$team_playersArgs<ExtArgs> = {}>(args?: Subset<T, CricketPlayer$team_playersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CricketTeamPayload<ExtArgs>, T, 'findMany'> | Null>;

    batting_score_player<T extends CricketPlayer$batting_score_playerArgs<ExtArgs> = {}>(args?: Subset<T, CricketPlayer$batting_score_playerArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CricketMatchPlayerBattingScorePayload<ExtArgs>, T, 'findMany'> | Null>;

    bowling_score_player<T extends CricketPlayer$bowling_score_playerArgs<ExtArgs> = {}>(args?: Subset<T, CricketPlayer$bowling_score_playerArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CricketMatchPlayerBowlingScorePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the CricketPlayer model
   */ 
  interface CricketPlayerFieldRefs {
    readonly sis_id: FieldRef<"CricketPlayer", 'String'>
    readonly userId: FieldRef<"CricketPlayer", 'String'>
    readonly teamId: FieldRef<"CricketPlayer", 'String'>
    readonly isSelected: FieldRef<"CricketPlayer", 'Boolean'>
    readonly isCaptain: FieldRef<"CricketPlayer", 'Boolean'>
    readonly isWicketKeeper: FieldRef<"CricketPlayer", 'Boolean'>
    readonly isAllRounder: FieldRef<"CricketPlayer", 'Boolean'>
    readonly isBatsman: FieldRef<"CricketPlayer", 'Boolean'>
    readonly isBowler: FieldRef<"CricketPlayer", 'Boolean'>
    readonly runs: FieldRef<"CricketPlayer", 'Int'>
    readonly noOfMatchesPlayed: FieldRef<"CricketPlayer", 'Int'>
    readonly noOfSixes: FieldRef<"CricketPlayer", 'Int'>
    readonly noOfFours: FieldRef<"CricketPlayer", 'Int'>
    readonly noOfWicketsTaken: FieldRef<"CricketPlayer", 'Int'>
    readonly noOfHalfCenturies: FieldRef<"CricketPlayer", 'Int'>
    readonly noOfCenturies: FieldRef<"CricketPlayer", 'Int'>
    readonly noOfWickets: FieldRef<"CricketPlayer", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * CricketPlayer findUnique
   */
  export type CricketPlayerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketPlayer
     */
    select?: CricketPlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketPlayerInclude<ExtArgs> | null
    /**
     * Filter, which CricketPlayer to fetch.
     */
    where: CricketPlayerWhereUniqueInput
  }


  /**
   * CricketPlayer findUniqueOrThrow
   */
  export type CricketPlayerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketPlayer
     */
    select?: CricketPlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketPlayerInclude<ExtArgs> | null
    /**
     * Filter, which CricketPlayer to fetch.
     */
    where: CricketPlayerWhereUniqueInput
  }


  /**
   * CricketPlayer findFirst
   */
  export type CricketPlayerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketPlayer
     */
    select?: CricketPlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketPlayerInclude<ExtArgs> | null
    /**
     * Filter, which CricketPlayer to fetch.
     */
    where?: CricketPlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CricketPlayers to fetch.
     */
    orderBy?: CricketPlayerOrderByWithRelationInput | CricketPlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CricketPlayers.
     */
    cursor?: CricketPlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CricketPlayers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CricketPlayers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CricketPlayers.
     */
    distinct?: CricketPlayerScalarFieldEnum | CricketPlayerScalarFieldEnum[]
  }


  /**
   * CricketPlayer findFirstOrThrow
   */
  export type CricketPlayerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketPlayer
     */
    select?: CricketPlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketPlayerInclude<ExtArgs> | null
    /**
     * Filter, which CricketPlayer to fetch.
     */
    where?: CricketPlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CricketPlayers to fetch.
     */
    orderBy?: CricketPlayerOrderByWithRelationInput | CricketPlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CricketPlayers.
     */
    cursor?: CricketPlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CricketPlayers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CricketPlayers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CricketPlayers.
     */
    distinct?: CricketPlayerScalarFieldEnum | CricketPlayerScalarFieldEnum[]
  }


  /**
   * CricketPlayer findMany
   */
  export type CricketPlayerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketPlayer
     */
    select?: CricketPlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketPlayerInclude<ExtArgs> | null
    /**
     * Filter, which CricketPlayers to fetch.
     */
    where?: CricketPlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CricketPlayers to fetch.
     */
    orderBy?: CricketPlayerOrderByWithRelationInput | CricketPlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CricketPlayers.
     */
    cursor?: CricketPlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CricketPlayers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CricketPlayers.
     */
    skip?: number
    distinct?: CricketPlayerScalarFieldEnum | CricketPlayerScalarFieldEnum[]
  }


  /**
   * CricketPlayer create
   */
  export type CricketPlayerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketPlayer
     */
    select?: CricketPlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketPlayerInclude<ExtArgs> | null
    /**
     * The data needed to create a CricketPlayer.
     */
    data: XOR<CricketPlayerCreateInput, CricketPlayerUncheckedCreateInput>
  }


  /**
   * CricketPlayer createMany
   */
  export type CricketPlayerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CricketPlayers.
     */
    data: CricketPlayerCreateManyInput | CricketPlayerCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * CricketPlayer update
   */
  export type CricketPlayerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketPlayer
     */
    select?: CricketPlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketPlayerInclude<ExtArgs> | null
    /**
     * The data needed to update a CricketPlayer.
     */
    data: XOR<CricketPlayerUpdateInput, CricketPlayerUncheckedUpdateInput>
    /**
     * Choose, which CricketPlayer to update.
     */
    where: CricketPlayerWhereUniqueInput
  }


  /**
   * CricketPlayer updateMany
   */
  export type CricketPlayerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CricketPlayers.
     */
    data: XOR<CricketPlayerUpdateManyMutationInput, CricketPlayerUncheckedUpdateManyInput>
    /**
     * Filter which CricketPlayers to update
     */
    where?: CricketPlayerWhereInput
  }


  /**
   * CricketPlayer upsert
   */
  export type CricketPlayerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketPlayer
     */
    select?: CricketPlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketPlayerInclude<ExtArgs> | null
    /**
     * The filter to search for the CricketPlayer to update in case it exists.
     */
    where: CricketPlayerWhereUniqueInput
    /**
     * In case the CricketPlayer found by the `where` argument doesn't exist, create a new CricketPlayer with this data.
     */
    create: XOR<CricketPlayerCreateInput, CricketPlayerUncheckedCreateInput>
    /**
     * In case the CricketPlayer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CricketPlayerUpdateInput, CricketPlayerUncheckedUpdateInput>
  }


  /**
   * CricketPlayer delete
   */
  export type CricketPlayerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketPlayer
     */
    select?: CricketPlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketPlayerInclude<ExtArgs> | null
    /**
     * Filter which CricketPlayer to delete.
     */
    where: CricketPlayerWhereUniqueInput
  }


  /**
   * CricketPlayer deleteMany
   */
  export type CricketPlayerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CricketPlayers to delete
     */
    where?: CricketPlayerWhereInput
  }


  /**
   * CricketPlayer.matches
   */
  export type CricketPlayer$matchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketMatch
     */
    select?: CricketMatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketMatchInclude<ExtArgs> | null
    where?: CricketMatchWhereInput
    orderBy?: CricketMatchOrderByWithRelationInput | CricketMatchOrderByWithRelationInput[]
    cursor?: CricketMatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CricketMatchScalarFieldEnum | CricketMatchScalarFieldEnum[]
  }


  /**
   * CricketPlayer.team
   */
  export type CricketPlayer$teamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketTeam
     */
    select?: CricketTeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketTeamInclude<ExtArgs> | null
    where?: CricketTeamWhereInput
  }


  /**
   * CricketPlayer.user_cricket_players
   */
  export type CricketPlayer$user_cricket_playersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    cursor?: UsersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * CricketPlayer.team_players
   */
  export type CricketPlayer$team_playersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketTeam
     */
    select?: CricketTeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketTeamInclude<ExtArgs> | null
    where?: CricketTeamWhereInput
    orderBy?: CricketTeamOrderByWithRelationInput | CricketTeamOrderByWithRelationInput[]
    cursor?: CricketTeamWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CricketTeamScalarFieldEnum | CricketTeamScalarFieldEnum[]
  }


  /**
   * CricketPlayer.batting_score_player
   */
  export type CricketPlayer$batting_score_playerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketMatchPlayerBattingScore
     */
    select?: CricketMatchPlayerBattingScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketMatchPlayerBattingScoreInclude<ExtArgs> | null
    where?: CricketMatchPlayerBattingScoreWhereInput
    orderBy?: CricketMatchPlayerBattingScoreOrderByWithRelationInput | CricketMatchPlayerBattingScoreOrderByWithRelationInput[]
    cursor?: CricketMatchPlayerBattingScoreWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CricketMatchPlayerBattingScoreScalarFieldEnum | CricketMatchPlayerBattingScoreScalarFieldEnum[]
  }


  /**
   * CricketPlayer.bowling_score_player
   */
  export type CricketPlayer$bowling_score_playerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketMatchPlayerBowlingScore
     */
    select?: CricketMatchPlayerBowlingScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketMatchPlayerBowlingScoreInclude<ExtArgs> | null
    where?: CricketMatchPlayerBowlingScoreWhereInput
    orderBy?: CricketMatchPlayerBowlingScoreOrderByWithRelationInput | CricketMatchPlayerBowlingScoreOrderByWithRelationInput[]
    cursor?: CricketMatchPlayerBowlingScoreWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CricketMatchPlayerBowlingScoreScalarFieldEnum | CricketMatchPlayerBowlingScoreScalarFieldEnum[]
  }


  /**
   * CricketPlayer without action
   */
  export type CricketPlayerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketPlayer
     */
    select?: CricketPlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketPlayerInclude<ExtArgs> | null
  }



  /**
   * Model CricketMatch
   */

  export type AggregateCricketMatch = {
    _count: CricketMatchCountAggregateOutputType | null
    _avg: CricketMatchAvgAggregateOutputType | null
    _sum: CricketMatchSumAggregateOutputType | null
    _min: CricketMatchMinAggregateOutputType | null
    _max: CricketMatchMaxAggregateOutputType | null
  }

  export type CricketMatchAvgAggregateOutputType = {
    team1Wickets: number | null
    team2Wickets: number | null
    team1Runs: number | null
    team2Runs: number | null
    team1Balls: number | null
    team2Balls: number | null
    overs: number | null
    powerPlayOvers: number | null
    overPerBowler: number | null
  }

  export type CricketMatchSumAggregateOutputType = {
    team1Wickets: number | null
    team2Wickets: number | null
    team1Runs: number | null
    team2Runs: number | null
    team1Balls: number | null
    team2Balls: number | null
    overs: number | null
    powerPlayOvers: number | null
    overPerBowler: number | null
  }

  export type CricketMatchMinAggregateOutputType = {
    sis_id: string | null
    played: boolean | null
    tossWonBy: string | null
    tossDecision: string | null
    date: Date | null
    venue: string | null
    year: string | null
    dependency: boolean | null
    dependentOn: string | null
    team1Wickets: number | null
    team2Wickets: number | null
    team1Runs: number | null
    team2Runs: number | null
    team1Balls: number | null
    team2Balls: number | null
    overs: number | null
    powerPlayOvers: number | null
    overPerBowler: number | null
    currentOverId: string | null
    wonBy: string | null
    teamAId: string | null
    teamBId: string | null
    teamAScoreId: string | null
    teamBScoreId: string | null
    battingTeamScoreId: string | null
    bowlingTeamScoreId: string | null
  }

  export type CricketMatchMaxAggregateOutputType = {
    sis_id: string | null
    played: boolean | null
    tossWonBy: string | null
    tossDecision: string | null
    date: Date | null
    venue: string | null
    year: string | null
    dependency: boolean | null
    dependentOn: string | null
    team1Wickets: number | null
    team2Wickets: number | null
    team1Runs: number | null
    team2Runs: number | null
    team1Balls: number | null
    team2Balls: number | null
    overs: number | null
    powerPlayOvers: number | null
    overPerBowler: number | null
    currentOverId: string | null
    wonBy: string | null
    teamAId: string | null
    teamBId: string | null
    teamAScoreId: string | null
    teamBScoreId: string | null
    battingTeamScoreId: string | null
    bowlingTeamScoreId: string | null
  }

  export type CricketMatchCountAggregateOutputType = {
    sis_id: number
    played: number
    tossWonBy: number
    tossDecision: number
    date: number
    venue: number
    year: number
    dependency: number
    dependentOn: number
    team1Wickets: number
    team2Wickets: number
    team1Runs: number
    team2Runs: number
    team1Balls: number
    team2Balls: number
    overs: number
    powerPlayOvers: number
    overPerBowler: number
    currentOverId: number
    wonBy: number
    teamAId: number
    teamBId: number
    teamAScoreId: number
    teamBScoreId: number
    battingTeamScoreId: number
    bowlingTeamScoreId: number
    _all: number
  }


  export type CricketMatchAvgAggregateInputType = {
    team1Wickets?: true
    team2Wickets?: true
    team1Runs?: true
    team2Runs?: true
    team1Balls?: true
    team2Balls?: true
    overs?: true
    powerPlayOvers?: true
    overPerBowler?: true
  }

  export type CricketMatchSumAggregateInputType = {
    team1Wickets?: true
    team2Wickets?: true
    team1Runs?: true
    team2Runs?: true
    team1Balls?: true
    team2Balls?: true
    overs?: true
    powerPlayOvers?: true
    overPerBowler?: true
  }

  export type CricketMatchMinAggregateInputType = {
    sis_id?: true
    played?: true
    tossWonBy?: true
    tossDecision?: true
    date?: true
    venue?: true
    year?: true
    dependency?: true
    dependentOn?: true
    team1Wickets?: true
    team2Wickets?: true
    team1Runs?: true
    team2Runs?: true
    team1Balls?: true
    team2Balls?: true
    overs?: true
    powerPlayOvers?: true
    overPerBowler?: true
    currentOverId?: true
    wonBy?: true
    teamAId?: true
    teamBId?: true
    teamAScoreId?: true
    teamBScoreId?: true
    battingTeamScoreId?: true
    bowlingTeamScoreId?: true
  }

  export type CricketMatchMaxAggregateInputType = {
    sis_id?: true
    played?: true
    tossWonBy?: true
    tossDecision?: true
    date?: true
    venue?: true
    year?: true
    dependency?: true
    dependentOn?: true
    team1Wickets?: true
    team2Wickets?: true
    team1Runs?: true
    team2Runs?: true
    team1Balls?: true
    team2Balls?: true
    overs?: true
    powerPlayOvers?: true
    overPerBowler?: true
    currentOverId?: true
    wonBy?: true
    teamAId?: true
    teamBId?: true
    teamAScoreId?: true
    teamBScoreId?: true
    battingTeamScoreId?: true
    bowlingTeamScoreId?: true
  }

  export type CricketMatchCountAggregateInputType = {
    sis_id?: true
    played?: true
    tossWonBy?: true
    tossDecision?: true
    date?: true
    venue?: true
    year?: true
    dependency?: true
    dependentOn?: true
    team1Wickets?: true
    team2Wickets?: true
    team1Runs?: true
    team2Runs?: true
    team1Balls?: true
    team2Balls?: true
    overs?: true
    powerPlayOvers?: true
    overPerBowler?: true
    currentOverId?: true
    wonBy?: true
    teamAId?: true
    teamBId?: true
    teamAScoreId?: true
    teamBScoreId?: true
    battingTeamScoreId?: true
    bowlingTeamScoreId?: true
    _all?: true
  }

  export type CricketMatchAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CricketMatch to aggregate.
     */
    where?: CricketMatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CricketMatches to fetch.
     */
    orderBy?: CricketMatchOrderByWithRelationInput | CricketMatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CricketMatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CricketMatches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CricketMatches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CricketMatches
    **/
    _count?: true | CricketMatchCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CricketMatchAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CricketMatchSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CricketMatchMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CricketMatchMaxAggregateInputType
  }

  export type GetCricketMatchAggregateType<T extends CricketMatchAggregateArgs> = {
        [P in keyof T & keyof AggregateCricketMatch]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCricketMatch[P]>
      : GetScalarType<T[P], AggregateCricketMatch[P]>
  }




  export type CricketMatchGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CricketMatchWhereInput
    orderBy?: CricketMatchOrderByWithAggregationInput | CricketMatchOrderByWithAggregationInput[]
    by: CricketMatchScalarFieldEnum[] | CricketMatchScalarFieldEnum
    having?: CricketMatchScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CricketMatchCountAggregateInputType | true
    _avg?: CricketMatchAvgAggregateInputType
    _sum?: CricketMatchSumAggregateInputType
    _min?: CricketMatchMinAggregateInputType
    _max?: CricketMatchMaxAggregateInputType
  }

  export type CricketMatchGroupByOutputType = {
    sis_id: string
    played: boolean
    tossWonBy: string | null
    tossDecision: string | null
    date: Date
    venue: string | null
    year: string
    dependency: boolean
    dependentOn: string | null
    team1Wickets: number | null
    team2Wickets: number | null
    team1Runs: number | null
    team2Runs: number | null
    team1Balls: number | null
    team2Balls: number | null
    overs: number | null
    powerPlayOvers: number | null
    overPerBowler: number | null
    currentOverId: string | null
    wonBy: string | null
    teamAId: string | null
    teamBId: string | null
    teamAScoreId: string | null
    teamBScoreId: string | null
    battingTeamScoreId: string | null
    bowlingTeamScoreId: string | null
    _count: CricketMatchCountAggregateOutputType | null
    _avg: CricketMatchAvgAggregateOutputType | null
    _sum: CricketMatchSumAggregateOutputType | null
    _min: CricketMatchMinAggregateOutputType | null
    _max: CricketMatchMaxAggregateOutputType | null
  }

  type GetCricketMatchGroupByPayload<T extends CricketMatchGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CricketMatchGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CricketMatchGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CricketMatchGroupByOutputType[P]>
            : GetScalarType<T[P], CricketMatchGroupByOutputType[P]>
        }
      >
    >


  export type CricketMatchSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    sis_id?: boolean
    played?: boolean
    tossWonBy?: boolean
    tossDecision?: boolean
    date?: boolean
    venue?: boolean
    year?: boolean
    dependency?: boolean
    dependentOn?: boolean
    team1Wickets?: boolean
    team2Wickets?: boolean
    team1Runs?: boolean
    team2Runs?: boolean
    team1Balls?: boolean
    team2Balls?: boolean
    overs?: boolean
    powerPlayOvers?: boolean
    overPerBowler?: boolean
    currentOverId?: boolean
    wonBy?: boolean
    teamAId?: boolean
    teamBId?: boolean
    teamAScoreId?: boolean
    teamBScoreId?: boolean
    battingTeamScoreId?: boolean
    bowlingTeamScoreId?: boolean
    tossWonByTeam?: boolean | CricketMatch$tossWonByTeamArgs<ExtArgs>
    currentOver?: boolean | CricketMatch$currentOverArgs<ExtArgs>
    wonByTeam?: boolean | CricketMatch$wonByTeamArgs<ExtArgs>
    teamA?: boolean | CricketMatch$teamAArgs<ExtArgs>
    teamB?: boolean | CricketMatch$teamBArgs<ExtArgs>
    teamAScore?: boolean | CricketMatch$teamAScoreArgs<ExtArgs>
    teamBScore?: boolean | CricketMatch$teamBScoreArgs<ExtArgs>
    battingTeam?: boolean | CricketMatch$battingTeamArgs<ExtArgs>
    bowlingTeam?: boolean | CricketMatch$bowlingTeamArgs<ExtArgs>
    players?: boolean | CricketMatch$playersArgs<ExtArgs>
    over_match?: boolean | CricketMatch$over_matchArgs<ExtArgs>
    team_batting_score?: boolean | CricketMatch$team_batting_scoreArgs<ExtArgs>
    team_bowling_score?: boolean | CricketMatch$team_bowling_scoreArgs<ExtArgs>
    _count?: boolean | CricketMatchCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cricketMatch"]>

  export type CricketMatchSelectScalar = {
    sis_id?: boolean
    played?: boolean
    tossWonBy?: boolean
    tossDecision?: boolean
    date?: boolean
    venue?: boolean
    year?: boolean
    dependency?: boolean
    dependentOn?: boolean
    team1Wickets?: boolean
    team2Wickets?: boolean
    team1Runs?: boolean
    team2Runs?: boolean
    team1Balls?: boolean
    team2Balls?: boolean
    overs?: boolean
    powerPlayOvers?: boolean
    overPerBowler?: boolean
    currentOverId?: boolean
    wonBy?: boolean
    teamAId?: boolean
    teamBId?: boolean
    teamAScoreId?: boolean
    teamBScoreId?: boolean
    battingTeamScoreId?: boolean
    bowlingTeamScoreId?: boolean
  }

  export type CricketMatchInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tossWonByTeam?: boolean | CricketMatch$tossWonByTeamArgs<ExtArgs>
    currentOver?: boolean | CricketMatch$currentOverArgs<ExtArgs>
    wonByTeam?: boolean | CricketMatch$wonByTeamArgs<ExtArgs>
    teamA?: boolean | CricketMatch$teamAArgs<ExtArgs>
    teamB?: boolean | CricketMatch$teamBArgs<ExtArgs>
    teamAScore?: boolean | CricketMatch$teamAScoreArgs<ExtArgs>
    teamBScore?: boolean | CricketMatch$teamBScoreArgs<ExtArgs>
    battingTeam?: boolean | CricketMatch$battingTeamArgs<ExtArgs>
    bowlingTeam?: boolean | CricketMatch$bowlingTeamArgs<ExtArgs>
    players?: boolean | CricketMatch$playersArgs<ExtArgs>
    over_match?: boolean | CricketMatch$over_matchArgs<ExtArgs>
    team_batting_score?: boolean | CricketMatch$team_batting_scoreArgs<ExtArgs>
    team_bowling_score?: boolean | CricketMatch$team_bowling_scoreArgs<ExtArgs>
    _count?: boolean | CricketMatchCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CricketMatchPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CricketMatch"
    objects: {
      tossWonByTeam: Prisma.$CricketTeamPayload<ExtArgs> | null
      currentOver: Prisma.$CricketOverPayload<ExtArgs> | null
      wonByTeam: Prisma.$CricketTeamPayload<ExtArgs> | null
      teamA: Prisma.$CricketTeamPayload<ExtArgs> | null
      teamB: Prisma.$CricketTeamPayload<ExtArgs> | null
      teamAScore: Prisma.$CricketTeamMatchDataPayload<ExtArgs> | null
      teamBScore: Prisma.$CricketTeamMatchDataPayload<ExtArgs> | null
      battingTeam: Prisma.$CricketTeamMatchDataPayload<ExtArgs> | null
      bowlingTeam: Prisma.$CricketTeamMatchDataPayload<ExtArgs> | null
      players: Prisma.$CricketPlayerPayload<ExtArgs>[]
      over_match: Prisma.$CricketOverPayload<ExtArgs>[]
      team_batting_score: Prisma.$CricketMatchPlayerBattingScorePayload<ExtArgs>[]
      team_bowling_score: Prisma.$CricketMatchPlayerBowlingScorePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      sis_id: string
      played: boolean
      tossWonBy: string | null
      tossDecision: string | null
      date: Date
      venue: string | null
      year: string
      dependency: boolean
      dependentOn: string | null
      team1Wickets: number | null
      team2Wickets: number | null
      team1Runs: number | null
      team2Runs: number | null
      team1Balls: number | null
      team2Balls: number | null
      overs: number | null
      powerPlayOvers: number | null
      overPerBowler: number | null
      currentOverId: string | null
      wonBy: string | null
      teamAId: string | null
      teamBId: string | null
      teamAScoreId: string | null
      teamBScoreId: string | null
      battingTeamScoreId: string | null
      bowlingTeamScoreId: string | null
    }, ExtArgs["result"]["cricketMatch"]>
    composites: {}
  }


  type CricketMatchGetPayload<S extends boolean | null | undefined | CricketMatchDefaultArgs> = $Result.GetResult<Prisma.$CricketMatchPayload, S>

  type CricketMatchCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CricketMatchFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CricketMatchCountAggregateInputType | true
    }

  export interface CricketMatchDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CricketMatch'], meta: { name: 'CricketMatch' } }
    /**
     * Find zero or one CricketMatch that matches the filter.
     * @param {CricketMatchFindUniqueArgs} args - Arguments to find a CricketMatch
     * @example
     * // Get one CricketMatch
     * const cricketMatch = await prisma.cricketMatch.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CricketMatchFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CricketMatchFindUniqueArgs<ExtArgs>>
    ): Prisma__CricketMatchClient<$Result.GetResult<Prisma.$CricketMatchPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one CricketMatch that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CricketMatchFindUniqueOrThrowArgs} args - Arguments to find a CricketMatch
     * @example
     * // Get one CricketMatch
     * const cricketMatch = await prisma.cricketMatch.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CricketMatchFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CricketMatchFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CricketMatchClient<$Result.GetResult<Prisma.$CricketMatchPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first CricketMatch that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CricketMatchFindFirstArgs} args - Arguments to find a CricketMatch
     * @example
     * // Get one CricketMatch
     * const cricketMatch = await prisma.cricketMatch.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CricketMatchFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CricketMatchFindFirstArgs<ExtArgs>>
    ): Prisma__CricketMatchClient<$Result.GetResult<Prisma.$CricketMatchPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first CricketMatch that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CricketMatchFindFirstOrThrowArgs} args - Arguments to find a CricketMatch
     * @example
     * // Get one CricketMatch
     * const cricketMatch = await prisma.cricketMatch.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CricketMatchFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CricketMatchFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CricketMatchClient<$Result.GetResult<Prisma.$CricketMatchPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more CricketMatches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CricketMatchFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CricketMatches
     * const cricketMatches = await prisma.cricketMatch.findMany()
     * 
     * // Get first 10 CricketMatches
     * const cricketMatches = await prisma.cricketMatch.findMany({ take: 10 })
     * 
     * // Only select the `sis_id`
     * const cricketMatchWithSis_idOnly = await prisma.cricketMatch.findMany({ select: { sis_id: true } })
     * 
    **/
    findMany<T extends CricketMatchFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CricketMatchFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CricketMatchPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a CricketMatch.
     * @param {CricketMatchCreateArgs} args - Arguments to create a CricketMatch.
     * @example
     * // Create one CricketMatch
     * const CricketMatch = await prisma.cricketMatch.create({
     *   data: {
     *     // ... data to create a CricketMatch
     *   }
     * })
     * 
    **/
    create<T extends CricketMatchCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CricketMatchCreateArgs<ExtArgs>>
    ): Prisma__CricketMatchClient<$Result.GetResult<Prisma.$CricketMatchPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many CricketMatches.
     *     @param {CricketMatchCreateManyArgs} args - Arguments to create many CricketMatches.
     *     @example
     *     // Create many CricketMatches
     *     const cricketMatch = await prisma.cricketMatch.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CricketMatchCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CricketMatchCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CricketMatch.
     * @param {CricketMatchDeleteArgs} args - Arguments to delete one CricketMatch.
     * @example
     * // Delete one CricketMatch
     * const CricketMatch = await prisma.cricketMatch.delete({
     *   where: {
     *     // ... filter to delete one CricketMatch
     *   }
     * })
     * 
    **/
    delete<T extends CricketMatchDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CricketMatchDeleteArgs<ExtArgs>>
    ): Prisma__CricketMatchClient<$Result.GetResult<Prisma.$CricketMatchPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one CricketMatch.
     * @param {CricketMatchUpdateArgs} args - Arguments to update one CricketMatch.
     * @example
     * // Update one CricketMatch
     * const cricketMatch = await prisma.cricketMatch.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CricketMatchUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CricketMatchUpdateArgs<ExtArgs>>
    ): Prisma__CricketMatchClient<$Result.GetResult<Prisma.$CricketMatchPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more CricketMatches.
     * @param {CricketMatchDeleteManyArgs} args - Arguments to filter CricketMatches to delete.
     * @example
     * // Delete a few CricketMatches
     * const { count } = await prisma.cricketMatch.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CricketMatchDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CricketMatchDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CricketMatches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CricketMatchUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CricketMatches
     * const cricketMatch = await prisma.cricketMatch.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CricketMatchUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CricketMatchUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CricketMatch.
     * @param {CricketMatchUpsertArgs} args - Arguments to update or create a CricketMatch.
     * @example
     * // Update or create a CricketMatch
     * const cricketMatch = await prisma.cricketMatch.upsert({
     *   create: {
     *     // ... data to create a CricketMatch
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CricketMatch we want to update
     *   }
     * })
    **/
    upsert<T extends CricketMatchUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CricketMatchUpsertArgs<ExtArgs>>
    ): Prisma__CricketMatchClient<$Result.GetResult<Prisma.$CricketMatchPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of CricketMatches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CricketMatchCountArgs} args - Arguments to filter CricketMatches to count.
     * @example
     * // Count the number of CricketMatches
     * const count = await prisma.cricketMatch.count({
     *   where: {
     *     // ... the filter for the CricketMatches we want to count
     *   }
     * })
    **/
    count<T extends CricketMatchCountArgs>(
      args?: Subset<T, CricketMatchCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CricketMatchCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CricketMatch.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CricketMatchAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CricketMatchAggregateArgs>(args: Subset<T, CricketMatchAggregateArgs>): Prisma.PrismaPromise<GetCricketMatchAggregateType<T>>

    /**
     * Group by CricketMatch.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CricketMatchGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CricketMatchGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CricketMatchGroupByArgs['orderBy'] }
        : { orderBy?: CricketMatchGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CricketMatchGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCricketMatchGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CricketMatch model
   */
  readonly fields: CricketMatchFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CricketMatch.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CricketMatchClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    tossWonByTeam<T extends CricketMatch$tossWonByTeamArgs<ExtArgs> = {}>(args?: Subset<T, CricketMatch$tossWonByTeamArgs<ExtArgs>>): Prisma__CricketTeamClient<$Result.GetResult<Prisma.$CricketTeamPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    currentOver<T extends CricketMatch$currentOverArgs<ExtArgs> = {}>(args?: Subset<T, CricketMatch$currentOverArgs<ExtArgs>>): Prisma__CricketOverClient<$Result.GetResult<Prisma.$CricketOverPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    wonByTeam<T extends CricketMatch$wonByTeamArgs<ExtArgs> = {}>(args?: Subset<T, CricketMatch$wonByTeamArgs<ExtArgs>>): Prisma__CricketTeamClient<$Result.GetResult<Prisma.$CricketTeamPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    teamA<T extends CricketMatch$teamAArgs<ExtArgs> = {}>(args?: Subset<T, CricketMatch$teamAArgs<ExtArgs>>): Prisma__CricketTeamClient<$Result.GetResult<Prisma.$CricketTeamPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    teamB<T extends CricketMatch$teamBArgs<ExtArgs> = {}>(args?: Subset<T, CricketMatch$teamBArgs<ExtArgs>>): Prisma__CricketTeamClient<$Result.GetResult<Prisma.$CricketTeamPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    teamAScore<T extends CricketMatch$teamAScoreArgs<ExtArgs> = {}>(args?: Subset<T, CricketMatch$teamAScoreArgs<ExtArgs>>): Prisma__CricketTeamMatchDataClient<$Result.GetResult<Prisma.$CricketTeamMatchDataPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    teamBScore<T extends CricketMatch$teamBScoreArgs<ExtArgs> = {}>(args?: Subset<T, CricketMatch$teamBScoreArgs<ExtArgs>>): Prisma__CricketTeamMatchDataClient<$Result.GetResult<Prisma.$CricketTeamMatchDataPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    battingTeam<T extends CricketMatch$battingTeamArgs<ExtArgs> = {}>(args?: Subset<T, CricketMatch$battingTeamArgs<ExtArgs>>): Prisma__CricketTeamMatchDataClient<$Result.GetResult<Prisma.$CricketTeamMatchDataPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    bowlingTeam<T extends CricketMatch$bowlingTeamArgs<ExtArgs> = {}>(args?: Subset<T, CricketMatch$bowlingTeamArgs<ExtArgs>>): Prisma__CricketTeamMatchDataClient<$Result.GetResult<Prisma.$CricketTeamMatchDataPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    players<T extends CricketMatch$playersArgs<ExtArgs> = {}>(args?: Subset<T, CricketMatch$playersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CricketPlayerPayload<ExtArgs>, T, 'findMany'> | Null>;

    over_match<T extends CricketMatch$over_matchArgs<ExtArgs> = {}>(args?: Subset<T, CricketMatch$over_matchArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CricketOverPayload<ExtArgs>, T, 'findMany'> | Null>;

    team_batting_score<T extends CricketMatch$team_batting_scoreArgs<ExtArgs> = {}>(args?: Subset<T, CricketMatch$team_batting_scoreArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CricketMatchPlayerBattingScorePayload<ExtArgs>, T, 'findMany'> | Null>;

    team_bowling_score<T extends CricketMatch$team_bowling_scoreArgs<ExtArgs> = {}>(args?: Subset<T, CricketMatch$team_bowling_scoreArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CricketMatchPlayerBowlingScorePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the CricketMatch model
   */ 
  interface CricketMatchFieldRefs {
    readonly sis_id: FieldRef<"CricketMatch", 'String'>
    readonly played: FieldRef<"CricketMatch", 'Boolean'>
    readonly tossWonBy: FieldRef<"CricketMatch", 'String'>
    readonly tossDecision: FieldRef<"CricketMatch", 'String'>
    readonly date: FieldRef<"CricketMatch", 'DateTime'>
    readonly venue: FieldRef<"CricketMatch", 'String'>
    readonly year: FieldRef<"CricketMatch", 'String'>
    readonly dependency: FieldRef<"CricketMatch", 'Boolean'>
    readonly dependentOn: FieldRef<"CricketMatch", 'String'>
    readonly team1Wickets: FieldRef<"CricketMatch", 'Int'>
    readonly team2Wickets: FieldRef<"CricketMatch", 'Int'>
    readonly team1Runs: FieldRef<"CricketMatch", 'Int'>
    readonly team2Runs: FieldRef<"CricketMatch", 'Int'>
    readonly team1Balls: FieldRef<"CricketMatch", 'Int'>
    readonly team2Balls: FieldRef<"CricketMatch", 'Int'>
    readonly overs: FieldRef<"CricketMatch", 'Int'>
    readonly powerPlayOvers: FieldRef<"CricketMatch", 'Int'>
    readonly overPerBowler: FieldRef<"CricketMatch", 'Int'>
    readonly currentOverId: FieldRef<"CricketMatch", 'String'>
    readonly wonBy: FieldRef<"CricketMatch", 'String'>
    readonly teamAId: FieldRef<"CricketMatch", 'String'>
    readonly teamBId: FieldRef<"CricketMatch", 'String'>
    readonly teamAScoreId: FieldRef<"CricketMatch", 'String'>
    readonly teamBScoreId: FieldRef<"CricketMatch", 'String'>
    readonly battingTeamScoreId: FieldRef<"CricketMatch", 'String'>
    readonly bowlingTeamScoreId: FieldRef<"CricketMatch", 'String'>
  }
    

  // Custom InputTypes

  /**
   * CricketMatch findUnique
   */
  export type CricketMatchFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketMatch
     */
    select?: CricketMatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketMatchInclude<ExtArgs> | null
    /**
     * Filter, which CricketMatch to fetch.
     */
    where: CricketMatchWhereUniqueInput
  }


  /**
   * CricketMatch findUniqueOrThrow
   */
  export type CricketMatchFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketMatch
     */
    select?: CricketMatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketMatchInclude<ExtArgs> | null
    /**
     * Filter, which CricketMatch to fetch.
     */
    where: CricketMatchWhereUniqueInput
  }


  /**
   * CricketMatch findFirst
   */
  export type CricketMatchFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketMatch
     */
    select?: CricketMatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketMatchInclude<ExtArgs> | null
    /**
     * Filter, which CricketMatch to fetch.
     */
    where?: CricketMatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CricketMatches to fetch.
     */
    orderBy?: CricketMatchOrderByWithRelationInput | CricketMatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CricketMatches.
     */
    cursor?: CricketMatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CricketMatches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CricketMatches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CricketMatches.
     */
    distinct?: CricketMatchScalarFieldEnum | CricketMatchScalarFieldEnum[]
  }


  /**
   * CricketMatch findFirstOrThrow
   */
  export type CricketMatchFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketMatch
     */
    select?: CricketMatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketMatchInclude<ExtArgs> | null
    /**
     * Filter, which CricketMatch to fetch.
     */
    where?: CricketMatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CricketMatches to fetch.
     */
    orderBy?: CricketMatchOrderByWithRelationInput | CricketMatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CricketMatches.
     */
    cursor?: CricketMatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CricketMatches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CricketMatches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CricketMatches.
     */
    distinct?: CricketMatchScalarFieldEnum | CricketMatchScalarFieldEnum[]
  }


  /**
   * CricketMatch findMany
   */
  export type CricketMatchFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketMatch
     */
    select?: CricketMatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketMatchInclude<ExtArgs> | null
    /**
     * Filter, which CricketMatches to fetch.
     */
    where?: CricketMatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CricketMatches to fetch.
     */
    orderBy?: CricketMatchOrderByWithRelationInput | CricketMatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CricketMatches.
     */
    cursor?: CricketMatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CricketMatches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CricketMatches.
     */
    skip?: number
    distinct?: CricketMatchScalarFieldEnum | CricketMatchScalarFieldEnum[]
  }


  /**
   * CricketMatch create
   */
  export type CricketMatchCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketMatch
     */
    select?: CricketMatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketMatchInclude<ExtArgs> | null
    /**
     * The data needed to create a CricketMatch.
     */
    data: XOR<CricketMatchCreateInput, CricketMatchUncheckedCreateInput>
  }


  /**
   * CricketMatch createMany
   */
  export type CricketMatchCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CricketMatches.
     */
    data: CricketMatchCreateManyInput | CricketMatchCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * CricketMatch update
   */
  export type CricketMatchUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketMatch
     */
    select?: CricketMatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketMatchInclude<ExtArgs> | null
    /**
     * The data needed to update a CricketMatch.
     */
    data: XOR<CricketMatchUpdateInput, CricketMatchUncheckedUpdateInput>
    /**
     * Choose, which CricketMatch to update.
     */
    where: CricketMatchWhereUniqueInput
  }


  /**
   * CricketMatch updateMany
   */
  export type CricketMatchUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CricketMatches.
     */
    data: XOR<CricketMatchUpdateManyMutationInput, CricketMatchUncheckedUpdateManyInput>
    /**
     * Filter which CricketMatches to update
     */
    where?: CricketMatchWhereInput
  }


  /**
   * CricketMatch upsert
   */
  export type CricketMatchUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketMatch
     */
    select?: CricketMatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketMatchInclude<ExtArgs> | null
    /**
     * The filter to search for the CricketMatch to update in case it exists.
     */
    where: CricketMatchWhereUniqueInput
    /**
     * In case the CricketMatch found by the `where` argument doesn't exist, create a new CricketMatch with this data.
     */
    create: XOR<CricketMatchCreateInput, CricketMatchUncheckedCreateInput>
    /**
     * In case the CricketMatch was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CricketMatchUpdateInput, CricketMatchUncheckedUpdateInput>
  }


  /**
   * CricketMatch delete
   */
  export type CricketMatchDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketMatch
     */
    select?: CricketMatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketMatchInclude<ExtArgs> | null
    /**
     * Filter which CricketMatch to delete.
     */
    where: CricketMatchWhereUniqueInput
  }


  /**
   * CricketMatch deleteMany
   */
  export type CricketMatchDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CricketMatches to delete
     */
    where?: CricketMatchWhereInput
  }


  /**
   * CricketMatch.tossWonByTeam
   */
  export type CricketMatch$tossWonByTeamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketTeam
     */
    select?: CricketTeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketTeamInclude<ExtArgs> | null
    where?: CricketTeamWhereInput
  }


  /**
   * CricketMatch.currentOver
   */
  export type CricketMatch$currentOverArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketOver
     */
    select?: CricketOverSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketOverInclude<ExtArgs> | null
    where?: CricketOverWhereInput
  }


  /**
   * CricketMatch.wonByTeam
   */
  export type CricketMatch$wonByTeamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketTeam
     */
    select?: CricketTeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketTeamInclude<ExtArgs> | null
    where?: CricketTeamWhereInput
  }


  /**
   * CricketMatch.teamA
   */
  export type CricketMatch$teamAArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketTeam
     */
    select?: CricketTeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketTeamInclude<ExtArgs> | null
    where?: CricketTeamWhereInput
  }


  /**
   * CricketMatch.teamB
   */
  export type CricketMatch$teamBArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketTeam
     */
    select?: CricketTeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketTeamInclude<ExtArgs> | null
    where?: CricketTeamWhereInput
  }


  /**
   * CricketMatch.teamAScore
   */
  export type CricketMatch$teamAScoreArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketTeamMatchData
     */
    select?: CricketTeamMatchDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketTeamMatchDataInclude<ExtArgs> | null
    where?: CricketTeamMatchDataWhereInput
  }


  /**
   * CricketMatch.teamBScore
   */
  export type CricketMatch$teamBScoreArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketTeamMatchData
     */
    select?: CricketTeamMatchDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketTeamMatchDataInclude<ExtArgs> | null
    where?: CricketTeamMatchDataWhereInput
  }


  /**
   * CricketMatch.battingTeam
   */
  export type CricketMatch$battingTeamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketTeamMatchData
     */
    select?: CricketTeamMatchDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketTeamMatchDataInclude<ExtArgs> | null
    where?: CricketTeamMatchDataWhereInput
  }


  /**
   * CricketMatch.bowlingTeam
   */
  export type CricketMatch$bowlingTeamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketTeamMatchData
     */
    select?: CricketTeamMatchDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketTeamMatchDataInclude<ExtArgs> | null
    where?: CricketTeamMatchDataWhereInput
  }


  /**
   * CricketMatch.players
   */
  export type CricketMatch$playersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketPlayer
     */
    select?: CricketPlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketPlayerInclude<ExtArgs> | null
    where?: CricketPlayerWhereInput
    orderBy?: CricketPlayerOrderByWithRelationInput | CricketPlayerOrderByWithRelationInput[]
    cursor?: CricketPlayerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CricketPlayerScalarFieldEnum | CricketPlayerScalarFieldEnum[]
  }


  /**
   * CricketMatch.over_match
   */
  export type CricketMatch$over_matchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketOver
     */
    select?: CricketOverSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketOverInclude<ExtArgs> | null
    where?: CricketOverWhereInput
    orderBy?: CricketOverOrderByWithRelationInput | CricketOverOrderByWithRelationInput[]
    cursor?: CricketOverWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CricketOverScalarFieldEnum | CricketOverScalarFieldEnum[]
  }


  /**
   * CricketMatch.team_batting_score
   */
  export type CricketMatch$team_batting_scoreArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketMatchPlayerBattingScore
     */
    select?: CricketMatchPlayerBattingScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketMatchPlayerBattingScoreInclude<ExtArgs> | null
    where?: CricketMatchPlayerBattingScoreWhereInput
    orderBy?: CricketMatchPlayerBattingScoreOrderByWithRelationInput | CricketMatchPlayerBattingScoreOrderByWithRelationInput[]
    cursor?: CricketMatchPlayerBattingScoreWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CricketMatchPlayerBattingScoreScalarFieldEnum | CricketMatchPlayerBattingScoreScalarFieldEnum[]
  }


  /**
   * CricketMatch.team_bowling_score
   */
  export type CricketMatch$team_bowling_scoreArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketMatchPlayerBowlingScore
     */
    select?: CricketMatchPlayerBowlingScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketMatchPlayerBowlingScoreInclude<ExtArgs> | null
    where?: CricketMatchPlayerBowlingScoreWhereInput
    orderBy?: CricketMatchPlayerBowlingScoreOrderByWithRelationInput | CricketMatchPlayerBowlingScoreOrderByWithRelationInput[]
    cursor?: CricketMatchPlayerBowlingScoreWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CricketMatchPlayerBowlingScoreScalarFieldEnum | CricketMatchPlayerBowlingScoreScalarFieldEnum[]
  }


  /**
   * CricketMatch without action
   */
  export type CricketMatchDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketMatch
     */
    select?: CricketMatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketMatchInclude<ExtArgs> | null
  }



  /**
   * Model CricketTeamMatchData
   */

  export type AggregateCricketTeamMatchData = {
    _count: CricketTeamMatchDataCountAggregateOutputType | null
    _avg: CricketTeamMatchDataAvgAggregateOutputType | null
    _sum: CricketTeamMatchDataSumAggregateOutputType | null
    _min: CricketTeamMatchDataMinAggregateOutputType | null
    _max: CricketTeamMatchDataMaxAggregateOutputType | null
  }

  export type CricketTeamMatchDataAvgAggregateOutputType = {
    runs: number | null
    wideRuns: number | null
    nbRuns: number | null
    byeRuns: number | null
    lbRuns: number | null
    wickets: number | null
    balls: number | null
  }

  export type CricketTeamMatchDataSumAggregateOutputType = {
    runs: number | null
    wideRuns: number | null
    nbRuns: number | null
    byeRuns: number | null
    lbRuns: number | null
    wickets: number | null
    balls: number | null
  }

  export type CricketTeamMatchDataMinAggregateOutputType = {
    sis_id: string | null
    teamId: string | null
    matchId: string | null
    name: string | null
    runs: number | null
    wideRuns: number | null
    nbRuns: number | null
    byeRuns: number | null
    lbRuns: number | null
    wickets: number | null
    balls: number | null
  }

  export type CricketTeamMatchDataMaxAggregateOutputType = {
    sis_id: string | null
    teamId: string | null
    matchId: string | null
    name: string | null
    runs: number | null
    wideRuns: number | null
    nbRuns: number | null
    byeRuns: number | null
    lbRuns: number | null
    wickets: number | null
    balls: number | null
  }

  export type CricketTeamMatchDataCountAggregateOutputType = {
    sis_id: number
    teamId: number
    matchId: number
    name: number
    runs: number
    wideRuns: number
    nbRuns: number
    byeRuns: number
    lbRuns: number
    wickets: number
    balls: number
    _all: number
  }


  export type CricketTeamMatchDataAvgAggregateInputType = {
    runs?: true
    wideRuns?: true
    nbRuns?: true
    byeRuns?: true
    lbRuns?: true
    wickets?: true
    balls?: true
  }

  export type CricketTeamMatchDataSumAggregateInputType = {
    runs?: true
    wideRuns?: true
    nbRuns?: true
    byeRuns?: true
    lbRuns?: true
    wickets?: true
    balls?: true
  }

  export type CricketTeamMatchDataMinAggregateInputType = {
    sis_id?: true
    teamId?: true
    matchId?: true
    name?: true
    runs?: true
    wideRuns?: true
    nbRuns?: true
    byeRuns?: true
    lbRuns?: true
    wickets?: true
    balls?: true
  }

  export type CricketTeamMatchDataMaxAggregateInputType = {
    sis_id?: true
    teamId?: true
    matchId?: true
    name?: true
    runs?: true
    wideRuns?: true
    nbRuns?: true
    byeRuns?: true
    lbRuns?: true
    wickets?: true
    balls?: true
  }

  export type CricketTeamMatchDataCountAggregateInputType = {
    sis_id?: true
    teamId?: true
    matchId?: true
    name?: true
    runs?: true
    wideRuns?: true
    nbRuns?: true
    byeRuns?: true
    lbRuns?: true
    wickets?: true
    balls?: true
    _all?: true
  }

  export type CricketTeamMatchDataAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CricketTeamMatchData to aggregate.
     */
    where?: CricketTeamMatchDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CricketTeamMatchData to fetch.
     */
    orderBy?: CricketTeamMatchDataOrderByWithRelationInput | CricketTeamMatchDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CricketTeamMatchDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CricketTeamMatchData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CricketTeamMatchData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CricketTeamMatchData
    **/
    _count?: true | CricketTeamMatchDataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CricketTeamMatchDataAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CricketTeamMatchDataSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CricketTeamMatchDataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CricketTeamMatchDataMaxAggregateInputType
  }

  export type GetCricketTeamMatchDataAggregateType<T extends CricketTeamMatchDataAggregateArgs> = {
        [P in keyof T & keyof AggregateCricketTeamMatchData]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCricketTeamMatchData[P]>
      : GetScalarType<T[P], AggregateCricketTeamMatchData[P]>
  }




  export type CricketTeamMatchDataGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CricketTeamMatchDataWhereInput
    orderBy?: CricketTeamMatchDataOrderByWithAggregationInput | CricketTeamMatchDataOrderByWithAggregationInput[]
    by: CricketTeamMatchDataScalarFieldEnum[] | CricketTeamMatchDataScalarFieldEnum
    having?: CricketTeamMatchDataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CricketTeamMatchDataCountAggregateInputType | true
    _avg?: CricketTeamMatchDataAvgAggregateInputType
    _sum?: CricketTeamMatchDataSumAggregateInputType
    _min?: CricketTeamMatchDataMinAggregateInputType
    _max?: CricketTeamMatchDataMaxAggregateInputType
  }

  export type CricketTeamMatchDataGroupByOutputType = {
    sis_id: string
    teamId: string | null
    matchId: string | null
    name: string | null
    runs: number
    wideRuns: number
    nbRuns: number
    byeRuns: number
    lbRuns: number
    wickets: number
    balls: number
    _count: CricketTeamMatchDataCountAggregateOutputType | null
    _avg: CricketTeamMatchDataAvgAggregateOutputType | null
    _sum: CricketTeamMatchDataSumAggregateOutputType | null
    _min: CricketTeamMatchDataMinAggregateOutputType | null
    _max: CricketTeamMatchDataMaxAggregateOutputType | null
  }

  type GetCricketTeamMatchDataGroupByPayload<T extends CricketTeamMatchDataGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CricketTeamMatchDataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CricketTeamMatchDataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CricketTeamMatchDataGroupByOutputType[P]>
            : GetScalarType<T[P], CricketTeamMatchDataGroupByOutputType[P]>
        }
      >
    >


  export type CricketTeamMatchDataSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    sis_id?: boolean
    teamId?: boolean
    matchId?: boolean
    name?: boolean
    runs?: boolean
    wideRuns?: boolean
    nbRuns?: boolean
    byeRuns?: boolean
    lbRuns?: boolean
    wickets?: boolean
    balls?: boolean
    batters?: boolean | CricketTeamMatchData$battersArgs<ExtArgs>
    bowlers?: boolean | CricketTeamMatchData$bowlersArgs<ExtArgs>
    team?: boolean | CricketTeamMatchData$teamArgs<ExtArgs>
    cricketMatchTeamA?: boolean | CricketTeamMatchData$cricketMatchTeamAArgs<ExtArgs>
    cricketMatchTeamB?: boolean | CricketTeamMatchData$cricketMatchTeamBArgs<ExtArgs>
    matchBttingTeam?: boolean | CricketTeamMatchData$matchBttingTeamArgs<ExtArgs>
    matchBowlingTeam?: boolean | CricketTeamMatchData$matchBowlingTeamArgs<ExtArgs>
    _count?: boolean | CricketTeamMatchDataCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cricketTeamMatchData"]>

  export type CricketTeamMatchDataSelectScalar = {
    sis_id?: boolean
    teamId?: boolean
    matchId?: boolean
    name?: boolean
    runs?: boolean
    wideRuns?: boolean
    nbRuns?: boolean
    byeRuns?: boolean
    lbRuns?: boolean
    wickets?: boolean
    balls?: boolean
  }

  export type CricketTeamMatchDataInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    batters?: boolean | CricketTeamMatchData$battersArgs<ExtArgs>
    bowlers?: boolean | CricketTeamMatchData$bowlersArgs<ExtArgs>
    team?: boolean | CricketTeamMatchData$teamArgs<ExtArgs>
    cricketMatchTeamA?: boolean | CricketTeamMatchData$cricketMatchTeamAArgs<ExtArgs>
    cricketMatchTeamB?: boolean | CricketTeamMatchData$cricketMatchTeamBArgs<ExtArgs>
    matchBttingTeam?: boolean | CricketTeamMatchData$matchBttingTeamArgs<ExtArgs>
    matchBowlingTeam?: boolean | CricketTeamMatchData$matchBowlingTeamArgs<ExtArgs>
    _count?: boolean | CricketTeamMatchDataCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CricketTeamMatchDataPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CricketTeamMatchData"
    objects: {
      batters: Prisma.$CricketMatchPlayerBattingScorePayload<ExtArgs>[]
      bowlers: Prisma.$CricketMatchPlayerBowlingScorePayload<ExtArgs>[]
      team: Prisma.$CricketTeamPayload<ExtArgs> | null
      cricketMatchTeamA: Prisma.$CricketMatchPayload<ExtArgs>[]
      cricketMatchTeamB: Prisma.$CricketMatchPayload<ExtArgs>[]
      matchBttingTeam: Prisma.$CricketMatchPayload<ExtArgs>[]
      matchBowlingTeam: Prisma.$CricketMatchPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      sis_id: string
      teamId: string | null
      matchId: string | null
      name: string | null
      runs: number
      wideRuns: number
      nbRuns: number
      byeRuns: number
      lbRuns: number
      wickets: number
      balls: number
    }, ExtArgs["result"]["cricketTeamMatchData"]>
    composites: {}
  }


  type CricketTeamMatchDataGetPayload<S extends boolean | null | undefined | CricketTeamMatchDataDefaultArgs> = $Result.GetResult<Prisma.$CricketTeamMatchDataPayload, S>

  type CricketTeamMatchDataCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CricketTeamMatchDataFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CricketTeamMatchDataCountAggregateInputType | true
    }

  export interface CricketTeamMatchDataDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CricketTeamMatchData'], meta: { name: 'CricketTeamMatchData' } }
    /**
     * Find zero or one CricketTeamMatchData that matches the filter.
     * @param {CricketTeamMatchDataFindUniqueArgs} args - Arguments to find a CricketTeamMatchData
     * @example
     * // Get one CricketTeamMatchData
     * const cricketTeamMatchData = await prisma.cricketTeamMatchData.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CricketTeamMatchDataFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CricketTeamMatchDataFindUniqueArgs<ExtArgs>>
    ): Prisma__CricketTeamMatchDataClient<$Result.GetResult<Prisma.$CricketTeamMatchDataPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one CricketTeamMatchData that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CricketTeamMatchDataFindUniqueOrThrowArgs} args - Arguments to find a CricketTeamMatchData
     * @example
     * // Get one CricketTeamMatchData
     * const cricketTeamMatchData = await prisma.cricketTeamMatchData.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CricketTeamMatchDataFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CricketTeamMatchDataFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CricketTeamMatchDataClient<$Result.GetResult<Prisma.$CricketTeamMatchDataPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first CricketTeamMatchData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CricketTeamMatchDataFindFirstArgs} args - Arguments to find a CricketTeamMatchData
     * @example
     * // Get one CricketTeamMatchData
     * const cricketTeamMatchData = await prisma.cricketTeamMatchData.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CricketTeamMatchDataFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CricketTeamMatchDataFindFirstArgs<ExtArgs>>
    ): Prisma__CricketTeamMatchDataClient<$Result.GetResult<Prisma.$CricketTeamMatchDataPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first CricketTeamMatchData that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CricketTeamMatchDataFindFirstOrThrowArgs} args - Arguments to find a CricketTeamMatchData
     * @example
     * // Get one CricketTeamMatchData
     * const cricketTeamMatchData = await prisma.cricketTeamMatchData.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CricketTeamMatchDataFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CricketTeamMatchDataFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CricketTeamMatchDataClient<$Result.GetResult<Prisma.$CricketTeamMatchDataPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more CricketTeamMatchData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CricketTeamMatchDataFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CricketTeamMatchData
     * const cricketTeamMatchData = await prisma.cricketTeamMatchData.findMany()
     * 
     * // Get first 10 CricketTeamMatchData
     * const cricketTeamMatchData = await prisma.cricketTeamMatchData.findMany({ take: 10 })
     * 
     * // Only select the `sis_id`
     * const cricketTeamMatchDataWithSis_idOnly = await prisma.cricketTeamMatchData.findMany({ select: { sis_id: true } })
     * 
    **/
    findMany<T extends CricketTeamMatchDataFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CricketTeamMatchDataFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CricketTeamMatchDataPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a CricketTeamMatchData.
     * @param {CricketTeamMatchDataCreateArgs} args - Arguments to create a CricketTeamMatchData.
     * @example
     * // Create one CricketTeamMatchData
     * const CricketTeamMatchData = await prisma.cricketTeamMatchData.create({
     *   data: {
     *     // ... data to create a CricketTeamMatchData
     *   }
     * })
     * 
    **/
    create<T extends CricketTeamMatchDataCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CricketTeamMatchDataCreateArgs<ExtArgs>>
    ): Prisma__CricketTeamMatchDataClient<$Result.GetResult<Prisma.$CricketTeamMatchDataPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many CricketTeamMatchData.
     *     @param {CricketTeamMatchDataCreateManyArgs} args - Arguments to create many CricketTeamMatchData.
     *     @example
     *     // Create many CricketTeamMatchData
     *     const cricketTeamMatchData = await prisma.cricketTeamMatchData.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CricketTeamMatchDataCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CricketTeamMatchDataCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CricketTeamMatchData.
     * @param {CricketTeamMatchDataDeleteArgs} args - Arguments to delete one CricketTeamMatchData.
     * @example
     * // Delete one CricketTeamMatchData
     * const CricketTeamMatchData = await prisma.cricketTeamMatchData.delete({
     *   where: {
     *     // ... filter to delete one CricketTeamMatchData
     *   }
     * })
     * 
    **/
    delete<T extends CricketTeamMatchDataDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CricketTeamMatchDataDeleteArgs<ExtArgs>>
    ): Prisma__CricketTeamMatchDataClient<$Result.GetResult<Prisma.$CricketTeamMatchDataPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one CricketTeamMatchData.
     * @param {CricketTeamMatchDataUpdateArgs} args - Arguments to update one CricketTeamMatchData.
     * @example
     * // Update one CricketTeamMatchData
     * const cricketTeamMatchData = await prisma.cricketTeamMatchData.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CricketTeamMatchDataUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CricketTeamMatchDataUpdateArgs<ExtArgs>>
    ): Prisma__CricketTeamMatchDataClient<$Result.GetResult<Prisma.$CricketTeamMatchDataPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more CricketTeamMatchData.
     * @param {CricketTeamMatchDataDeleteManyArgs} args - Arguments to filter CricketTeamMatchData to delete.
     * @example
     * // Delete a few CricketTeamMatchData
     * const { count } = await prisma.cricketTeamMatchData.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CricketTeamMatchDataDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CricketTeamMatchDataDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CricketTeamMatchData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CricketTeamMatchDataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CricketTeamMatchData
     * const cricketTeamMatchData = await prisma.cricketTeamMatchData.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CricketTeamMatchDataUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CricketTeamMatchDataUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CricketTeamMatchData.
     * @param {CricketTeamMatchDataUpsertArgs} args - Arguments to update or create a CricketTeamMatchData.
     * @example
     * // Update or create a CricketTeamMatchData
     * const cricketTeamMatchData = await prisma.cricketTeamMatchData.upsert({
     *   create: {
     *     // ... data to create a CricketTeamMatchData
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CricketTeamMatchData we want to update
     *   }
     * })
    **/
    upsert<T extends CricketTeamMatchDataUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CricketTeamMatchDataUpsertArgs<ExtArgs>>
    ): Prisma__CricketTeamMatchDataClient<$Result.GetResult<Prisma.$CricketTeamMatchDataPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of CricketTeamMatchData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CricketTeamMatchDataCountArgs} args - Arguments to filter CricketTeamMatchData to count.
     * @example
     * // Count the number of CricketTeamMatchData
     * const count = await prisma.cricketTeamMatchData.count({
     *   where: {
     *     // ... the filter for the CricketTeamMatchData we want to count
     *   }
     * })
    **/
    count<T extends CricketTeamMatchDataCountArgs>(
      args?: Subset<T, CricketTeamMatchDataCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CricketTeamMatchDataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CricketTeamMatchData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CricketTeamMatchDataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CricketTeamMatchDataAggregateArgs>(args: Subset<T, CricketTeamMatchDataAggregateArgs>): Prisma.PrismaPromise<GetCricketTeamMatchDataAggregateType<T>>

    /**
     * Group by CricketTeamMatchData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CricketTeamMatchDataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CricketTeamMatchDataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CricketTeamMatchDataGroupByArgs['orderBy'] }
        : { orderBy?: CricketTeamMatchDataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CricketTeamMatchDataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCricketTeamMatchDataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CricketTeamMatchData model
   */
  readonly fields: CricketTeamMatchDataFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CricketTeamMatchData.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CricketTeamMatchDataClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    batters<T extends CricketTeamMatchData$battersArgs<ExtArgs> = {}>(args?: Subset<T, CricketTeamMatchData$battersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CricketMatchPlayerBattingScorePayload<ExtArgs>, T, 'findMany'> | Null>;

    bowlers<T extends CricketTeamMatchData$bowlersArgs<ExtArgs> = {}>(args?: Subset<T, CricketTeamMatchData$bowlersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CricketMatchPlayerBowlingScorePayload<ExtArgs>, T, 'findMany'> | Null>;

    team<T extends CricketTeamMatchData$teamArgs<ExtArgs> = {}>(args?: Subset<T, CricketTeamMatchData$teamArgs<ExtArgs>>): Prisma__CricketTeamClient<$Result.GetResult<Prisma.$CricketTeamPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    cricketMatchTeamA<T extends CricketTeamMatchData$cricketMatchTeamAArgs<ExtArgs> = {}>(args?: Subset<T, CricketTeamMatchData$cricketMatchTeamAArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CricketMatchPayload<ExtArgs>, T, 'findMany'> | Null>;

    cricketMatchTeamB<T extends CricketTeamMatchData$cricketMatchTeamBArgs<ExtArgs> = {}>(args?: Subset<T, CricketTeamMatchData$cricketMatchTeamBArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CricketMatchPayload<ExtArgs>, T, 'findMany'> | Null>;

    matchBttingTeam<T extends CricketTeamMatchData$matchBttingTeamArgs<ExtArgs> = {}>(args?: Subset<T, CricketTeamMatchData$matchBttingTeamArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CricketMatchPayload<ExtArgs>, T, 'findMany'> | Null>;

    matchBowlingTeam<T extends CricketTeamMatchData$matchBowlingTeamArgs<ExtArgs> = {}>(args?: Subset<T, CricketTeamMatchData$matchBowlingTeamArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CricketMatchPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the CricketTeamMatchData model
   */ 
  interface CricketTeamMatchDataFieldRefs {
    readonly sis_id: FieldRef<"CricketTeamMatchData", 'String'>
    readonly teamId: FieldRef<"CricketTeamMatchData", 'String'>
    readonly matchId: FieldRef<"CricketTeamMatchData", 'String'>
    readonly name: FieldRef<"CricketTeamMatchData", 'String'>
    readonly runs: FieldRef<"CricketTeamMatchData", 'Int'>
    readonly wideRuns: FieldRef<"CricketTeamMatchData", 'Int'>
    readonly nbRuns: FieldRef<"CricketTeamMatchData", 'Int'>
    readonly byeRuns: FieldRef<"CricketTeamMatchData", 'Int'>
    readonly lbRuns: FieldRef<"CricketTeamMatchData", 'Int'>
    readonly wickets: FieldRef<"CricketTeamMatchData", 'Int'>
    readonly balls: FieldRef<"CricketTeamMatchData", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * CricketTeamMatchData findUnique
   */
  export type CricketTeamMatchDataFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketTeamMatchData
     */
    select?: CricketTeamMatchDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketTeamMatchDataInclude<ExtArgs> | null
    /**
     * Filter, which CricketTeamMatchData to fetch.
     */
    where: CricketTeamMatchDataWhereUniqueInput
  }


  /**
   * CricketTeamMatchData findUniqueOrThrow
   */
  export type CricketTeamMatchDataFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketTeamMatchData
     */
    select?: CricketTeamMatchDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketTeamMatchDataInclude<ExtArgs> | null
    /**
     * Filter, which CricketTeamMatchData to fetch.
     */
    where: CricketTeamMatchDataWhereUniqueInput
  }


  /**
   * CricketTeamMatchData findFirst
   */
  export type CricketTeamMatchDataFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketTeamMatchData
     */
    select?: CricketTeamMatchDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketTeamMatchDataInclude<ExtArgs> | null
    /**
     * Filter, which CricketTeamMatchData to fetch.
     */
    where?: CricketTeamMatchDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CricketTeamMatchData to fetch.
     */
    orderBy?: CricketTeamMatchDataOrderByWithRelationInput | CricketTeamMatchDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CricketTeamMatchData.
     */
    cursor?: CricketTeamMatchDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CricketTeamMatchData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CricketTeamMatchData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CricketTeamMatchData.
     */
    distinct?: CricketTeamMatchDataScalarFieldEnum | CricketTeamMatchDataScalarFieldEnum[]
  }


  /**
   * CricketTeamMatchData findFirstOrThrow
   */
  export type CricketTeamMatchDataFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketTeamMatchData
     */
    select?: CricketTeamMatchDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketTeamMatchDataInclude<ExtArgs> | null
    /**
     * Filter, which CricketTeamMatchData to fetch.
     */
    where?: CricketTeamMatchDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CricketTeamMatchData to fetch.
     */
    orderBy?: CricketTeamMatchDataOrderByWithRelationInput | CricketTeamMatchDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CricketTeamMatchData.
     */
    cursor?: CricketTeamMatchDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CricketTeamMatchData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CricketTeamMatchData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CricketTeamMatchData.
     */
    distinct?: CricketTeamMatchDataScalarFieldEnum | CricketTeamMatchDataScalarFieldEnum[]
  }


  /**
   * CricketTeamMatchData findMany
   */
  export type CricketTeamMatchDataFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketTeamMatchData
     */
    select?: CricketTeamMatchDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketTeamMatchDataInclude<ExtArgs> | null
    /**
     * Filter, which CricketTeamMatchData to fetch.
     */
    where?: CricketTeamMatchDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CricketTeamMatchData to fetch.
     */
    orderBy?: CricketTeamMatchDataOrderByWithRelationInput | CricketTeamMatchDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CricketTeamMatchData.
     */
    cursor?: CricketTeamMatchDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CricketTeamMatchData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CricketTeamMatchData.
     */
    skip?: number
    distinct?: CricketTeamMatchDataScalarFieldEnum | CricketTeamMatchDataScalarFieldEnum[]
  }


  /**
   * CricketTeamMatchData create
   */
  export type CricketTeamMatchDataCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketTeamMatchData
     */
    select?: CricketTeamMatchDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketTeamMatchDataInclude<ExtArgs> | null
    /**
     * The data needed to create a CricketTeamMatchData.
     */
    data?: XOR<CricketTeamMatchDataCreateInput, CricketTeamMatchDataUncheckedCreateInput>
  }


  /**
   * CricketTeamMatchData createMany
   */
  export type CricketTeamMatchDataCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CricketTeamMatchData.
     */
    data: CricketTeamMatchDataCreateManyInput | CricketTeamMatchDataCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * CricketTeamMatchData update
   */
  export type CricketTeamMatchDataUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketTeamMatchData
     */
    select?: CricketTeamMatchDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketTeamMatchDataInclude<ExtArgs> | null
    /**
     * The data needed to update a CricketTeamMatchData.
     */
    data: XOR<CricketTeamMatchDataUpdateInput, CricketTeamMatchDataUncheckedUpdateInput>
    /**
     * Choose, which CricketTeamMatchData to update.
     */
    where: CricketTeamMatchDataWhereUniqueInput
  }


  /**
   * CricketTeamMatchData updateMany
   */
  export type CricketTeamMatchDataUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CricketTeamMatchData.
     */
    data: XOR<CricketTeamMatchDataUpdateManyMutationInput, CricketTeamMatchDataUncheckedUpdateManyInput>
    /**
     * Filter which CricketTeamMatchData to update
     */
    where?: CricketTeamMatchDataWhereInput
  }


  /**
   * CricketTeamMatchData upsert
   */
  export type CricketTeamMatchDataUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketTeamMatchData
     */
    select?: CricketTeamMatchDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketTeamMatchDataInclude<ExtArgs> | null
    /**
     * The filter to search for the CricketTeamMatchData to update in case it exists.
     */
    where: CricketTeamMatchDataWhereUniqueInput
    /**
     * In case the CricketTeamMatchData found by the `where` argument doesn't exist, create a new CricketTeamMatchData with this data.
     */
    create: XOR<CricketTeamMatchDataCreateInput, CricketTeamMatchDataUncheckedCreateInput>
    /**
     * In case the CricketTeamMatchData was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CricketTeamMatchDataUpdateInput, CricketTeamMatchDataUncheckedUpdateInput>
  }


  /**
   * CricketTeamMatchData delete
   */
  export type CricketTeamMatchDataDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketTeamMatchData
     */
    select?: CricketTeamMatchDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketTeamMatchDataInclude<ExtArgs> | null
    /**
     * Filter which CricketTeamMatchData to delete.
     */
    where: CricketTeamMatchDataWhereUniqueInput
  }


  /**
   * CricketTeamMatchData deleteMany
   */
  export type CricketTeamMatchDataDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CricketTeamMatchData to delete
     */
    where?: CricketTeamMatchDataWhereInput
  }


  /**
   * CricketTeamMatchData.batters
   */
  export type CricketTeamMatchData$battersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketMatchPlayerBattingScore
     */
    select?: CricketMatchPlayerBattingScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketMatchPlayerBattingScoreInclude<ExtArgs> | null
    where?: CricketMatchPlayerBattingScoreWhereInput
    orderBy?: CricketMatchPlayerBattingScoreOrderByWithRelationInput | CricketMatchPlayerBattingScoreOrderByWithRelationInput[]
    cursor?: CricketMatchPlayerBattingScoreWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CricketMatchPlayerBattingScoreScalarFieldEnum | CricketMatchPlayerBattingScoreScalarFieldEnum[]
  }


  /**
   * CricketTeamMatchData.bowlers
   */
  export type CricketTeamMatchData$bowlersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketMatchPlayerBowlingScore
     */
    select?: CricketMatchPlayerBowlingScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketMatchPlayerBowlingScoreInclude<ExtArgs> | null
    where?: CricketMatchPlayerBowlingScoreWhereInput
    orderBy?: CricketMatchPlayerBowlingScoreOrderByWithRelationInput | CricketMatchPlayerBowlingScoreOrderByWithRelationInput[]
    cursor?: CricketMatchPlayerBowlingScoreWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CricketMatchPlayerBowlingScoreScalarFieldEnum | CricketMatchPlayerBowlingScoreScalarFieldEnum[]
  }


  /**
   * CricketTeamMatchData.team
   */
  export type CricketTeamMatchData$teamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketTeam
     */
    select?: CricketTeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketTeamInclude<ExtArgs> | null
    where?: CricketTeamWhereInput
  }


  /**
   * CricketTeamMatchData.cricketMatchTeamA
   */
  export type CricketTeamMatchData$cricketMatchTeamAArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketMatch
     */
    select?: CricketMatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketMatchInclude<ExtArgs> | null
    where?: CricketMatchWhereInput
    orderBy?: CricketMatchOrderByWithRelationInput | CricketMatchOrderByWithRelationInput[]
    cursor?: CricketMatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CricketMatchScalarFieldEnum | CricketMatchScalarFieldEnum[]
  }


  /**
   * CricketTeamMatchData.cricketMatchTeamB
   */
  export type CricketTeamMatchData$cricketMatchTeamBArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketMatch
     */
    select?: CricketMatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketMatchInclude<ExtArgs> | null
    where?: CricketMatchWhereInput
    orderBy?: CricketMatchOrderByWithRelationInput | CricketMatchOrderByWithRelationInput[]
    cursor?: CricketMatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CricketMatchScalarFieldEnum | CricketMatchScalarFieldEnum[]
  }


  /**
   * CricketTeamMatchData.matchBttingTeam
   */
  export type CricketTeamMatchData$matchBttingTeamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketMatch
     */
    select?: CricketMatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketMatchInclude<ExtArgs> | null
    where?: CricketMatchWhereInput
    orderBy?: CricketMatchOrderByWithRelationInput | CricketMatchOrderByWithRelationInput[]
    cursor?: CricketMatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CricketMatchScalarFieldEnum | CricketMatchScalarFieldEnum[]
  }


  /**
   * CricketTeamMatchData.matchBowlingTeam
   */
  export type CricketTeamMatchData$matchBowlingTeamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketMatch
     */
    select?: CricketMatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketMatchInclude<ExtArgs> | null
    where?: CricketMatchWhereInput
    orderBy?: CricketMatchOrderByWithRelationInput | CricketMatchOrderByWithRelationInput[]
    cursor?: CricketMatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CricketMatchScalarFieldEnum | CricketMatchScalarFieldEnum[]
  }


  /**
   * CricketTeamMatchData without action
   */
  export type CricketTeamMatchDataDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketTeamMatchData
     */
    select?: CricketTeamMatchDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketTeamMatchDataInclude<ExtArgs> | null
  }



  /**
   * Model CricketOver
   */

  export type AggregateCricketOver = {
    _count: CricketOverCountAggregateOutputType | null
    _avg: CricketOverAvgAggregateOutputType | null
    _sum: CricketOverSumAggregateOutputType | null
    _min: CricketOverMinAggregateOutputType | null
    _max: CricketOverMaxAggregateOutputType | null
  }

  export type CricketOverAvgAggregateOutputType = {
    runs: number | null
    wickets: number | null
    totalBalls: number | null
    validBalls: number | null
  }

  export type CricketOverSumAggregateOutputType = {
    runs: number | null
    wickets: number | null
    totalBalls: number | null
    validBalls: number | null
  }

  export type CricketOverMinAggregateOutputType = {
    sis_id: string | null
    matchId: string | null
    runs: number | null
    wickets: number | null
    totalBalls: number | null
    validBalls: number | null
    strikerScoreId: string | null
    nonStrikerScoreId: string | null
    bowlerScoreId: string | null
  }

  export type CricketOverMaxAggregateOutputType = {
    sis_id: string | null
    matchId: string | null
    runs: number | null
    wickets: number | null
    totalBalls: number | null
    validBalls: number | null
    strikerScoreId: string | null
    nonStrikerScoreId: string | null
    bowlerScoreId: string | null
  }

  export type CricketOverCountAggregateOutputType = {
    sis_id: number
    matchId: number
    runs: number
    wickets: number
    totalBalls: number
    validBalls: number
    strikerScoreId: number
    nonStrikerScoreId: number
    bowlerScoreId: number
    _all: number
  }


  export type CricketOverAvgAggregateInputType = {
    runs?: true
    wickets?: true
    totalBalls?: true
    validBalls?: true
  }

  export type CricketOverSumAggregateInputType = {
    runs?: true
    wickets?: true
    totalBalls?: true
    validBalls?: true
  }

  export type CricketOverMinAggregateInputType = {
    sis_id?: true
    matchId?: true
    runs?: true
    wickets?: true
    totalBalls?: true
    validBalls?: true
    strikerScoreId?: true
    nonStrikerScoreId?: true
    bowlerScoreId?: true
  }

  export type CricketOverMaxAggregateInputType = {
    sis_id?: true
    matchId?: true
    runs?: true
    wickets?: true
    totalBalls?: true
    validBalls?: true
    strikerScoreId?: true
    nonStrikerScoreId?: true
    bowlerScoreId?: true
  }

  export type CricketOverCountAggregateInputType = {
    sis_id?: true
    matchId?: true
    runs?: true
    wickets?: true
    totalBalls?: true
    validBalls?: true
    strikerScoreId?: true
    nonStrikerScoreId?: true
    bowlerScoreId?: true
    _all?: true
  }

  export type CricketOverAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CricketOver to aggregate.
     */
    where?: CricketOverWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CricketOvers to fetch.
     */
    orderBy?: CricketOverOrderByWithRelationInput | CricketOverOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CricketOverWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CricketOvers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CricketOvers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CricketOvers
    **/
    _count?: true | CricketOverCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CricketOverAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CricketOverSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CricketOverMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CricketOverMaxAggregateInputType
  }

  export type GetCricketOverAggregateType<T extends CricketOverAggregateArgs> = {
        [P in keyof T & keyof AggregateCricketOver]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCricketOver[P]>
      : GetScalarType<T[P], AggregateCricketOver[P]>
  }




  export type CricketOverGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CricketOverWhereInput
    orderBy?: CricketOverOrderByWithAggregationInput | CricketOverOrderByWithAggregationInput[]
    by: CricketOverScalarFieldEnum[] | CricketOverScalarFieldEnum
    having?: CricketOverScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CricketOverCountAggregateInputType | true
    _avg?: CricketOverAvgAggregateInputType
    _sum?: CricketOverSumAggregateInputType
    _min?: CricketOverMinAggregateInputType
    _max?: CricketOverMaxAggregateInputType
  }

  export type CricketOverGroupByOutputType = {
    sis_id: string
    matchId: string
    runs: number
    wickets: number
    totalBalls: number
    validBalls: number
    strikerScoreId: string
    nonStrikerScoreId: string
    bowlerScoreId: string
    _count: CricketOverCountAggregateOutputType | null
    _avg: CricketOverAvgAggregateOutputType | null
    _sum: CricketOverSumAggregateOutputType | null
    _min: CricketOverMinAggregateOutputType | null
    _max: CricketOverMaxAggregateOutputType | null
  }

  type GetCricketOverGroupByPayload<T extends CricketOverGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CricketOverGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CricketOverGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CricketOverGroupByOutputType[P]>
            : GetScalarType<T[P], CricketOverGroupByOutputType[P]>
        }
      >
    >


  export type CricketOverSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    sis_id?: boolean
    matchId?: boolean
    runs?: boolean
    wickets?: boolean
    totalBalls?: boolean
    validBalls?: boolean
    strikerScoreId?: boolean
    nonStrikerScoreId?: boolean
    bowlerScoreId?: boolean
    match?: boolean | CricketMatchDefaultArgs<ExtArgs>
    strikerScore?: boolean | CricketMatchPlayerBattingScoreDefaultArgs<ExtArgs>
    nonStrikerScore?: boolean | CricketMatchPlayerBattingScoreDefaultArgs<ExtArgs>
    bowlerScore?: boolean | CricketMatchPlayerBowlingScoreDefaultArgs<ExtArgs>
    balls?: boolean | CricketOver$ballsArgs<ExtArgs>
    match_current_over?: boolean | CricketOver$match_current_overArgs<ExtArgs>
    _count?: boolean | CricketOverCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cricketOver"]>

  export type CricketOverSelectScalar = {
    sis_id?: boolean
    matchId?: boolean
    runs?: boolean
    wickets?: boolean
    totalBalls?: boolean
    validBalls?: boolean
    strikerScoreId?: boolean
    nonStrikerScoreId?: boolean
    bowlerScoreId?: boolean
  }

  export type CricketOverInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    match?: boolean | CricketMatchDefaultArgs<ExtArgs>
    strikerScore?: boolean | CricketMatchPlayerBattingScoreDefaultArgs<ExtArgs>
    nonStrikerScore?: boolean | CricketMatchPlayerBattingScoreDefaultArgs<ExtArgs>
    bowlerScore?: boolean | CricketMatchPlayerBowlingScoreDefaultArgs<ExtArgs>
    balls?: boolean | CricketOver$ballsArgs<ExtArgs>
    match_current_over?: boolean | CricketOver$match_current_overArgs<ExtArgs>
    _count?: boolean | CricketOverCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CricketOverPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CricketOver"
    objects: {
      match: Prisma.$CricketMatchPayload<ExtArgs>
      strikerScore: Prisma.$CricketMatchPlayerBattingScorePayload<ExtArgs>
      nonStrikerScore: Prisma.$CricketMatchPlayerBattingScorePayload<ExtArgs>
      bowlerScore: Prisma.$CricketMatchPlayerBowlingScorePayload<ExtArgs>
      balls: Prisma.$CricketOverBallPayload<ExtArgs>[]
      match_current_over: Prisma.$CricketMatchPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      sis_id: string
      matchId: string
      runs: number
      wickets: number
      totalBalls: number
      validBalls: number
      strikerScoreId: string
      nonStrikerScoreId: string
      bowlerScoreId: string
    }, ExtArgs["result"]["cricketOver"]>
    composites: {}
  }


  type CricketOverGetPayload<S extends boolean | null | undefined | CricketOverDefaultArgs> = $Result.GetResult<Prisma.$CricketOverPayload, S>

  type CricketOverCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CricketOverFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CricketOverCountAggregateInputType | true
    }

  export interface CricketOverDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CricketOver'], meta: { name: 'CricketOver' } }
    /**
     * Find zero or one CricketOver that matches the filter.
     * @param {CricketOverFindUniqueArgs} args - Arguments to find a CricketOver
     * @example
     * // Get one CricketOver
     * const cricketOver = await prisma.cricketOver.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CricketOverFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CricketOverFindUniqueArgs<ExtArgs>>
    ): Prisma__CricketOverClient<$Result.GetResult<Prisma.$CricketOverPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one CricketOver that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CricketOverFindUniqueOrThrowArgs} args - Arguments to find a CricketOver
     * @example
     * // Get one CricketOver
     * const cricketOver = await prisma.cricketOver.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CricketOverFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CricketOverFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CricketOverClient<$Result.GetResult<Prisma.$CricketOverPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first CricketOver that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CricketOverFindFirstArgs} args - Arguments to find a CricketOver
     * @example
     * // Get one CricketOver
     * const cricketOver = await prisma.cricketOver.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CricketOverFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CricketOverFindFirstArgs<ExtArgs>>
    ): Prisma__CricketOverClient<$Result.GetResult<Prisma.$CricketOverPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first CricketOver that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CricketOverFindFirstOrThrowArgs} args - Arguments to find a CricketOver
     * @example
     * // Get one CricketOver
     * const cricketOver = await prisma.cricketOver.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CricketOverFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CricketOverFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CricketOverClient<$Result.GetResult<Prisma.$CricketOverPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more CricketOvers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CricketOverFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CricketOvers
     * const cricketOvers = await prisma.cricketOver.findMany()
     * 
     * // Get first 10 CricketOvers
     * const cricketOvers = await prisma.cricketOver.findMany({ take: 10 })
     * 
     * // Only select the `sis_id`
     * const cricketOverWithSis_idOnly = await prisma.cricketOver.findMany({ select: { sis_id: true } })
     * 
    **/
    findMany<T extends CricketOverFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CricketOverFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CricketOverPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a CricketOver.
     * @param {CricketOverCreateArgs} args - Arguments to create a CricketOver.
     * @example
     * // Create one CricketOver
     * const CricketOver = await prisma.cricketOver.create({
     *   data: {
     *     // ... data to create a CricketOver
     *   }
     * })
     * 
    **/
    create<T extends CricketOverCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CricketOverCreateArgs<ExtArgs>>
    ): Prisma__CricketOverClient<$Result.GetResult<Prisma.$CricketOverPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many CricketOvers.
     *     @param {CricketOverCreateManyArgs} args - Arguments to create many CricketOvers.
     *     @example
     *     // Create many CricketOvers
     *     const cricketOver = await prisma.cricketOver.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CricketOverCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CricketOverCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CricketOver.
     * @param {CricketOverDeleteArgs} args - Arguments to delete one CricketOver.
     * @example
     * // Delete one CricketOver
     * const CricketOver = await prisma.cricketOver.delete({
     *   where: {
     *     // ... filter to delete one CricketOver
     *   }
     * })
     * 
    **/
    delete<T extends CricketOverDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CricketOverDeleteArgs<ExtArgs>>
    ): Prisma__CricketOverClient<$Result.GetResult<Prisma.$CricketOverPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one CricketOver.
     * @param {CricketOverUpdateArgs} args - Arguments to update one CricketOver.
     * @example
     * // Update one CricketOver
     * const cricketOver = await prisma.cricketOver.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CricketOverUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CricketOverUpdateArgs<ExtArgs>>
    ): Prisma__CricketOverClient<$Result.GetResult<Prisma.$CricketOverPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more CricketOvers.
     * @param {CricketOverDeleteManyArgs} args - Arguments to filter CricketOvers to delete.
     * @example
     * // Delete a few CricketOvers
     * const { count } = await prisma.cricketOver.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CricketOverDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CricketOverDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CricketOvers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CricketOverUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CricketOvers
     * const cricketOver = await prisma.cricketOver.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CricketOverUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CricketOverUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CricketOver.
     * @param {CricketOverUpsertArgs} args - Arguments to update or create a CricketOver.
     * @example
     * // Update or create a CricketOver
     * const cricketOver = await prisma.cricketOver.upsert({
     *   create: {
     *     // ... data to create a CricketOver
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CricketOver we want to update
     *   }
     * })
    **/
    upsert<T extends CricketOverUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CricketOverUpsertArgs<ExtArgs>>
    ): Prisma__CricketOverClient<$Result.GetResult<Prisma.$CricketOverPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of CricketOvers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CricketOverCountArgs} args - Arguments to filter CricketOvers to count.
     * @example
     * // Count the number of CricketOvers
     * const count = await prisma.cricketOver.count({
     *   where: {
     *     // ... the filter for the CricketOvers we want to count
     *   }
     * })
    **/
    count<T extends CricketOverCountArgs>(
      args?: Subset<T, CricketOverCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CricketOverCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CricketOver.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CricketOverAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CricketOverAggregateArgs>(args: Subset<T, CricketOverAggregateArgs>): Prisma.PrismaPromise<GetCricketOverAggregateType<T>>

    /**
     * Group by CricketOver.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CricketOverGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CricketOverGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CricketOverGroupByArgs['orderBy'] }
        : { orderBy?: CricketOverGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CricketOverGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCricketOverGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CricketOver model
   */
  readonly fields: CricketOverFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CricketOver.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CricketOverClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    match<T extends CricketMatchDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CricketMatchDefaultArgs<ExtArgs>>): Prisma__CricketMatchClient<$Result.GetResult<Prisma.$CricketMatchPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    strikerScore<T extends CricketMatchPlayerBattingScoreDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CricketMatchPlayerBattingScoreDefaultArgs<ExtArgs>>): Prisma__CricketMatchPlayerBattingScoreClient<$Result.GetResult<Prisma.$CricketMatchPlayerBattingScorePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    nonStrikerScore<T extends CricketMatchPlayerBattingScoreDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CricketMatchPlayerBattingScoreDefaultArgs<ExtArgs>>): Prisma__CricketMatchPlayerBattingScoreClient<$Result.GetResult<Prisma.$CricketMatchPlayerBattingScorePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    bowlerScore<T extends CricketMatchPlayerBowlingScoreDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CricketMatchPlayerBowlingScoreDefaultArgs<ExtArgs>>): Prisma__CricketMatchPlayerBowlingScoreClient<$Result.GetResult<Prisma.$CricketMatchPlayerBowlingScorePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    balls<T extends CricketOver$ballsArgs<ExtArgs> = {}>(args?: Subset<T, CricketOver$ballsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CricketOverBallPayload<ExtArgs>, T, 'findMany'> | Null>;

    match_current_over<T extends CricketOver$match_current_overArgs<ExtArgs> = {}>(args?: Subset<T, CricketOver$match_current_overArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CricketMatchPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the CricketOver model
   */ 
  interface CricketOverFieldRefs {
    readonly sis_id: FieldRef<"CricketOver", 'String'>
    readonly matchId: FieldRef<"CricketOver", 'String'>
    readonly runs: FieldRef<"CricketOver", 'Int'>
    readonly wickets: FieldRef<"CricketOver", 'Int'>
    readonly totalBalls: FieldRef<"CricketOver", 'Int'>
    readonly validBalls: FieldRef<"CricketOver", 'Int'>
    readonly strikerScoreId: FieldRef<"CricketOver", 'String'>
    readonly nonStrikerScoreId: FieldRef<"CricketOver", 'String'>
    readonly bowlerScoreId: FieldRef<"CricketOver", 'String'>
  }
    

  // Custom InputTypes

  /**
   * CricketOver findUnique
   */
  export type CricketOverFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketOver
     */
    select?: CricketOverSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketOverInclude<ExtArgs> | null
    /**
     * Filter, which CricketOver to fetch.
     */
    where: CricketOverWhereUniqueInput
  }


  /**
   * CricketOver findUniqueOrThrow
   */
  export type CricketOverFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketOver
     */
    select?: CricketOverSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketOverInclude<ExtArgs> | null
    /**
     * Filter, which CricketOver to fetch.
     */
    where: CricketOverWhereUniqueInput
  }


  /**
   * CricketOver findFirst
   */
  export type CricketOverFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketOver
     */
    select?: CricketOverSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketOverInclude<ExtArgs> | null
    /**
     * Filter, which CricketOver to fetch.
     */
    where?: CricketOverWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CricketOvers to fetch.
     */
    orderBy?: CricketOverOrderByWithRelationInput | CricketOverOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CricketOvers.
     */
    cursor?: CricketOverWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CricketOvers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CricketOvers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CricketOvers.
     */
    distinct?: CricketOverScalarFieldEnum | CricketOverScalarFieldEnum[]
  }


  /**
   * CricketOver findFirstOrThrow
   */
  export type CricketOverFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketOver
     */
    select?: CricketOverSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketOverInclude<ExtArgs> | null
    /**
     * Filter, which CricketOver to fetch.
     */
    where?: CricketOverWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CricketOvers to fetch.
     */
    orderBy?: CricketOverOrderByWithRelationInput | CricketOverOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CricketOvers.
     */
    cursor?: CricketOverWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CricketOvers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CricketOvers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CricketOvers.
     */
    distinct?: CricketOverScalarFieldEnum | CricketOverScalarFieldEnum[]
  }


  /**
   * CricketOver findMany
   */
  export type CricketOverFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketOver
     */
    select?: CricketOverSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketOverInclude<ExtArgs> | null
    /**
     * Filter, which CricketOvers to fetch.
     */
    where?: CricketOverWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CricketOvers to fetch.
     */
    orderBy?: CricketOverOrderByWithRelationInput | CricketOverOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CricketOvers.
     */
    cursor?: CricketOverWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CricketOvers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CricketOvers.
     */
    skip?: number
    distinct?: CricketOverScalarFieldEnum | CricketOverScalarFieldEnum[]
  }


  /**
   * CricketOver create
   */
  export type CricketOverCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketOver
     */
    select?: CricketOverSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketOverInclude<ExtArgs> | null
    /**
     * The data needed to create a CricketOver.
     */
    data: XOR<CricketOverCreateInput, CricketOverUncheckedCreateInput>
  }


  /**
   * CricketOver createMany
   */
  export type CricketOverCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CricketOvers.
     */
    data: CricketOverCreateManyInput | CricketOverCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * CricketOver update
   */
  export type CricketOverUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketOver
     */
    select?: CricketOverSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketOverInclude<ExtArgs> | null
    /**
     * The data needed to update a CricketOver.
     */
    data: XOR<CricketOverUpdateInput, CricketOverUncheckedUpdateInput>
    /**
     * Choose, which CricketOver to update.
     */
    where: CricketOverWhereUniqueInput
  }


  /**
   * CricketOver updateMany
   */
  export type CricketOverUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CricketOvers.
     */
    data: XOR<CricketOverUpdateManyMutationInput, CricketOverUncheckedUpdateManyInput>
    /**
     * Filter which CricketOvers to update
     */
    where?: CricketOverWhereInput
  }


  /**
   * CricketOver upsert
   */
  export type CricketOverUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketOver
     */
    select?: CricketOverSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketOverInclude<ExtArgs> | null
    /**
     * The filter to search for the CricketOver to update in case it exists.
     */
    where: CricketOverWhereUniqueInput
    /**
     * In case the CricketOver found by the `where` argument doesn't exist, create a new CricketOver with this data.
     */
    create: XOR<CricketOverCreateInput, CricketOverUncheckedCreateInput>
    /**
     * In case the CricketOver was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CricketOverUpdateInput, CricketOverUncheckedUpdateInput>
  }


  /**
   * CricketOver delete
   */
  export type CricketOverDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketOver
     */
    select?: CricketOverSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketOverInclude<ExtArgs> | null
    /**
     * Filter which CricketOver to delete.
     */
    where: CricketOverWhereUniqueInput
  }


  /**
   * CricketOver deleteMany
   */
  export type CricketOverDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CricketOvers to delete
     */
    where?: CricketOverWhereInput
  }


  /**
   * CricketOver.balls
   */
  export type CricketOver$ballsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketOverBall
     */
    select?: CricketOverBallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketOverBallInclude<ExtArgs> | null
    where?: CricketOverBallWhereInput
    orderBy?: CricketOverBallOrderByWithRelationInput | CricketOverBallOrderByWithRelationInput[]
    cursor?: CricketOverBallWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CricketOverBallScalarFieldEnum | CricketOverBallScalarFieldEnum[]
  }


  /**
   * CricketOver.match_current_over
   */
  export type CricketOver$match_current_overArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketMatch
     */
    select?: CricketMatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketMatchInclude<ExtArgs> | null
    where?: CricketMatchWhereInput
    orderBy?: CricketMatchOrderByWithRelationInput | CricketMatchOrderByWithRelationInput[]
    cursor?: CricketMatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CricketMatchScalarFieldEnum | CricketMatchScalarFieldEnum[]
  }


  /**
   * CricketOver without action
   */
  export type CricketOverDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketOver
     */
    select?: CricketOverSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketOverInclude<ExtArgs> | null
  }



  /**
   * Model CricketOverBall
   */

  export type AggregateCricketOverBall = {
    _count: CricketOverBallCountAggregateOutputType | null
    _avg: CricketOverBallAvgAggregateOutputType | null
    _sum: CricketOverBallSumAggregateOutputType | null
    _min: CricketOverBallMinAggregateOutputType | null
    _max: CricketOverBallMaxAggregateOutputType | null
  }

  export type CricketOverBallAvgAggregateOutputType = {
    ballNo: number | null
    runs: number | null
    extras: number | null
  }

  export type CricketOverBallSumAggregateOutputType = {
    ballNo: number | null
    runs: number | null
    extras: number | null
  }

  export type CricketOverBallMinAggregateOutputType = {
    sis_id: string | null
    overId: string | null
    ballNo: number | null
    runs: number | null
    wicket: boolean | null
    ballType: $Enums.BallType | null
    extras: number | null
    wicketType: string | null
    deliveryType: string | null
  }

  export type CricketOverBallMaxAggregateOutputType = {
    sis_id: string | null
    overId: string | null
    ballNo: number | null
    runs: number | null
    wicket: boolean | null
    ballType: $Enums.BallType | null
    extras: number | null
    wicketType: string | null
    deliveryType: string | null
  }

  export type CricketOverBallCountAggregateOutputType = {
    sis_id: number
    overId: number
    ballNo: number
    runs: number
    wicket: number
    ballType: number
    extras: number
    wicketType: number
    deliveryType: number
    _all: number
  }


  export type CricketOverBallAvgAggregateInputType = {
    ballNo?: true
    runs?: true
    extras?: true
  }

  export type CricketOverBallSumAggregateInputType = {
    ballNo?: true
    runs?: true
    extras?: true
  }

  export type CricketOverBallMinAggregateInputType = {
    sis_id?: true
    overId?: true
    ballNo?: true
    runs?: true
    wicket?: true
    ballType?: true
    extras?: true
    wicketType?: true
    deliveryType?: true
  }

  export type CricketOverBallMaxAggregateInputType = {
    sis_id?: true
    overId?: true
    ballNo?: true
    runs?: true
    wicket?: true
    ballType?: true
    extras?: true
    wicketType?: true
    deliveryType?: true
  }

  export type CricketOverBallCountAggregateInputType = {
    sis_id?: true
    overId?: true
    ballNo?: true
    runs?: true
    wicket?: true
    ballType?: true
    extras?: true
    wicketType?: true
    deliveryType?: true
    _all?: true
  }

  export type CricketOverBallAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CricketOverBall to aggregate.
     */
    where?: CricketOverBallWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CricketOverBalls to fetch.
     */
    orderBy?: CricketOverBallOrderByWithRelationInput | CricketOverBallOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CricketOverBallWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CricketOverBalls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CricketOverBalls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CricketOverBalls
    **/
    _count?: true | CricketOverBallCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CricketOverBallAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CricketOverBallSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CricketOverBallMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CricketOverBallMaxAggregateInputType
  }

  export type GetCricketOverBallAggregateType<T extends CricketOverBallAggregateArgs> = {
        [P in keyof T & keyof AggregateCricketOverBall]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCricketOverBall[P]>
      : GetScalarType<T[P], AggregateCricketOverBall[P]>
  }




  export type CricketOverBallGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CricketOverBallWhereInput
    orderBy?: CricketOverBallOrderByWithAggregationInput | CricketOverBallOrderByWithAggregationInput[]
    by: CricketOverBallScalarFieldEnum[] | CricketOverBallScalarFieldEnum
    having?: CricketOverBallScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CricketOverBallCountAggregateInputType | true
    _avg?: CricketOverBallAvgAggregateInputType
    _sum?: CricketOverBallSumAggregateInputType
    _min?: CricketOverBallMinAggregateInputType
    _max?: CricketOverBallMaxAggregateInputType
  }

  export type CricketOverBallGroupByOutputType = {
    sis_id: string
    overId: string
    ballNo: number
    runs: number
    wicket: boolean
    ballType: $Enums.BallType
    extras: number
    wicketType: string | null
    deliveryType: string | null
    _count: CricketOverBallCountAggregateOutputType | null
    _avg: CricketOverBallAvgAggregateOutputType | null
    _sum: CricketOverBallSumAggregateOutputType | null
    _min: CricketOverBallMinAggregateOutputType | null
    _max: CricketOverBallMaxAggregateOutputType | null
  }

  type GetCricketOverBallGroupByPayload<T extends CricketOverBallGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CricketOverBallGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CricketOverBallGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CricketOverBallGroupByOutputType[P]>
            : GetScalarType<T[P], CricketOverBallGroupByOutputType[P]>
        }
      >
    >


  export type CricketOverBallSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    sis_id?: boolean
    overId?: boolean
    ballNo?: boolean
    runs?: boolean
    wicket?: boolean
    ballType?: boolean
    extras?: boolean
    wicketType?: boolean
    deliveryType?: boolean
    over?: boolean | CricketOverDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cricketOverBall"]>

  export type CricketOverBallSelectScalar = {
    sis_id?: boolean
    overId?: boolean
    ballNo?: boolean
    runs?: boolean
    wicket?: boolean
    ballType?: boolean
    extras?: boolean
    wicketType?: boolean
    deliveryType?: boolean
  }

  export type CricketOverBallInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    over?: boolean | CricketOverDefaultArgs<ExtArgs>
  }


  export type $CricketOverBallPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CricketOverBall"
    objects: {
      over: Prisma.$CricketOverPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      sis_id: string
      overId: string
      ballNo: number
      runs: number
      wicket: boolean
      ballType: $Enums.BallType
      extras: number
      wicketType: string | null
      deliveryType: string | null
    }, ExtArgs["result"]["cricketOverBall"]>
    composites: {}
  }


  type CricketOverBallGetPayload<S extends boolean | null | undefined | CricketOverBallDefaultArgs> = $Result.GetResult<Prisma.$CricketOverBallPayload, S>

  type CricketOverBallCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CricketOverBallFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CricketOverBallCountAggregateInputType | true
    }

  export interface CricketOverBallDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CricketOverBall'], meta: { name: 'CricketOverBall' } }
    /**
     * Find zero or one CricketOverBall that matches the filter.
     * @param {CricketOverBallFindUniqueArgs} args - Arguments to find a CricketOverBall
     * @example
     * // Get one CricketOverBall
     * const cricketOverBall = await prisma.cricketOverBall.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CricketOverBallFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CricketOverBallFindUniqueArgs<ExtArgs>>
    ): Prisma__CricketOverBallClient<$Result.GetResult<Prisma.$CricketOverBallPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one CricketOverBall that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CricketOverBallFindUniqueOrThrowArgs} args - Arguments to find a CricketOverBall
     * @example
     * // Get one CricketOverBall
     * const cricketOverBall = await prisma.cricketOverBall.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CricketOverBallFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CricketOverBallFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CricketOverBallClient<$Result.GetResult<Prisma.$CricketOverBallPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first CricketOverBall that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CricketOverBallFindFirstArgs} args - Arguments to find a CricketOverBall
     * @example
     * // Get one CricketOverBall
     * const cricketOverBall = await prisma.cricketOverBall.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CricketOverBallFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CricketOverBallFindFirstArgs<ExtArgs>>
    ): Prisma__CricketOverBallClient<$Result.GetResult<Prisma.$CricketOverBallPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first CricketOverBall that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CricketOverBallFindFirstOrThrowArgs} args - Arguments to find a CricketOverBall
     * @example
     * // Get one CricketOverBall
     * const cricketOverBall = await prisma.cricketOverBall.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CricketOverBallFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CricketOverBallFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CricketOverBallClient<$Result.GetResult<Prisma.$CricketOverBallPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more CricketOverBalls that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CricketOverBallFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CricketOverBalls
     * const cricketOverBalls = await prisma.cricketOverBall.findMany()
     * 
     * // Get first 10 CricketOverBalls
     * const cricketOverBalls = await prisma.cricketOverBall.findMany({ take: 10 })
     * 
     * // Only select the `sis_id`
     * const cricketOverBallWithSis_idOnly = await prisma.cricketOverBall.findMany({ select: { sis_id: true } })
     * 
    **/
    findMany<T extends CricketOverBallFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CricketOverBallFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CricketOverBallPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a CricketOverBall.
     * @param {CricketOverBallCreateArgs} args - Arguments to create a CricketOverBall.
     * @example
     * // Create one CricketOverBall
     * const CricketOverBall = await prisma.cricketOverBall.create({
     *   data: {
     *     // ... data to create a CricketOverBall
     *   }
     * })
     * 
    **/
    create<T extends CricketOverBallCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CricketOverBallCreateArgs<ExtArgs>>
    ): Prisma__CricketOverBallClient<$Result.GetResult<Prisma.$CricketOverBallPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many CricketOverBalls.
     *     @param {CricketOverBallCreateManyArgs} args - Arguments to create many CricketOverBalls.
     *     @example
     *     // Create many CricketOverBalls
     *     const cricketOverBall = await prisma.cricketOverBall.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CricketOverBallCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CricketOverBallCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CricketOverBall.
     * @param {CricketOverBallDeleteArgs} args - Arguments to delete one CricketOverBall.
     * @example
     * // Delete one CricketOverBall
     * const CricketOverBall = await prisma.cricketOverBall.delete({
     *   where: {
     *     // ... filter to delete one CricketOverBall
     *   }
     * })
     * 
    **/
    delete<T extends CricketOverBallDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CricketOverBallDeleteArgs<ExtArgs>>
    ): Prisma__CricketOverBallClient<$Result.GetResult<Prisma.$CricketOverBallPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one CricketOverBall.
     * @param {CricketOverBallUpdateArgs} args - Arguments to update one CricketOverBall.
     * @example
     * // Update one CricketOverBall
     * const cricketOverBall = await prisma.cricketOverBall.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CricketOverBallUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CricketOverBallUpdateArgs<ExtArgs>>
    ): Prisma__CricketOverBallClient<$Result.GetResult<Prisma.$CricketOverBallPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more CricketOverBalls.
     * @param {CricketOverBallDeleteManyArgs} args - Arguments to filter CricketOverBalls to delete.
     * @example
     * // Delete a few CricketOverBalls
     * const { count } = await prisma.cricketOverBall.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CricketOverBallDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CricketOverBallDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CricketOverBalls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CricketOverBallUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CricketOverBalls
     * const cricketOverBall = await prisma.cricketOverBall.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CricketOverBallUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CricketOverBallUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CricketOverBall.
     * @param {CricketOverBallUpsertArgs} args - Arguments to update or create a CricketOverBall.
     * @example
     * // Update or create a CricketOverBall
     * const cricketOverBall = await prisma.cricketOverBall.upsert({
     *   create: {
     *     // ... data to create a CricketOverBall
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CricketOverBall we want to update
     *   }
     * })
    **/
    upsert<T extends CricketOverBallUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CricketOverBallUpsertArgs<ExtArgs>>
    ): Prisma__CricketOverBallClient<$Result.GetResult<Prisma.$CricketOverBallPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of CricketOverBalls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CricketOverBallCountArgs} args - Arguments to filter CricketOverBalls to count.
     * @example
     * // Count the number of CricketOverBalls
     * const count = await prisma.cricketOverBall.count({
     *   where: {
     *     // ... the filter for the CricketOverBalls we want to count
     *   }
     * })
    **/
    count<T extends CricketOverBallCountArgs>(
      args?: Subset<T, CricketOverBallCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CricketOverBallCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CricketOverBall.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CricketOverBallAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CricketOverBallAggregateArgs>(args: Subset<T, CricketOverBallAggregateArgs>): Prisma.PrismaPromise<GetCricketOverBallAggregateType<T>>

    /**
     * Group by CricketOverBall.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CricketOverBallGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CricketOverBallGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CricketOverBallGroupByArgs['orderBy'] }
        : { orderBy?: CricketOverBallGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CricketOverBallGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCricketOverBallGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CricketOverBall model
   */
  readonly fields: CricketOverBallFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CricketOverBall.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CricketOverBallClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    over<T extends CricketOverDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CricketOverDefaultArgs<ExtArgs>>): Prisma__CricketOverClient<$Result.GetResult<Prisma.$CricketOverPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the CricketOverBall model
   */ 
  interface CricketOverBallFieldRefs {
    readonly sis_id: FieldRef<"CricketOverBall", 'String'>
    readonly overId: FieldRef<"CricketOverBall", 'String'>
    readonly ballNo: FieldRef<"CricketOverBall", 'Int'>
    readonly runs: FieldRef<"CricketOverBall", 'Int'>
    readonly wicket: FieldRef<"CricketOverBall", 'Boolean'>
    readonly ballType: FieldRef<"CricketOverBall", 'BallType'>
    readonly extras: FieldRef<"CricketOverBall", 'Int'>
    readonly wicketType: FieldRef<"CricketOverBall", 'String'>
    readonly deliveryType: FieldRef<"CricketOverBall", 'String'>
  }
    

  // Custom InputTypes

  /**
   * CricketOverBall findUnique
   */
  export type CricketOverBallFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketOverBall
     */
    select?: CricketOverBallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketOverBallInclude<ExtArgs> | null
    /**
     * Filter, which CricketOverBall to fetch.
     */
    where: CricketOverBallWhereUniqueInput
  }


  /**
   * CricketOverBall findUniqueOrThrow
   */
  export type CricketOverBallFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketOverBall
     */
    select?: CricketOverBallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketOverBallInclude<ExtArgs> | null
    /**
     * Filter, which CricketOverBall to fetch.
     */
    where: CricketOverBallWhereUniqueInput
  }


  /**
   * CricketOverBall findFirst
   */
  export type CricketOverBallFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketOverBall
     */
    select?: CricketOverBallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketOverBallInclude<ExtArgs> | null
    /**
     * Filter, which CricketOverBall to fetch.
     */
    where?: CricketOverBallWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CricketOverBalls to fetch.
     */
    orderBy?: CricketOverBallOrderByWithRelationInput | CricketOverBallOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CricketOverBalls.
     */
    cursor?: CricketOverBallWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CricketOverBalls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CricketOverBalls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CricketOverBalls.
     */
    distinct?: CricketOverBallScalarFieldEnum | CricketOverBallScalarFieldEnum[]
  }


  /**
   * CricketOverBall findFirstOrThrow
   */
  export type CricketOverBallFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketOverBall
     */
    select?: CricketOverBallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketOverBallInclude<ExtArgs> | null
    /**
     * Filter, which CricketOverBall to fetch.
     */
    where?: CricketOverBallWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CricketOverBalls to fetch.
     */
    orderBy?: CricketOverBallOrderByWithRelationInput | CricketOverBallOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CricketOverBalls.
     */
    cursor?: CricketOverBallWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CricketOverBalls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CricketOverBalls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CricketOverBalls.
     */
    distinct?: CricketOverBallScalarFieldEnum | CricketOverBallScalarFieldEnum[]
  }


  /**
   * CricketOverBall findMany
   */
  export type CricketOverBallFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketOverBall
     */
    select?: CricketOverBallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketOverBallInclude<ExtArgs> | null
    /**
     * Filter, which CricketOverBalls to fetch.
     */
    where?: CricketOverBallWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CricketOverBalls to fetch.
     */
    orderBy?: CricketOverBallOrderByWithRelationInput | CricketOverBallOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CricketOverBalls.
     */
    cursor?: CricketOverBallWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CricketOverBalls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CricketOverBalls.
     */
    skip?: number
    distinct?: CricketOverBallScalarFieldEnum | CricketOverBallScalarFieldEnum[]
  }


  /**
   * CricketOverBall create
   */
  export type CricketOverBallCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketOverBall
     */
    select?: CricketOverBallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketOverBallInclude<ExtArgs> | null
    /**
     * The data needed to create a CricketOverBall.
     */
    data: XOR<CricketOverBallCreateInput, CricketOverBallUncheckedCreateInput>
  }


  /**
   * CricketOverBall createMany
   */
  export type CricketOverBallCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CricketOverBalls.
     */
    data: CricketOverBallCreateManyInput | CricketOverBallCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * CricketOverBall update
   */
  export type CricketOverBallUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketOverBall
     */
    select?: CricketOverBallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketOverBallInclude<ExtArgs> | null
    /**
     * The data needed to update a CricketOverBall.
     */
    data: XOR<CricketOverBallUpdateInput, CricketOverBallUncheckedUpdateInput>
    /**
     * Choose, which CricketOverBall to update.
     */
    where: CricketOverBallWhereUniqueInput
  }


  /**
   * CricketOverBall updateMany
   */
  export type CricketOverBallUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CricketOverBalls.
     */
    data: XOR<CricketOverBallUpdateManyMutationInput, CricketOverBallUncheckedUpdateManyInput>
    /**
     * Filter which CricketOverBalls to update
     */
    where?: CricketOverBallWhereInput
  }


  /**
   * CricketOverBall upsert
   */
  export type CricketOverBallUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketOverBall
     */
    select?: CricketOverBallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketOverBallInclude<ExtArgs> | null
    /**
     * The filter to search for the CricketOverBall to update in case it exists.
     */
    where: CricketOverBallWhereUniqueInput
    /**
     * In case the CricketOverBall found by the `where` argument doesn't exist, create a new CricketOverBall with this data.
     */
    create: XOR<CricketOverBallCreateInput, CricketOverBallUncheckedCreateInput>
    /**
     * In case the CricketOverBall was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CricketOverBallUpdateInput, CricketOverBallUncheckedUpdateInput>
  }


  /**
   * CricketOverBall delete
   */
  export type CricketOverBallDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketOverBall
     */
    select?: CricketOverBallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketOverBallInclude<ExtArgs> | null
    /**
     * Filter which CricketOverBall to delete.
     */
    where: CricketOverBallWhereUniqueInput
  }


  /**
   * CricketOverBall deleteMany
   */
  export type CricketOverBallDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CricketOverBalls to delete
     */
    where?: CricketOverBallWhereInput
  }


  /**
   * CricketOverBall without action
   */
  export type CricketOverBallDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketOverBall
     */
    select?: CricketOverBallSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketOverBallInclude<ExtArgs> | null
  }



  /**
   * Model CricketMatchPlayerBattingScore
   */

  export type AggregateCricketMatchPlayerBattingScore = {
    _count: CricketMatchPlayerBattingScoreCountAggregateOutputType | null
    _avg: CricketMatchPlayerBattingScoreAvgAggregateOutputType | null
    _sum: CricketMatchPlayerBattingScoreSumAggregateOutputType | null
    _min: CricketMatchPlayerBattingScoreMinAggregateOutputType | null
    _max: CricketMatchPlayerBattingScoreMaxAggregateOutputType | null
  }

  export type CricketMatchPlayerBattingScoreAvgAggregateOutputType = {
    runs: number | null
    balls: number | null
    fours: number | null
    sixes: number | null
    strikeRate: number | null
  }

  export type CricketMatchPlayerBattingScoreSumAggregateOutputType = {
    runs: number | null
    balls: number | null
    fours: number | null
    sixes: number | null
    strikeRate: number | null
  }

  export type CricketMatchPlayerBattingScoreMinAggregateOutputType = {
    sis_id: string | null
    runs: number | null
    balls: number | null
    fours: number | null
    sixes: number | null
    strikeRate: number | null
    out: boolean | null
    played: boolean | null
    wicketType: string | null
    playerId: string | null
    matchId: string | null
    teamId: string | null
  }

  export type CricketMatchPlayerBattingScoreMaxAggregateOutputType = {
    sis_id: string | null
    runs: number | null
    balls: number | null
    fours: number | null
    sixes: number | null
    strikeRate: number | null
    out: boolean | null
    played: boolean | null
    wicketType: string | null
    playerId: string | null
    matchId: string | null
    teamId: string | null
  }

  export type CricketMatchPlayerBattingScoreCountAggregateOutputType = {
    sis_id: number
    runs: number
    balls: number
    fours: number
    sixes: number
    strikeRate: number
    out: number
    played: number
    wicketType: number
    playerId: number
    matchId: number
    teamId: number
    _all: number
  }


  export type CricketMatchPlayerBattingScoreAvgAggregateInputType = {
    runs?: true
    balls?: true
    fours?: true
    sixes?: true
    strikeRate?: true
  }

  export type CricketMatchPlayerBattingScoreSumAggregateInputType = {
    runs?: true
    balls?: true
    fours?: true
    sixes?: true
    strikeRate?: true
  }

  export type CricketMatchPlayerBattingScoreMinAggregateInputType = {
    sis_id?: true
    runs?: true
    balls?: true
    fours?: true
    sixes?: true
    strikeRate?: true
    out?: true
    played?: true
    wicketType?: true
    playerId?: true
    matchId?: true
    teamId?: true
  }

  export type CricketMatchPlayerBattingScoreMaxAggregateInputType = {
    sis_id?: true
    runs?: true
    balls?: true
    fours?: true
    sixes?: true
    strikeRate?: true
    out?: true
    played?: true
    wicketType?: true
    playerId?: true
    matchId?: true
    teamId?: true
  }

  export type CricketMatchPlayerBattingScoreCountAggregateInputType = {
    sis_id?: true
    runs?: true
    balls?: true
    fours?: true
    sixes?: true
    strikeRate?: true
    out?: true
    played?: true
    wicketType?: true
    playerId?: true
    matchId?: true
    teamId?: true
    _all?: true
  }

  export type CricketMatchPlayerBattingScoreAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CricketMatchPlayerBattingScore to aggregate.
     */
    where?: CricketMatchPlayerBattingScoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CricketMatchPlayerBattingScores to fetch.
     */
    orderBy?: CricketMatchPlayerBattingScoreOrderByWithRelationInput | CricketMatchPlayerBattingScoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CricketMatchPlayerBattingScoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CricketMatchPlayerBattingScores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CricketMatchPlayerBattingScores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CricketMatchPlayerBattingScores
    **/
    _count?: true | CricketMatchPlayerBattingScoreCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CricketMatchPlayerBattingScoreAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CricketMatchPlayerBattingScoreSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CricketMatchPlayerBattingScoreMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CricketMatchPlayerBattingScoreMaxAggregateInputType
  }

  export type GetCricketMatchPlayerBattingScoreAggregateType<T extends CricketMatchPlayerBattingScoreAggregateArgs> = {
        [P in keyof T & keyof AggregateCricketMatchPlayerBattingScore]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCricketMatchPlayerBattingScore[P]>
      : GetScalarType<T[P], AggregateCricketMatchPlayerBattingScore[P]>
  }




  export type CricketMatchPlayerBattingScoreGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CricketMatchPlayerBattingScoreWhereInput
    orderBy?: CricketMatchPlayerBattingScoreOrderByWithAggregationInput | CricketMatchPlayerBattingScoreOrderByWithAggregationInput[]
    by: CricketMatchPlayerBattingScoreScalarFieldEnum[] | CricketMatchPlayerBattingScoreScalarFieldEnum
    having?: CricketMatchPlayerBattingScoreScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CricketMatchPlayerBattingScoreCountAggregateInputType | true
    _avg?: CricketMatchPlayerBattingScoreAvgAggregateInputType
    _sum?: CricketMatchPlayerBattingScoreSumAggregateInputType
    _min?: CricketMatchPlayerBattingScoreMinAggregateInputType
    _max?: CricketMatchPlayerBattingScoreMaxAggregateInputType
  }

  export type CricketMatchPlayerBattingScoreGroupByOutputType = {
    sis_id: string
    runs: number
    balls: number
    fours: number
    sixes: number
    strikeRate: number
    out: boolean
    played: boolean
    wicketType: string | null
    playerId: string | null
    matchId: string
    teamId: string
    _count: CricketMatchPlayerBattingScoreCountAggregateOutputType | null
    _avg: CricketMatchPlayerBattingScoreAvgAggregateOutputType | null
    _sum: CricketMatchPlayerBattingScoreSumAggregateOutputType | null
    _min: CricketMatchPlayerBattingScoreMinAggregateOutputType | null
    _max: CricketMatchPlayerBattingScoreMaxAggregateOutputType | null
  }

  type GetCricketMatchPlayerBattingScoreGroupByPayload<T extends CricketMatchPlayerBattingScoreGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CricketMatchPlayerBattingScoreGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CricketMatchPlayerBattingScoreGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CricketMatchPlayerBattingScoreGroupByOutputType[P]>
            : GetScalarType<T[P], CricketMatchPlayerBattingScoreGroupByOutputType[P]>
        }
      >
    >


  export type CricketMatchPlayerBattingScoreSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    sis_id?: boolean
    runs?: boolean
    balls?: boolean
    fours?: boolean
    sixes?: boolean
    strikeRate?: boolean
    out?: boolean
    played?: boolean
    wicketType?: boolean
    playerId?: boolean
    matchId?: boolean
    teamId?: boolean
    player?: boolean | CricketMatchPlayerBattingScore$playerArgs<ExtArgs>
    match?: boolean | CricketMatchDefaultArgs<ExtArgs>
    team?: boolean | CricketTeamDefaultArgs<ExtArgs>
    match_batters?: boolean | CricketMatchPlayerBattingScore$match_battersArgs<ExtArgs>
    over_striker?: boolean | CricketMatchPlayerBattingScore$over_strikerArgs<ExtArgs>
    over_non_striker?: boolean | CricketMatchPlayerBattingScore$over_non_strikerArgs<ExtArgs>
    _count?: boolean | CricketMatchPlayerBattingScoreCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cricketMatchPlayerBattingScore"]>

  export type CricketMatchPlayerBattingScoreSelectScalar = {
    sis_id?: boolean
    runs?: boolean
    balls?: boolean
    fours?: boolean
    sixes?: boolean
    strikeRate?: boolean
    out?: boolean
    played?: boolean
    wicketType?: boolean
    playerId?: boolean
    matchId?: boolean
    teamId?: boolean
  }

  export type CricketMatchPlayerBattingScoreInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    player?: boolean | CricketMatchPlayerBattingScore$playerArgs<ExtArgs>
    match?: boolean | CricketMatchDefaultArgs<ExtArgs>
    team?: boolean | CricketTeamDefaultArgs<ExtArgs>
    match_batters?: boolean | CricketMatchPlayerBattingScore$match_battersArgs<ExtArgs>
    over_striker?: boolean | CricketMatchPlayerBattingScore$over_strikerArgs<ExtArgs>
    over_non_striker?: boolean | CricketMatchPlayerBattingScore$over_non_strikerArgs<ExtArgs>
    _count?: boolean | CricketMatchPlayerBattingScoreCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CricketMatchPlayerBattingScorePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CricketMatchPlayerBattingScore"
    objects: {
      player: Prisma.$CricketPlayerPayload<ExtArgs> | null
      match: Prisma.$CricketMatchPayload<ExtArgs>
      team: Prisma.$CricketTeamPayload<ExtArgs>
      match_batters: Prisma.$CricketTeamMatchDataPayload<ExtArgs>[]
      over_striker: Prisma.$CricketOverPayload<ExtArgs>[]
      over_non_striker: Prisma.$CricketOverPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      sis_id: string
      runs: number
      balls: number
      fours: number
      sixes: number
      strikeRate: number
      out: boolean
      played: boolean
      wicketType: string | null
      playerId: string | null
      matchId: string
      teamId: string
    }, ExtArgs["result"]["cricketMatchPlayerBattingScore"]>
    composites: {}
  }


  type CricketMatchPlayerBattingScoreGetPayload<S extends boolean | null | undefined | CricketMatchPlayerBattingScoreDefaultArgs> = $Result.GetResult<Prisma.$CricketMatchPlayerBattingScorePayload, S>

  type CricketMatchPlayerBattingScoreCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CricketMatchPlayerBattingScoreFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CricketMatchPlayerBattingScoreCountAggregateInputType | true
    }

  export interface CricketMatchPlayerBattingScoreDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CricketMatchPlayerBattingScore'], meta: { name: 'CricketMatchPlayerBattingScore' } }
    /**
     * Find zero or one CricketMatchPlayerBattingScore that matches the filter.
     * @param {CricketMatchPlayerBattingScoreFindUniqueArgs} args - Arguments to find a CricketMatchPlayerBattingScore
     * @example
     * // Get one CricketMatchPlayerBattingScore
     * const cricketMatchPlayerBattingScore = await prisma.cricketMatchPlayerBattingScore.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CricketMatchPlayerBattingScoreFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CricketMatchPlayerBattingScoreFindUniqueArgs<ExtArgs>>
    ): Prisma__CricketMatchPlayerBattingScoreClient<$Result.GetResult<Prisma.$CricketMatchPlayerBattingScorePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one CricketMatchPlayerBattingScore that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CricketMatchPlayerBattingScoreFindUniqueOrThrowArgs} args - Arguments to find a CricketMatchPlayerBattingScore
     * @example
     * // Get one CricketMatchPlayerBattingScore
     * const cricketMatchPlayerBattingScore = await prisma.cricketMatchPlayerBattingScore.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CricketMatchPlayerBattingScoreFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CricketMatchPlayerBattingScoreFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CricketMatchPlayerBattingScoreClient<$Result.GetResult<Prisma.$CricketMatchPlayerBattingScorePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first CricketMatchPlayerBattingScore that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CricketMatchPlayerBattingScoreFindFirstArgs} args - Arguments to find a CricketMatchPlayerBattingScore
     * @example
     * // Get one CricketMatchPlayerBattingScore
     * const cricketMatchPlayerBattingScore = await prisma.cricketMatchPlayerBattingScore.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CricketMatchPlayerBattingScoreFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CricketMatchPlayerBattingScoreFindFirstArgs<ExtArgs>>
    ): Prisma__CricketMatchPlayerBattingScoreClient<$Result.GetResult<Prisma.$CricketMatchPlayerBattingScorePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first CricketMatchPlayerBattingScore that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CricketMatchPlayerBattingScoreFindFirstOrThrowArgs} args - Arguments to find a CricketMatchPlayerBattingScore
     * @example
     * // Get one CricketMatchPlayerBattingScore
     * const cricketMatchPlayerBattingScore = await prisma.cricketMatchPlayerBattingScore.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CricketMatchPlayerBattingScoreFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CricketMatchPlayerBattingScoreFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CricketMatchPlayerBattingScoreClient<$Result.GetResult<Prisma.$CricketMatchPlayerBattingScorePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more CricketMatchPlayerBattingScores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CricketMatchPlayerBattingScoreFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CricketMatchPlayerBattingScores
     * const cricketMatchPlayerBattingScores = await prisma.cricketMatchPlayerBattingScore.findMany()
     * 
     * // Get first 10 CricketMatchPlayerBattingScores
     * const cricketMatchPlayerBattingScores = await prisma.cricketMatchPlayerBattingScore.findMany({ take: 10 })
     * 
     * // Only select the `sis_id`
     * const cricketMatchPlayerBattingScoreWithSis_idOnly = await prisma.cricketMatchPlayerBattingScore.findMany({ select: { sis_id: true } })
     * 
    **/
    findMany<T extends CricketMatchPlayerBattingScoreFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CricketMatchPlayerBattingScoreFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CricketMatchPlayerBattingScorePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a CricketMatchPlayerBattingScore.
     * @param {CricketMatchPlayerBattingScoreCreateArgs} args - Arguments to create a CricketMatchPlayerBattingScore.
     * @example
     * // Create one CricketMatchPlayerBattingScore
     * const CricketMatchPlayerBattingScore = await prisma.cricketMatchPlayerBattingScore.create({
     *   data: {
     *     // ... data to create a CricketMatchPlayerBattingScore
     *   }
     * })
     * 
    **/
    create<T extends CricketMatchPlayerBattingScoreCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CricketMatchPlayerBattingScoreCreateArgs<ExtArgs>>
    ): Prisma__CricketMatchPlayerBattingScoreClient<$Result.GetResult<Prisma.$CricketMatchPlayerBattingScorePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many CricketMatchPlayerBattingScores.
     *     @param {CricketMatchPlayerBattingScoreCreateManyArgs} args - Arguments to create many CricketMatchPlayerBattingScores.
     *     @example
     *     // Create many CricketMatchPlayerBattingScores
     *     const cricketMatchPlayerBattingScore = await prisma.cricketMatchPlayerBattingScore.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CricketMatchPlayerBattingScoreCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CricketMatchPlayerBattingScoreCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CricketMatchPlayerBattingScore.
     * @param {CricketMatchPlayerBattingScoreDeleteArgs} args - Arguments to delete one CricketMatchPlayerBattingScore.
     * @example
     * // Delete one CricketMatchPlayerBattingScore
     * const CricketMatchPlayerBattingScore = await prisma.cricketMatchPlayerBattingScore.delete({
     *   where: {
     *     // ... filter to delete one CricketMatchPlayerBattingScore
     *   }
     * })
     * 
    **/
    delete<T extends CricketMatchPlayerBattingScoreDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CricketMatchPlayerBattingScoreDeleteArgs<ExtArgs>>
    ): Prisma__CricketMatchPlayerBattingScoreClient<$Result.GetResult<Prisma.$CricketMatchPlayerBattingScorePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one CricketMatchPlayerBattingScore.
     * @param {CricketMatchPlayerBattingScoreUpdateArgs} args - Arguments to update one CricketMatchPlayerBattingScore.
     * @example
     * // Update one CricketMatchPlayerBattingScore
     * const cricketMatchPlayerBattingScore = await prisma.cricketMatchPlayerBattingScore.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CricketMatchPlayerBattingScoreUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CricketMatchPlayerBattingScoreUpdateArgs<ExtArgs>>
    ): Prisma__CricketMatchPlayerBattingScoreClient<$Result.GetResult<Prisma.$CricketMatchPlayerBattingScorePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more CricketMatchPlayerBattingScores.
     * @param {CricketMatchPlayerBattingScoreDeleteManyArgs} args - Arguments to filter CricketMatchPlayerBattingScores to delete.
     * @example
     * // Delete a few CricketMatchPlayerBattingScores
     * const { count } = await prisma.cricketMatchPlayerBattingScore.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CricketMatchPlayerBattingScoreDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CricketMatchPlayerBattingScoreDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CricketMatchPlayerBattingScores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CricketMatchPlayerBattingScoreUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CricketMatchPlayerBattingScores
     * const cricketMatchPlayerBattingScore = await prisma.cricketMatchPlayerBattingScore.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CricketMatchPlayerBattingScoreUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CricketMatchPlayerBattingScoreUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CricketMatchPlayerBattingScore.
     * @param {CricketMatchPlayerBattingScoreUpsertArgs} args - Arguments to update or create a CricketMatchPlayerBattingScore.
     * @example
     * // Update or create a CricketMatchPlayerBattingScore
     * const cricketMatchPlayerBattingScore = await prisma.cricketMatchPlayerBattingScore.upsert({
     *   create: {
     *     // ... data to create a CricketMatchPlayerBattingScore
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CricketMatchPlayerBattingScore we want to update
     *   }
     * })
    **/
    upsert<T extends CricketMatchPlayerBattingScoreUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CricketMatchPlayerBattingScoreUpsertArgs<ExtArgs>>
    ): Prisma__CricketMatchPlayerBattingScoreClient<$Result.GetResult<Prisma.$CricketMatchPlayerBattingScorePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of CricketMatchPlayerBattingScores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CricketMatchPlayerBattingScoreCountArgs} args - Arguments to filter CricketMatchPlayerBattingScores to count.
     * @example
     * // Count the number of CricketMatchPlayerBattingScores
     * const count = await prisma.cricketMatchPlayerBattingScore.count({
     *   where: {
     *     // ... the filter for the CricketMatchPlayerBattingScores we want to count
     *   }
     * })
    **/
    count<T extends CricketMatchPlayerBattingScoreCountArgs>(
      args?: Subset<T, CricketMatchPlayerBattingScoreCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CricketMatchPlayerBattingScoreCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CricketMatchPlayerBattingScore.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CricketMatchPlayerBattingScoreAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CricketMatchPlayerBattingScoreAggregateArgs>(args: Subset<T, CricketMatchPlayerBattingScoreAggregateArgs>): Prisma.PrismaPromise<GetCricketMatchPlayerBattingScoreAggregateType<T>>

    /**
     * Group by CricketMatchPlayerBattingScore.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CricketMatchPlayerBattingScoreGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CricketMatchPlayerBattingScoreGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CricketMatchPlayerBattingScoreGroupByArgs['orderBy'] }
        : { orderBy?: CricketMatchPlayerBattingScoreGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CricketMatchPlayerBattingScoreGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCricketMatchPlayerBattingScoreGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CricketMatchPlayerBattingScore model
   */
  readonly fields: CricketMatchPlayerBattingScoreFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CricketMatchPlayerBattingScore.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CricketMatchPlayerBattingScoreClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    player<T extends CricketMatchPlayerBattingScore$playerArgs<ExtArgs> = {}>(args?: Subset<T, CricketMatchPlayerBattingScore$playerArgs<ExtArgs>>): Prisma__CricketPlayerClient<$Result.GetResult<Prisma.$CricketPlayerPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    match<T extends CricketMatchDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CricketMatchDefaultArgs<ExtArgs>>): Prisma__CricketMatchClient<$Result.GetResult<Prisma.$CricketMatchPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    team<T extends CricketTeamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CricketTeamDefaultArgs<ExtArgs>>): Prisma__CricketTeamClient<$Result.GetResult<Prisma.$CricketTeamPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    match_batters<T extends CricketMatchPlayerBattingScore$match_battersArgs<ExtArgs> = {}>(args?: Subset<T, CricketMatchPlayerBattingScore$match_battersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CricketTeamMatchDataPayload<ExtArgs>, T, 'findMany'> | Null>;

    over_striker<T extends CricketMatchPlayerBattingScore$over_strikerArgs<ExtArgs> = {}>(args?: Subset<T, CricketMatchPlayerBattingScore$over_strikerArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CricketOverPayload<ExtArgs>, T, 'findMany'> | Null>;

    over_non_striker<T extends CricketMatchPlayerBattingScore$over_non_strikerArgs<ExtArgs> = {}>(args?: Subset<T, CricketMatchPlayerBattingScore$over_non_strikerArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CricketOverPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the CricketMatchPlayerBattingScore model
   */ 
  interface CricketMatchPlayerBattingScoreFieldRefs {
    readonly sis_id: FieldRef<"CricketMatchPlayerBattingScore", 'String'>
    readonly runs: FieldRef<"CricketMatchPlayerBattingScore", 'Int'>
    readonly balls: FieldRef<"CricketMatchPlayerBattingScore", 'Int'>
    readonly fours: FieldRef<"CricketMatchPlayerBattingScore", 'Int'>
    readonly sixes: FieldRef<"CricketMatchPlayerBattingScore", 'Int'>
    readonly strikeRate: FieldRef<"CricketMatchPlayerBattingScore", 'Float'>
    readonly out: FieldRef<"CricketMatchPlayerBattingScore", 'Boolean'>
    readonly played: FieldRef<"CricketMatchPlayerBattingScore", 'Boolean'>
    readonly wicketType: FieldRef<"CricketMatchPlayerBattingScore", 'String'>
    readonly playerId: FieldRef<"CricketMatchPlayerBattingScore", 'String'>
    readonly matchId: FieldRef<"CricketMatchPlayerBattingScore", 'String'>
    readonly teamId: FieldRef<"CricketMatchPlayerBattingScore", 'String'>
  }
    

  // Custom InputTypes

  /**
   * CricketMatchPlayerBattingScore findUnique
   */
  export type CricketMatchPlayerBattingScoreFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketMatchPlayerBattingScore
     */
    select?: CricketMatchPlayerBattingScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketMatchPlayerBattingScoreInclude<ExtArgs> | null
    /**
     * Filter, which CricketMatchPlayerBattingScore to fetch.
     */
    where: CricketMatchPlayerBattingScoreWhereUniqueInput
  }


  /**
   * CricketMatchPlayerBattingScore findUniqueOrThrow
   */
  export type CricketMatchPlayerBattingScoreFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketMatchPlayerBattingScore
     */
    select?: CricketMatchPlayerBattingScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketMatchPlayerBattingScoreInclude<ExtArgs> | null
    /**
     * Filter, which CricketMatchPlayerBattingScore to fetch.
     */
    where: CricketMatchPlayerBattingScoreWhereUniqueInput
  }


  /**
   * CricketMatchPlayerBattingScore findFirst
   */
  export type CricketMatchPlayerBattingScoreFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketMatchPlayerBattingScore
     */
    select?: CricketMatchPlayerBattingScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketMatchPlayerBattingScoreInclude<ExtArgs> | null
    /**
     * Filter, which CricketMatchPlayerBattingScore to fetch.
     */
    where?: CricketMatchPlayerBattingScoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CricketMatchPlayerBattingScores to fetch.
     */
    orderBy?: CricketMatchPlayerBattingScoreOrderByWithRelationInput | CricketMatchPlayerBattingScoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CricketMatchPlayerBattingScores.
     */
    cursor?: CricketMatchPlayerBattingScoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CricketMatchPlayerBattingScores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CricketMatchPlayerBattingScores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CricketMatchPlayerBattingScores.
     */
    distinct?: CricketMatchPlayerBattingScoreScalarFieldEnum | CricketMatchPlayerBattingScoreScalarFieldEnum[]
  }


  /**
   * CricketMatchPlayerBattingScore findFirstOrThrow
   */
  export type CricketMatchPlayerBattingScoreFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketMatchPlayerBattingScore
     */
    select?: CricketMatchPlayerBattingScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketMatchPlayerBattingScoreInclude<ExtArgs> | null
    /**
     * Filter, which CricketMatchPlayerBattingScore to fetch.
     */
    where?: CricketMatchPlayerBattingScoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CricketMatchPlayerBattingScores to fetch.
     */
    orderBy?: CricketMatchPlayerBattingScoreOrderByWithRelationInput | CricketMatchPlayerBattingScoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CricketMatchPlayerBattingScores.
     */
    cursor?: CricketMatchPlayerBattingScoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CricketMatchPlayerBattingScores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CricketMatchPlayerBattingScores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CricketMatchPlayerBattingScores.
     */
    distinct?: CricketMatchPlayerBattingScoreScalarFieldEnum | CricketMatchPlayerBattingScoreScalarFieldEnum[]
  }


  /**
   * CricketMatchPlayerBattingScore findMany
   */
  export type CricketMatchPlayerBattingScoreFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketMatchPlayerBattingScore
     */
    select?: CricketMatchPlayerBattingScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketMatchPlayerBattingScoreInclude<ExtArgs> | null
    /**
     * Filter, which CricketMatchPlayerBattingScores to fetch.
     */
    where?: CricketMatchPlayerBattingScoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CricketMatchPlayerBattingScores to fetch.
     */
    orderBy?: CricketMatchPlayerBattingScoreOrderByWithRelationInput | CricketMatchPlayerBattingScoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CricketMatchPlayerBattingScores.
     */
    cursor?: CricketMatchPlayerBattingScoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CricketMatchPlayerBattingScores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CricketMatchPlayerBattingScores.
     */
    skip?: number
    distinct?: CricketMatchPlayerBattingScoreScalarFieldEnum | CricketMatchPlayerBattingScoreScalarFieldEnum[]
  }


  /**
   * CricketMatchPlayerBattingScore create
   */
  export type CricketMatchPlayerBattingScoreCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketMatchPlayerBattingScore
     */
    select?: CricketMatchPlayerBattingScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketMatchPlayerBattingScoreInclude<ExtArgs> | null
    /**
     * The data needed to create a CricketMatchPlayerBattingScore.
     */
    data: XOR<CricketMatchPlayerBattingScoreCreateInput, CricketMatchPlayerBattingScoreUncheckedCreateInput>
  }


  /**
   * CricketMatchPlayerBattingScore createMany
   */
  export type CricketMatchPlayerBattingScoreCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CricketMatchPlayerBattingScores.
     */
    data: CricketMatchPlayerBattingScoreCreateManyInput | CricketMatchPlayerBattingScoreCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * CricketMatchPlayerBattingScore update
   */
  export type CricketMatchPlayerBattingScoreUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketMatchPlayerBattingScore
     */
    select?: CricketMatchPlayerBattingScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketMatchPlayerBattingScoreInclude<ExtArgs> | null
    /**
     * The data needed to update a CricketMatchPlayerBattingScore.
     */
    data: XOR<CricketMatchPlayerBattingScoreUpdateInput, CricketMatchPlayerBattingScoreUncheckedUpdateInput>
    /**
     * Choose, which CricketMatchPlayerBattingScore to update.
     */
    where: CricketMatchPlayerBattingScoreWhereUniqueInput
  }


  /**
   * CricketMatchPlayerBattingScore updateMany
   */
  export type CricketMatchPlayerBattingScoreUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CricketMatchPlayerBattingScores.
     */
    data: XOR<CricketMatchPlayerBattingScoreUpdateManyMutationInput, CricketMatchPlayerBattingScoreUncheckedUpdateManyInput>
    /**
     * Filter which CricketMatchPlayerBattingScores to update
     */
    where?: CricketMatchPlayerBattingScoreWhereInput
  }


  /**
   * CricketMatchPlayerBattingScore upsert
   */
  export type CricketMatchPlayerBattingScoreUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketMatchPlayerBattingScore
     */
    select?: CricketMatchPlayerBattingScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketMatchPlayerBattingScoreInclude<ExtArgs> | null
    /**
     * The filter to search for the CricketMatchPlayerBattingScore to update in case it exists.
     */
    where: CricketMatchPlayerBattingScoreWhereUniqueInput
    /**
     * In case the CricketMatchPlayerBattingScore found by the `where` argument doesn't exist, create a new CricketMatchPlayerBattingScore with this data.
     */
    create: XOR<CricketMatchPlayerBattingScoreCreateInput, CricketMatchPlayerBattingScoreUncheckedCreateInput>
    /**
     * In case the CricketMatchPlayerBattingScore was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CricketMatchPlayerBattingScoreUpdateInput, CricketMatchPlayerBattingScoreUncheckedUpdateInput>
  }


  /**
   * CricketMatchPlayerBattingScore delete
   */
  export type CricketMatchPlayerBattingScoreDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketMatchPlayerBattingScore
     */
    select?: CricketMatchPlayerBattingScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketMatchPlayerBattingScoreInclude<ExtArgs> | null
    /**
     * Filter which CricketMatchPlayerBattingScore to delete.
     */
    where: CricketMatchPlayerBattingScoreWhereUniqueInput
  }


  /**
   * CricketMatchPlayerBattingScore deleteMany
   */
  export type CricketMatchPlayerBattingScoreDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CricketMatchPlayerBattingScores to delete
     */
    where?: CricketMatchPlayerBattingScoreWhereInput
  }


  /**
   * CricketMatchPlayerBattingScore.player
   */
  export type CricketMatchPlayerBattingScore$playerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketPlayer
     */
    select?: CricketPlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketPlayerInclude<ExtArgs> | null
    where?: CricketPlayerWhereInput
  }


  /**
   * CricketMatchPlayerBattingScore.match_batters
   */
  export type CricketMatchPlayerBattingScore$match_battersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketTeamMatchData
     */
    select?: CricketTeamMatchDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketTeamMatchDataInclude<ExtArgs> | null
    where?: CricketTeamMatchDataWhereInput
    orderBy?: CricketTeamMatchDataOrderByWithRelationInput | CricketTeamMatchDataOrderByWithRelationInput[]
    cursor?: CricketTeamMatchDataWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CricketTeamMatchDataScalarFieldEnum | CricketTeamMatchDataScalarFieldEnum[]
  }


  /**
   * CricketMatchPlayerBattingScore.over_striker
   */
  export type CricketMatchPlayerBattingScore$over_strikerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketOver
     */
    select?: CricketOverSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketOverInclude<ExtArgs> | null
    where?: CricketOverWhereInput
    orderBy?: CricketOverOrderByWithRelationInput | CricketOverOrderByWithRelationInput[]
    cursor?: CricketOverWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CricketOverScalarFieldEnum | CricketOverScalarFieldEnum[]
  }


  /**
   * CricketMatchPlayerBattingScore.over_non_striker
   */
  export type CricketMatchPlayerBattingScore$over_non_strikerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketOver
     */
    select?: CricketOverSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketOverInclude<ExtArgs> | null
    where?: CricketOverWhereInput
    orderBy?: CricketOverOrderByWithRelationInput | CricketOverOrderByWithRelationInput[]
    cursor?: CricketOverWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CricketOverScalarFieldEnum | CricketOverScalarFieldEnum[]
  }


  /**
   * CricketMatchPlayerBattingScore without action
   */
  export type CricketMatchPlayerBattingScoreDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketMatchPlayerBattingScore
     */
    select?: CricketMatchPlayerBattingScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketMatchPlayerBattingScoreInclude<ExtArgs> | null
  }



  /**
   * Model CricketMatchPlayerBowlingScore
   */

  export type AggregateCricketMatchPlayerBowlingScore = {
    _count: CricketMatchPlayerBowlingScoreCountAggregateOutputType | null
    _avg: CricketMatchPlayerBowlingScoreAvgAggregateOutputType | null
    _sum: CricketMatchPlayerBowlingScoreSumAggregateOutputType | null
    _min: CricketMatchPlayerBowlingScoreMinAggregateOutputType | null
    _max: CricketMatchPlayerBowlingScoreMaxAggregateOutputType | null
  }

  export type CricketMatchPlayerBowlingScoreAvgAggregateOutputType = {
    runs: number | null
    balls: number | null
    fours: number | null
    sixes: number | null
    wickets: number | null
  }

  export type CricketMatchPlayerBowlingScoreSumAggregateOutputType = {
    runs: number | null
    balls: number | null
    fours: number | null
    sixes: number | null
    wickets: number | null
  }

  export type CricketMatchPlayerBowlingScoreMinAggregateOutputType = {
    sis_id: string | null
    runs: number | null
    balls: number | null
    fours: number | null
    sixes: number | null
    played: boolean | null
    wickets: number | null
    playerId: string | null
    matchId: string | null
    teamId: string | null
  }

  export type CricketMatchPlayerBowlingScoreMaxAggregateOutputType = {
    sis_id: string | null
    runs: number | null
    balls: number | null
    fours: number | null
    sixes: number | null
    played: boolean | null
    wickets: number | null
    playerId: string | null
    matchId: string | null
    teamId: string | null
  }

  export type CricketMatchPlayerBowlingScoreCountAggregateOutputType = {
    sis_id: number
    runs: number
    balls: number
    fours: number
    sixes: number
    played: number
    wickets: number
    playerId: number
    matchId: number
    teamId: number
    _all: number
  }


  export type CricketMatchPlayerBowlingScoreAvgAggregateInputType = {
    runs?: true
    balls?: true
    fours?: true
    sixes?: true
    wickets?: true
  }

  export type CricketMatchPlayerBowlingScoreSumAggregateInputType = {
    runs?: true
    balls?: true
    fours?: true
    sixes?: true
    wickets?: true
  }

  export type CricketMatchPlayerBowlingScoreMinAggregateInputType = {
    sis_id?: true
    runs?: true
    balls?: true
    fours?: true
    sixes?: true
    played?: true
    wickets?: true
    playerId?: true
    matchId?: true
    teamId?: true
  }

  export type CricketMatchPlayerBowlingScoreMaxAggregateInputType = {
    sis_id?: true
    runs?: true
    balls?: true
    fours?: true
    sixes?: true
    played?: true
    wickets?: true
    playerId?: true
    matchId?: true
    teamId?: true
  }

  export type CricketMatchPlayerBowlingScoreCountAggregateInputType = {
    sis_id?: true
    runs?: true
    balls?: true
    fours?: true
    sixes?: true
    played?: true
    wickets?: true
    playerId?: true
    matchId?: true
    teamId?: true
    _all?: true
  }

  export type CricketMatchPlayerBowlingScoreAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CricketMatchPlayerBowlingScore to aggregate.
     */
    where?: CricketMatchPlayerBowlingScoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CricketMatchPlayerBowlingScores to fetch.
     */
    orderBy?: CricketMatchPlayerBowlingScoreOrderByWithRelationInput | CricketMatchPlayerBowlingScoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CricketMatchPlayerBowlingScoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CricketMatchPlayerBowlingScores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CricketMatchPlayerBowlingScores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CricketMatchPlayerBowlingScores
    **/
    _count?: true | CricketMatchPlayerBowlingScoreCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CricketMatchPlayerBowlingScoreAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CricketMatchPlayerBowlingScoreSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CricketMatchPlayerBowlingScoreMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CricketMatchPlayerBowlingScoreMaxAggregateInputType
  }

  export type GetCricketMatchPlayerBowlingScoreAggregateType<T extends CricketMatchPlayerBowlingScoreAggregateArgs> = {
        [P in keyof T & keyof AggregateCricketMatchPlayerBowlingScore]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCricketMatchPlayerBowlingScore[P]>
      : GetScalarType<T[P], AggregateCricketMatchPlayerBowlingScore[P]>
  }




  export type CricketMatchPlayerBowlingScoreGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CricketMatchPlayerBowlingScoreWhereInput
    orderBy?: CricketMatchPlayerBowlingScoreOrderByWithAggregationInput | CricketMatchPlayerBowlingScoreOrderByWithAggregationInput[]
    by: CricketMatchPlayerBowlingScoreScalarFieldEnum[] | CricketMatchPlayerBowlingScoreScalarFieldEnum
    having?: CricketMatchPlayerBowlingScoreScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CricketMatchPlayerBowlingScoreCountAggregateInputType | true
    _avg?: CricketMatchPlayerBowlingScoreAvgAggregateInputType
    _sum?: CricketMatchPlayerBowlingScoreSumAggregateInputType
    _min?: CricketMatchPlayerBowlingScoreMinAggregateInputType
    _max?: CricketMatchPlayerBowlingScoreMaxAggregateInputType
  }

  export type CricketMatchPlayerBowlingScoreGroupByOutputType = {
    sis_id: string
    runs: number
    balls: number
    fours: number
    sixes: number
    played: boolean
    wickets: number
    playerId: string | null
    matchId: string
    teamId: string
    _count: CricketMatchPlayerBowlingScoreCountAggregateOutputType | null
    _avg: CricketMatchPlayerBowlingScoreAvgAggregateOutputType | null
    _sum: CricketMatchPlayerBowlingScoreSumAggregateOutputType | null
    _min: CricketMatchPlayerBowlingScoreMinAggregateOutputType | null
    _max: CricketMatchPlayerBowlingScoreMaxAggregateOutputType | null
  }

  type GetCricketMatchPlayerBowlingScoreGroupByPayload<T extends CricketMatchPlayerBowlingScoreGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CricketMatchPlayerBowlingScoreGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CricketMatchPlayerBowlingScoreGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CricketMatchPlayerBowlingScoreGroupByOutputType[P]>
            : GetScalarType<T[P], CricketMatchPlayerBowlingScoreGroupByOutputType[P]>
        }
      >
    >


  export type CricketMatchPlayerBowlingScoreSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    sis_id?: boolean
    runs?: boolean
    balls?: boolean
    fours?: boolean
    sixes?: boolean
    played?: boolean
    wickets?: boolean
    playerId?: boolean
    matchId?: boolean
    teamId?: boolean
    player?: boolean | CricketMatchPlayerBowlingScore$playerArgs<ExtArgs>
    match?: boolean | CricketMatchDefaultArgs<ExtArgs>
    team?: boolean | CricketTeamDefaultArgs<ExtArgs>
    match_bowlers?: boolean | CricketMatchPlayerBowlingScore$match_bowlersArgs<ExtArgs>
    over_bowler?: boolean | CricketMatchPlayerBowlingScore$over_bowlerArgs<ExtArgs>
    _count?: boolean | CricketMatchPlayerBowlingScoreCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cricketMatchPlayerBowlingScore"]>

  export type CricketMatchPlayerBowlingScoreSelectScalar = {
    sis_id?: boolean
    runs?: boolean
    balls?: boolean
    fours?: boolean
    sixes?: boolean
    played?: boolean
    wickets?: boolean
    playerId?: boolean
    matchId?: boolean
    teamId?: boolean
  }

  export type CricketMatchPlayerBowlingScoreInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    player?: boolean | CricketMatchPlayerBowlingScore$playerArgs<ExtArgs>
    match?: boolean | CricketMatchDefaultArgs<ExtArgs>
    team?: boolean | CricketTeamDefaultArgs<ExtArgs>
    match_bowlers?: boolean | CricketMatchPlayerBowlingScore$match_bowlersArgs<ExtArgs>
    over_bowler?: boolean | CricketMatchPlayerBowlingScore$over_bowlerArgs<ExtArgs>
    _count?: boolean | CricketMatchPlayerBowlingScoreCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CricketMatchPlayerBowlingScorePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CricketMatchPlayerBowlingScore"
    objects: {
      player: Prisma.$CricketPlayerPayload<ExtArgs> | null
      match: Prisma.$CricketMatchPayload<ExtArgs>
      team: Prisma.$CricketTeamPayload<ExtArgs>
      match_bowlers: Prisma.$CricketTeamMatchDataPayload<ExtArgs>[]
      over_bowler: Prisma.$CricketOverPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      sis_id: string
      runs: number
      balls: number
      fours: number
      sixes: number
      played: boolean
      wickets: number
      playerId: string | null
      matchId: string
      teamId: string
    }, ExtArgs["result"]["cricketMatchPlayerBowlingScore"]>
    composites: {}
  }


  type CricketMatchPlayerBowlingScoreGetPayload<S extends boolean | null | undefined | CricketMatchPlayerBowlingScoreDefaultArgs> = $Result.GetResult<Prisma.$CricketMatchPlayerBowlingScorePayload, S>

  type CricketMatchPlayerBowlingScoreCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CricketMatchPlayerBowlingScoreFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CricketMatchPlayerBowlingScoreCountAggregateInputType | true
    }

  export interface CricketMatchPlayerBowlingScoreDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CricketMatchPlayerBowlingScore'], meta: { name: 'CricketMatchPlayerBowlingScore' } }
    /**
     * Find zero or one CricketMatchPlayerBowlingScore that matches the filter.
     * @param {CricketMatchPlayerBowlingScoreFindUniqueArgs} args - Arguments to find a CricketMatchPlayerBowlingScore
     * @example
     * // Get one CricketMatchPlayerBowlingScore
     * const cricketMatchPlayerBowlingScore = await prisma.cricketMatchPlayerBowlingScore.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CricketMatchPlayerBowlingScoreFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CricketMatchPlayerBowlingScoreFindUniqueArgs<ExtArgs>>
    ): Prisma__CricketMatchPlayerBowlingScoreClient<$Result.GetResult<Prisma.$CricketMatchPlayerBowlingScorePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one CricketMatchPlayerBowlingScore that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CricketMatchPlayerBowlingScoreFindUniqueOrThrowArgs} args - Arguments to find a CricketMatchPlayerBowlingScore
     * @example
     * // Get one CricketMatchPlayerBowlingScore
     * const cricketMatchPlayerBowlingScore = await prisma.cricketMatchPlayerBowlingScore.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CricketMatchPlayerBowlingScoreFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CricketMatchPlayerBowlingScoreFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CricketMatchPlayerBowlingScoreClient<$Result.GetResult<Prisma.$CricketMatchPlayerBowlingScorePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first CricketMatchPlayerBowlingScore that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CricketMatchPlayerBowlingScoreFindFirstArgs} args - Arguments to find a CricketMatchPlayerBowlingScore
     * @example
     * // Get one CricketMatchPlayerBowlingScore
     * const cricketMatchPlayerBowlingScore = await prisma.cricketMatchPlayerBowlingScore.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CricketMatchPlayerBowlingScoreFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CricketMatchPlayerBowlingScoreFindFirstArgs<ExtArgs>>
    ): Prisma__CricketMatchPlayerBowlingScoreClient<$Result.GetResult<Prisma.$CricketMatchPlayerBowlingScorePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first CricketMatchPlayerBowlingScore that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CricketMatchPlayerBowlingScoreFindFirstOrThrowArgs} args - Arguments to find a CricketMatchPlayerBowlingScore
     * @example
     * // Get one CricketMatchPlayerBowlingScore
     * const cricketMatchPlayerBowlingScore = await prisma.cricketMatchPlayerBowlingScore.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CricketMatchPlayerBowlingScoreFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CricketMatchPlayerBowlingScoreFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CricketMatchPlayerBowlingScoreClient<$Result.GetResult<Prisma.$CricketMatchPlayerBowlingScorePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more CricketMatchPlayerBowlingScores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CricketMatchPlayerBowlingScoreFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CricketMatchPlayerBowlingScores
     * const cricketMatchPlayerBowlingScores = await prisma.cricketMatchPlayerBowlingScore.findMany()
     * 
     * // Get first 10 CricketMatchPlayerBowlingScores
     * const cricketMatchPlayerBowlingScores = await prisma.cricketMatchPlayerBowlingScore.findMany({ take: 10 })
     * 
     * // Only select the `sis_id`
     * const cricketMatchPlayerBowlingScoreWithSis_idOnly = await prisma.cricketMatchPlayerBowlingScore.findMany({ select: { sis_id: true } })
     * 
    **/
    findMany<T extends CricketMatchPlayerBowlingScoreFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CricketMatchPlayerBowlingScoreFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CricketMatchPlayerBowlingScorePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a CricketMatchPlayerBowlingScore.
     * @param {CricketMatchPlayerBowlingScoreCreateArgs} args - Arguments to create a CricketMatchPlayerBowlingScore.
     * @example
     * // Create one CricketMatchPlayerBowlingScore
     * const CricketMatchPlayerBowlingScore = await prisma.cricketMatchPlayerBowlingScore.create({
     *   data: {
     *     // ... data to create a CricketMatchPlayerBowlingScore
     *   }
     * })
     * 
    **/
    create<T extends CricketMatchPlayerBowlingScoreCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CricketMatchPlayerBowlingScoreCreateArgs<ExtArgs>>
    ): Prisma__CricketMatchPlayerBowlingScoreClient<$Result.GetResult<Prisma.$CricketMatchPlayerBowlingScorePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many CricketMatchPlayerBowlingScores.
     *     @param {CricketMatchPlayerBowlingScoreCreateManyArgs} args - Arguments to create many CricketMatchPlayerBowlingScores.
     *     @example
     *     // Create many CricketMatchPlayerBowlingScores
     *     const cricketMatchPlayerBowlingScore = await prisma.cricketMatchPlayerBowlingScore.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CricketMatchPlayerBowlingScoreCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CricketMatchPlayerBowlingScoreCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CricketMatchPlayerBowlingScore.
     * @param {CricketMatchPlayerBowlingScoreDeleteArgs} args - Arguments to delete one CricketMatchPlayerBowlingScore.
     * @example
     * // Delete one CricketMatchPlayerBowlingScore
     * const CricketMatchPlayerBowlingScore = await prisma.cricketMatchPlayerBowlingScore.delete({
     *   where: {
     *     // ... filter to delete one CricketMatchPlayerBowlingScore
     *   }
     * })
     * 
    **/
    delete<T extends CricketMatchPlayerBowlingScoreDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CricketMatchPlayerBowlingScoreDeleteArgs<ExtArgs>>
    ): Prisma__CricketMatchPlayerBowlingScoreClient<$Result.GetResult<Prisma.$CricketMatchPlayerBowlingScorePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one CricketMatchPlayerBowlingScore.
     * @param {CricketMatchPlayerBowlingScoreUpdateArgs} args - Arguments to update one CricketMatchPlayerBowlingScore.
     * @example
     * // Update one CricketMatchPlayerBowlingScore
     * const cricketMatchPlayerBowlingScore = await prisma.cricketMatchPlayerBowlingScore.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CricketMatchPlayerBowlingScoreUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CricketMatchPlayerBowlingScoreUpdateArgs<ExtArgs>>
    ): Prisma__CricketMatchPlayerBowlingScoreClient<$Result.GetResult<Prisma.$CricketMatchPlayerBowlingScorePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more CricketMatchPlayerBowlingScores.
     * @param {CricketMatchPlayerBowlingScoreDeleteManyArgs} args - Arguments to filter CricketMatchPlayerBowlingScores to delete.
     * @example
     * // Delete a few CricketMatchPlayerBowlingScores
     * const { count } = await prisma.cricketMatchPlayerBowlingScore.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CricketMatchPlayerBowlingScoreDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CricketMatchPlayerBowlingScoreDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CricketMatchPlayerBowlingScores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CricketMatchPlayerBowlingScoreUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CricketMatchPlayerBowlingScores
     * const cricketMatchPlayerBowlingScore = await prisma.cricketMatchPlayerBowlingScore.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CricketMatchPlayerBowlingScoreUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CricketMatchPlayerBowlingScoreUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CricketMatchPlayerBowlingScore.
     * @param {CricketMatchPlayerBowlingScoreUpsertArgs} args - Arguments to update or create a CricketMatchPlayerBowlingScore.
     * @example
     * // Update or create a CricketMatchPlayerBowlingScore
     * const cricketMatchPlayerBowlingScore = await prisma.cricketMatchPlayerBowlingScore.upsert({
     *   create: {
     *     // ... data to create a CricketMatchPlayerBowlingScore
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CricketMatchPlayerBowlingScore we want to update
     *   }
     * })
    **/
    upsert<T extends CricketMatchPlayerBowlingScoreUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CricketMatchPlayerBowlingScoreUpsertArgs<ExtArgs>>
    ): Prisma__CricketMatchPlayerBowlingScoreClient<$Result.GetResult<Prisma.$CricketMatchPlayerBowlingScorePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of CricketMatchPlayerBowlingScores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CricketMatchPlayerBowlingScoreCountArgs} args - Arguments to filter CricketMatchPlayerBowlingScores to count.
     * @example
     * // Count the number of CricketMatchPlayerBowlingScores
     * const count = await prisma.cricketMatchPlayerBowlingScore.count({
     *   where: {
     *     // ... the filter for the CricketMatchPlayerBowlingScores we want to count
     *   }
     * })
    **/
    count<T extends CricketMatchPlayerBowlingScoreCountArgs>(
      args?: Subset<T, CricketMatchPlayerBowlingScoreCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CricketMatchPlayerBowlingScoreCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CricketMatchPlayerBowlingScore.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CricketMatchPlayerBowlingScoreAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CricketMatchPlayerBowlingScoreAggregateArgs>(args: Subset<T, CricketMatchPlayerBowlingScoreAggregateArgs>): Prisma.PrismaPromise<GetCricketMatchPlayerBowlingScoreAggregateType<T>>

    /**
     * Group by CricketMatchPlayerBowlingScore.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CricketMatchPlayerBowlingScoreGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CricketMatchPlayerBowlingScoreGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CricketMatchPlayerBowlingScoreGroupByArgs['orderBy'] }
        : { orderBy?: CricketMatchPlayerBowlingScoreGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CricketMatchPlayerBowlingScoreGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCricketMatchPlayerBowlingScoreGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CricketMatchPlayerBowlingScore model
   */
  readonly fields: CricketMatchPlayerBowlingScoreFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CricketMatchPlayerBowlingScore.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CricketMatchPlayerBowlingScoreClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    player<T extends CricketMatchPlayerBowlingScore$playerArgs<ExtArgs> = {}>(args?: Subset<T, CricketMatchPlayerBowlingScore$playerArgs<ExtArgs>>): Prisma__CricketPlayerClient<$Result.GetResult<Prisma.$CricketPlayerPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    match<T extends CricketMatchDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CricketMatchDefaultArgs<ExtArgs>>): Prisma__CricketMatchClient<$Result.GetResult<Prisma.$CricketMatchPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    team<T extends CricketTeamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CricketTeamDefaultArgs<ExtArgs>>): Prisma__CricketTeamClient<$Result.GetResult<Prisma.$CricketTeamPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    match_bowlers<T extends CricketMatchPlayerBowlingScore$match_bowlersArgs<ExtArgs> = {}>(args?: Subset<T, CricketMatchPlayerBowlingScore$match_bowlersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CricketTeamMatchDataPayload<ExtArgs>, T, 'findMany'> | Null>;

    over_bowler<T extends CricketMatchPlayerBowlingScore$over_bowlerArgs<ExtArgs> = {}>(args?: Subset<T, CricketMatchPlayerBowlingScore$over_bowlerArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CricketOverPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the CricketMatchPlayerBowlingScore model
   */ 
  interface CricketMatchPlayerBowlingScoreFieldRefs {
    readonly sis_id: FieldRef<"CricketMatchPlayerBowlingScore", 'String'>
    readonly runs: FieldRef<"CricketMatchPlayerBowlingScore", 'Int'>
    readonly balls: FieldRef<"CricketMatchPlayerBowlingScore", 'Int'>
    readonly fours: FieldRef<"CricketMatchPlayerBowlingScore", 'Int'>
    readonly sixes: FieldRef<"CricketMatchPlayerBowlingScore", 'Int'>
    readonly played: FieldRef<"CricketMatchPlayerBowlingScore", 'Boolean'>
    readonly wickets: FieldRef<"CricketMatchPlayerBowlingScore", 'Int'>
    readonly playerId: FieldRef<"CricketMatchPlayerBowlingScore", 'String'>
    readonly matchId: FieldRef<"CricketMatchPlayerBowlingScore", 'String'>
    readonly teamId: FieldRef<"CricketMatchPlayerBowlingScore", 'String'>
  }
    

  // Custom InputTypes

  /**
   * CricketMatchPlayerBowlingScore findUnique
   */
  export type CricketMatchPlayerBowlingScoreFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketMatchPlayerBowlingScore
     */
    select?: CricketMatchPlayerBowlingScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketMatchPlayerBowlingScoreInclude<ExtArgs> | null
    /**
     * Filter, which CricketMatchPlayerBowlingScore to fetch.
     */
    where: CricketMatchPlayerBowlingScoreWhereUniqueInput
  }


  /**
   * CricketMatchPlayerBowlingScore findUniqueOrThrow
   */
  export type CricketMatchPlayerBowlingScoreFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketMatchPlayerBowlingScore
     */
    select?: CricketMatchPlayerBowlingScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketMatchPlayerBowlingScoreInclude<ExtArgs> | null
    /**
     * Filter, which CricketMatchPlayerBowlingScore to fetch.
     */
    where: CricketMatchPlayerBowlingScoreWhereUniqueInput
  }


  /**
   * CricketMatchPlayerBowlingScore findFirst
   */
  export type CricketMatchPlayerBowlingScoreFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketMatchPlayerBowlingScore
     */
    select?: CricketMatchPlayerBowlingScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketMatchPlayerBowlingScoreInclude<ExtArgs> | null
    /**
     * Filter, which CricketMatchPlayerBowlingScore to fetch.
     */
    where?: CricketMatchPlayerBowlingScoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CricketMatchPlayerBowlingScores to fetch.
     */
    orderBy?: CricketMatchPlayerBowlingScoreOrderByWithRelationInput | CricketMatchPlayerBowlingScoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CricketMatchPlayerBowlingScores.
     */
    cursor?: CricketMatchPlayerBowlingScoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CricketMatchPlayerBowlingScores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CricketMatchPlayerBowlingScores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CricketMatchPlayerBowlingScores.
     */
    distinct?: CricketMatchPlayerBowlingScoreScalarFieldEnum | CricketMatchPlayerBowlingScoreScalarFieldEnum[]
  }


  /**
   * CricketMatchPlayerBowlingScore findFirstOrThrow
   */
  export type CricketMatchPlayerBowlingScoreFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketMatchPlayerBowlingScore
     */
    select?: CricketMatchPlayerBowlingScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketMatchPlayerBowlingScoreInclude<ExtArgs> | null
    /**
     * Filter, which CricketMatchPlayerBowlingScore to fetch.
     */
    where?: CricketMatchPlayerBowlingScoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CricketMatchPlayerBowlingScores to fetch.
     */
    orderBy?: CricketMatchPlayerBowlingScoreOrderByWithRelationInput | CricketMatchPlayerBowlingScoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CricketMatchPlayerBowlingScores.
     */
    cursor?: CricketMatchPlayerBowlingScoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CricketMatchPlayerBowlingScores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CricketMatchPlayerBowlingScores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CricketMatchPlayerBowlingScores.
     */
    distinct?: CricketMatchPlayerBowlingScoreScalarFieldEnum | CricketMatchPlayerBowlingScoreScalarFieldEnum[]
  }


  /**
   * CricketMatchPlayerBowlingScore findMany
   */
  export type CricketMatchPlayerBowlingScoreFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketMatchPlayerBowlingScore
     */
    select?: CricketMatchPlayerBowlingScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketMatchPlayerBowlingScoreInclude<ExtArgs> | null
    /**
     * Filter, which CricketMatchPlayerBowlingScores to fetch.
     */
    where?: CricketMatchPlayerBowlingScoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CricketMatchPlayerBowlingScores to fetch.
     */
    orderBy?: CricketMatchPlayerBowlingScoreOrderByWithRelationInput | CricketMatchPlayerBowlingScoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CricketMatchPlayerBowlingScores.
     */
    cursor?: CricketMatchPlayerBowlingScoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CricketMatchPlayerBowlingScores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CricketMatchPlayerBowlingScores.
     */
    skip?: number
    distinct?: CricketMatchPlayerBowlingScoreScalarFieldEnum | CricketMatchPlayerBowlingScoreScalarFieldEnum[]
  }


  /**
   * CricketMatchPlayerBowlingScore create
   */
  export type CricketMatchPlayerBowlingScoreCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketMatchPlayerBowlingScore
     */
    select?: CricketMatchPlayerBowlingScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketMatchPlayerBowlingScoreInclude<ExtArgs> | null
    /**
     * The data needed to create a CricketMatchPlayerBowlingScore.
     */
    data: XOR<CricketMatchPlayerBowlingScoreCreateInput, CricketMatchPlayerBowlingScoreUncheckedCreateInput>
  }


  /**
   * CricketMatchPlayerBowlingScore createMany
   */
  export type CricketMatchPlayerBowlingScoreCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CricketMatchPlayerBowlingScores.
     */
    data: CricketMatchPlayerBowlingScoreCreateManyInput | CricketMatchPlayerBowlingScoreCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * CricketMatchPlayerBowlingScore update
   */
  export type CricketMatchPlayerBowlingScoreUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketMatchPlayerBowlingScore
     */
    select?: CricketMatchPlayerBowlingScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketMatchPlayerBowlingScoreInclude<ExtArgs> | null
    /**
     * The data needed to update a CricketMatchPlayerBowlingScore.
     */
    data: XOR<CricketMatchPlayerBowlingScoreUpdateInput, CricketMatchPlayerBowlingScoreUncheckedUpdateInput>
    /**
     * Choose, which CricketMatchPlayerBowlingScore to update.
     */
    where: CricketMatchPlayerBowlingScoreWhereUniqueInput
  }


  /**
   * CricketMatchPlayerBowlingScore updateMany
   */
  export type CricketMatchPlayerBowlingScoreUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CricketMatchPlayerBowlingScores.
     */
    data: XOR<CricketMatchPlayerBowlingScoreUpdateManyMutationInput, CricketMatchPlayerBowlingScoreUncheckedUpdateManyInput>
    /**
     * Filter which CricketMatchPlayerBowlingScores to update
     */
    where?: CricketMatchPlayerBowlingScoreWhereInput
  }


  /**
   * CricketMatchPlayerBowlingScore upsert
   */
  export type CricketMatchPlayerBowlingScoreUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketMatchPlayerBowlingScore
     */
    select?: CricketMatchPlayerBowlingScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketMatchPlayerBowlingScoreInclude<ExtArgs> | null
    /**
     * The filter to search for the CricketMatchPlayerBowlingScore to update in case it exists.
     */
    where: CricketMatchPlayerBowlingScoreWhereUniqueInput
    /**
     * In case the CricketMatchPlayerBowlingScore found by the `where` argument doesn't exist, create a new CricketMatchPlayerBowlingScore with this data.
     */
    create: XOR<CricketMatchPlayerBowlingScoreCreateInput, CricketMatchPlayerBowlingScoreUncheckedCreateInput>
    /**
     * In case the CricketMatchPlayerBowlingScore was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CricketMatchPlayerBowlingScoreUpdateInput, CricketMatchPlayerBowlingScoreUncheckedUpdateInput>
  }


  /**
   * CricketMatchPlayerBowlingScore delete
   */
  export type CricketMatchPlayerBowlingScoreDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketMatchPlayerBowlingScore
     */
    select?: CricketMatchPlayerBowlingScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketMatchPlayerBowlingScoreInclude<ExtArgs> | null
    /**
     * Filter which CricketMatchPlayerBowlingScore to delete.
     */
    where: CricketMatchPlayerBowlingScoreWhereUniqueInput
  }


  /**
   * CricketMatchPlayerBowlingScore deleteMany
   */
  export type CricketMatchPlayerBowlingScoreDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CricketMatchPlayerBowlingScores to delete
     */
    where?: CricketMatchPlayerBowlingScoreWhereInput
  }


  /**
   * CricketMatchPlayerBowlingScore.player
   */
  export type CricketMatchPlayerBowlingScore$playerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketPlayer
     */
    select?: CricketPlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketPlayerInclude<ExtArgs> | null
    where?: CricketPlayerWhereInput
  }


  /**
   * CricketMatchPlayerBowlingScore.match_bowlers
   */
  export type CricketMatchPlayerBowlingScore$match_bowlersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketTeamMatchData
     */
    select?: CricketTeamMatchDataSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketTeamMatchDataInclude<ExtArgs> | null
    where?: CricketTeamMatchDataWhereInput
    orderBy?: CricketTeamMatchDataOrderByWithRelationInput | CricketTeamMatchDataOrderByWithRelationInput[]
    cursor?: CricketTeamMatchDataWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CricketTeamMatchDataScalarFieldEnum | CricketTeamMatchDataScalarFieldEnum[]
  }


  /**
   * CricketMatchPlayerBowlingScore.over_bowler
   */
  export type CricketMatchPlayerBowlingScore$over_bowlerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketOver
     */
    select?: CricketOverSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketOverInclude<ExtArgs> | null
    where?: CricketOverWhereInput
    orderBy?: CricketOverOrderByWithRelationInput | CricketOverOrderByWithRelationInput[]
    cursor?: CricketOverWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CricketOverScalarFieldEnum | CricketOverScalarFieldEnum[]
  }


  /**
   * CricketMatchPlayerBowlingScore without action
   */
  export type CricketMatchPlayerBowlingScoreDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CricketMatchPlayerBowlingScore
     */
    select?: CricketMatchPlayerBowlingScoreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CricketMatchPlayerBowlingScoreInclude<ExtArgs> | null
  }



  /**
   * Model VerificationToken
   */

  export type AggregateVerificationToken = {
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  export type VerificationTokenMinAggregateOutputType = {
    sis_id: string | null
    token: string | null
    createdAt: Date | null
    updatedAt: Date | null
    expiration: Date | null
  }

  export type VerificationTokenMaxAggregateOutputType = {
    sis_id: string | null
    token: string | null
    createdAt: Date | null
    updatedAt: Date | null
    expiration: Date | null
  }

  export type VerificationTokenCountAggregateOutputType = {
    sis_id: number
    token: number
    createdAt: number
    updatedAt: number
    expiration: number
    _all: number
  }


  export type VerificationTokenMinAggregateInputType = {
    sis_id?: true
    token?: true
    createdAt?: true
    updatedAt?: true
    expiration?: true
  }

  export type VerificationTokenMaxAggregateInputType = {
    sis_id?: true
    token?: true
    createdAt?: true
    updatedAt?: true
    expiration?: true
  }

  export type VerificationTokenCountAggregateInputType = {
    sis_id?: true
    token?: true
    createdAt?: true
    updatedAt?: true
    expiration?: true
    _all?: true
  }

  export type VerificationTokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationToken to aggregate.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VerificationTokens
    **/
    _count?: true | VerificationTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VerificationTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type GetVerificationTokenAggregateType<T extends VerificationTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateVerificationToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVerificationToken[P]>
      : GetScalarType<T[P], AggregateVerificationToken[P]>
  }




  export type VerificationTokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VerificationTokenWhereInput
    orderBy?: VerificationTokenOrderByWithAggregationInput | VerificationTokenOrderByWithAggregationInput[]
    by: VerificationTokenScalarFieldEnum[] | VerificationTokenScalarFieldEnum
    having?: VerificationTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VerificationTokenCountAggregateInputType | true
    _min?: VerificationTokenMinAggregateInputType
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type VerificationTokenGroupByOutputType = {
    sis_id: string
    token: string
    createdAt: Date
    updatedAt: Date
    expiration: Date
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  type GetVerificationTokenGroupByPayload<T extends VerificationTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VerificationTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VerificationTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
            : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
        }
      >
    >


  export type VerificationTokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    sis_id?: boolean
    token?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    expiration?: boolean
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectScalar = {
    sis_id?: boolean
    token?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    expiration?: boolean
  }

  export type VerificationTokenInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }


  export type $VerificationTokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VerificationToken"
    objects: {
      user: Prisma.$UsersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      sis_id: string
      token: string
      createdAt: Date
      updatedAt: Date
      expiration: Date
    }, ExtArgs["result"]["verificationToken"]>
    composites: {}
  }


  type VerificationTokenGetPayload<S extends boolean | null | undefined | VerificationTokenDefaultArgs> = $Result.GetResult<Prisma.$VerificationTokenPayload, S>

  type VerificationTokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<VerificationTokenFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: VerificationTokenCountAggregateInputType | true
    }

  export interface VerificationTokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VerificationToken'], meta: { name: 'VerificationToken' } }
    /**
     * Find zero or one VerificationToken that matches the filter.
     * @param {VerificationTokenFindUniqueArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends VerificationTokenFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, VerificationTokenFindUniqueArgs<ExtArgs>>
    ): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one VerificationToken that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {VerificationTokenFindUniqueOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends VerificationTokenFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, VerificationTokenFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first VerificationToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends VerificationTokenFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, VerificationTokenFindFirstArgs<ExtArgs>>
    ): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first VerificationToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends VerificationTokenFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, VerificationTokenFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more VerificationTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany()
     * 
     * // Get first 10 VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany({ take: 10 })
     * 
     * // Only select the `sis_id`
     * const verificationTokenWithSis_idOnly = await prisma.verificationToken.findMany({ select: { sis_id: true } })
     * 
    **/
    findMany<T extends VerificationTokenFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VerificationTokenFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a VerificationToken.
     * @param {VerificationTokenCreateArgs} args - Arguments to create a VerificationToken.
     * @example
     * // Create one VerificationToken
     * const VerificationToken = await prisma.verificationToken.create({
     *   data: {
     *     // ... data to create a VerificationToken
     *   }
     * })
     * 
    **/
    create<T extends VerificationTokenCreateArgs<ExtArgs>>(
      args: SelectSubset<T, VerificationTokenCreateArgs<ExtArgs>>
    ): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many VerificationTokens.
     *     @param {VerificationTokenCreateManyArgs} args - Arguments to create many VerificationTokens.
     *     @example
     *     // Create many VerificationTokens
     *     const verificationToken = await prisma.verificationToken.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends VerificationTokenCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VerificationTokenCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a VerificationToken.
     * @param {VerificationTokenDeleteArgs} args - Arguments to delete one VerificationToken.
     * @example
     * // Delete one VerificationToken
     * const VerificationToken = await prisma.verificationToken.delete({
     *   where: {
     *     // ... filter to delete one VerificationToken
     *   }
     * })
     * 
    **/
    delete<T extends VerificationTokenDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, VerificationTokenDeleteArgs<ExtArgs>>
    ): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one VerificationToken.
     * @param {VerificationTokenUpdateArgs} args - Arguments to update one VerificationToken.
     * @example
     * // Update one VerificationToken
     * const verificationToken = await prisma.verificationToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends VerificationTokenUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, VerificationTokenUpdateArgs<ExtArgs>>
    ): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more VerificationTokens.
     * @param {VerificationTokenDeleteManyArgs} args - Arguments to filter VerificationTokens to delete.
     * @example
     * // Delete a few VerificationTokens
     * const { count } = await prisma.verificationToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends VerificationTokenDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VerificationTokenDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VerificationTokens
     * const verificationToken = await prisma.verificationToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends VerificationTokenUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, VerificationTokenUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one VerificationToken.
     * @param {VerificationTokenUpsertArgs} args - Arguments to update or create a VerificationToken.
     * @example
     * // Update or create a VerificationToken
     * const verificationToken = await prisma.verificationToken.upsert({
     *   create: {
     *     // ... data to create a VerificationToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VerificationToken we want to update
     *   }
     * })
    **/
    upsert<T extends VerificationTokenUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, VerificationTokenUpsertArgs<ExtArgs>>
    ): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenCountArgs} args - Arguments to filter VerificationTokens to count.
     * @example
     * // Count the number of VerificationTokens
     * const count = await prisma.verificationToken.count({
     *   where: {
     *     // ... the filter for the VerificationTokens we want to count
     *   }
     * })
    **/
    count<T extends VerificationTokenCountArgs>(
      args?: Subset<T, VerificationTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VerificationTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VerificationTokenAggregateArgs>(args: Subset<T, VerificationTokenAggregateArgs>): Prisma.PrismaPromise<GetVerificationTokenAggregateType<T>>

    /**
     * Group by VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VerificationTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VerificationTokenGroupByArgs['orderBy'] }
        : { orderBy?: VerificationTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VerificationTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVerificationTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VerificationToken model
   */
  readonly fields: VerificationTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VerificationToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VerificationTokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the VerificationToken model
   */ 
  interface VerificationTokenFieldRefs {
    readonly sis_id: FieldRef<"VerificationToken", 'String'>
    readonly token: FieldRef<"VerificationToken", 'String'>
    readonly createdAt: FieldRef<"VerificationToken", 'DateTime'>
    readonly updatedAt: FieldRef<"VerificationToken", 'DateTime'>
    readonly expiration: FieldRef<"VerificationToken", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * VerificationToken findUnique
   */
  export type VerificationTokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VerificationTokenInclude<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }


  /**
   * VerificationToken findUniqueOrThrow
   */
  export type VerificationTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VerificationTokenInclude<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }


  /**
   * VerificationToken findFirst
   */
  export type VerificationTokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VerificationTokenInclude<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }


  /**
   * VerificationToken findFirstOrThrow
   */
  export type VerificationTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VerificationTokenInclude<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }


  /**
   * VerificationToken findMany
   */
  export type VerificationTokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VerificationTokenInclude<ExtArgs> | null
    /**
     * Filter, which VerificationTokens to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }


  /**
   * VerificationToken create
   */
  export type VerificationTokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VerificationTokenInclude<ExtArgs> | null
    /**
     * The data needed to create a VerificationToken.
     */
    data: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
  }


  /**
   * VerificationToken createMany
   */
  export type VerificationTokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VerificationTokens.
     */
    data: VerificationTokenCreateManyInput | VerificationTokenCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * VerificationToken update
   */
  export type VerificationTokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VerificationTokenInclude<ExtArgs> | null
    /**
     * The data needed to update a VerificationToken.
     */
    data: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
    /**
     * Choose, which VerificationToken to update.
     */
    where: VerificationTokenWhereUniqueInput
  }


  /**
   * VerificationToken updateMany
   */
  export type VerificationTokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VerificationTokens.
     */
    data: XOR<VerificationTokenUpdateManyMutationInput, VerificationTokenUncheckedUpdateManyInput>
    /**
     * Filter which VerificationTokens to update
     */
    where?: VerificationTokenWhereInput
  }


  /**
   * VerificationToken upsert
   */
  export type VerificationTokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VerificationTokenInclude<ExtArgs> | null
    /**
     * The filter to search for the VerificationToken to update in case it exists.
     */
    where: VerificationTokenWhereUniqueInput
    /**
     * In case the VerificationToken found by the `where` argument doesn't exist, create a new VerificationToken with this data.
     */
    create: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
    /**
     * In case the VerificationToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
  }


  /**
   * VerificationToken delete
   */
  export type VerificationTokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VerificationTokenInclude<ExtArgs> | null
    /**
     * Filter which VerificationToken to delete.
     */
    where: VerificationTokenWhereUniqueInput
  }


  /**
   * VerificationToken deleteMany
   */
  export type VerificationTokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationTokens to delete
     */
    where?: VerificationTokenWhereInput
  }


  /**
   * VerificationToken without action
   */
  export type VerificationTokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VerificationTokenInclude<ExtArgs> | null
  }



  /**
   * Model Ticket
   */

  export type AggregateTicket = {
    _count: TicketCountAggregateOutputType | null
    _min: TicketMinAggregateOutputType | null
    _max: TicketMaxAggregateOutputType | null
  }

  export type TicketMinAggregateOutputType = {
    sis_id: string | null
    userEmail: string | null
    userName: string | null
    userId: string | null
    title: string | null
    description: string | null
    visited: boolean | null
    status: string | null
    createdAt: Date | null
    closedAt: Date | null
  }

  export type TicketMaxAggregateOutputType = {
    sis_id: string | null
    userEmail: string | null
    userName: string | null
    userId: string | null
    title: string | null
    description: string | null
    visited: boolean | null
    status: string | null
    createdAt: Date | null
    closedAt: Date | null
  }

  export type TicketCountAggregateOutputType = {
    sis_id: number
    userEmail: number
    userName: number
    userId: number
    title: number
    description: number
    visited: number
    status: number
    createdAt: number
    closedAt: number
    _all: number
  }


  export type TicketMinAggregateInputType = {
    sis_id?: true
    userEmail?: true
    userName?: true
    userId?: true
    title?: true
    description?: true
    visited?: true
    status?: true
    createdAt?: true
    closedAt?: true
  }

  export type TicketMaxAggregateInputType = {
    sis_id?: true
    userEmail?: true
    userName?: true
    userId?: true
    title?: true
    description?: true
    visited?: true
    status?: true
    createdAt?: true
    closedAt?: true
  }

  export type TicketCountAggregateInputType = {
    sis_id?: true
    userEmail?: true
    userName?: true
    userId?: true
    title?: true
    description?: true
    visited?: true
    status?: true
    createdAt?: true
    closedAt?: true
    _all?: true
  }

  export type TicketAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ticket to aggregate.
     */
    where?: TicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tickets to fetch.
     */
    orderBy?: TicketOrderByWithRelationInput | TicketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tickets
    **/
    _count?: true | TicketCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TicketMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TicketMaxAggregateInputType
  }

  export type GetTicketAggregateType<T extends TicketAggregateArgs> = {
        [P in keyof T & keyof AggregateTicket]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTicket[P]>
      : GetScalarType<T[P], AggregateTicket[P]>
  }




  export type TicketGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TicketWhereInput
    orderBy?: TicketOrderByWithAggregationInput | TicketOrderByWithAggregationInput[]
    by: TicketScalarFieldEnum[] | TicketScalarFieldEnum
    having?: TicketScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TicketCountAggregateInputType | true
    _min?: TicketMinAggregateInputType
    _max?: TicketMaxAggregateInputType
  }

  export type TicketGroupByOutputType = {
    sis_id: string
    userEmail: string
    userName: string
    userId: string | null
    title: string
    description: string
    visited: boolean
    status: string
    createdAt: Date
    closedAt: Date | null
    _count: TicketCountAggregateOutputType | null
    _min: TicketMinAggregateOutputType | null
    _max: TicketMaxAggregateOutputType | null
  }

  type GetTicketGroupByPayload<T extends TicketGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TicketGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TicketGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TicketGroupByOutputType[P]>
            : GetScalarType<T[P], TicketGroupByOutputType[P]>
        }
      >
    >


  export type TicketSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    sis_id?: boolean
    userEmail?: boolean
    userName?: boolean
    userId?: boolean
    title?: boolean
    description?: boolean
    visited?: boolean
    status?: boolean
    createdAt?: boolean
    closedAt?: boolean
    user?: boolean | Ticket$userArgs<ExtArgs>
  }, ExtArgs["result"]["ticket"]>

  export type TicketSelectScalar = {
    sis_id?: boolean
    userEmail?: boolean
    userName?: boolean
    userId?: boolean
    title?: boolean
    description?: boolean
    visited?: boolean
    status?: boolean
    createdAt?: boolean
    closedAt?: boolean
  }

  export type TicketInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Ticket$userArgs<ExtArgs>
  }


  export type $TicketPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Ticket"
    objects: {
      user: Prisma.$UsersPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      sis_id: string
      userEmail: string
      userName: string
      userId: string | null
      title: string
      description: string
      visited: boolean
      status: string
      createdAt: Date
      closedAt: Date | null
    }, ExtArgs["result"]["ticket"]>
    composites: {}
  }


  type TicketGetPayload<S extends boolean | null | undefined | TicketDefaultArgs> = $Result.GetResult<Prisma.$TicketPayload, S>

  type TicketCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TicketFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TicketCountAggregateInputType | true
    }

  export interface TicketDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Ticket'], meta: { name: 'Ticket' } }
    /**
     * Find zero or one Ticket that matches the filter.
     * @param {TicketFindUniqueArgs} args - Arguments to find a Ticket
     * @example
     * // Get one Ticket
     * const ticket = await prisma.ticket.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TicketFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TicketFindUniqueArgs<ExtArgs>>
    ): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Ticket that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TicketFindUniqueOrThrowArgs} args - Arguments to find a Ticket
     * @example
     * // Get one Ticket
     * const ticket = await prisma.ticket.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TicketFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TicketFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Ticket that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketFindFirstArgs} args - Arguments to find a Ticket
     * @example
     * // Get one Ticket
     * const ticket = await prisma.ticket.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TicketFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TicketFindFirstArgs<ExtArgs>>
    ): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Ticket that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketFindFirstOrThrowArgs} args - Arguments to find a Ticket
     * @example
     * // Get one Ticket
     * const ticket = await prisma.ticket.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TicketFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TicketFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Tickets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tickets
     * const tickets = await prisma.ticket.findMany()
     * 
     * // Get first 10 Tickets
     * const tickets = await prisma.ticket.findMany({ take: 10 })
     * 
     * // Only select the `sis_id`
     * const ticketWithSis_idOnly = await prisma.ticket.findMany({ select: { sis_id: true } })
     * 
    **/
    findMany<T extends TicketFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TicketFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Ticket.
     * @param {TicketCreateArgs} args - Arguments to create a Ticket.
     * @example
     * // Create one Ticket
     * const Ticket = await prisma.ticket.create({
     *   data: {
     *     // ... data to create a Ticket
     *   }
     * })
     * 
    **/
    create<T extends TicketCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TicketCreateArgs<ExtArgs>>
    ): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Tickets.
     *     @param {TicketCreateManyArgs} args - Arguments to create many Tickets.
     *     @example
     *     // Create many Tickets
     *     const ticket = await prisma.ticket.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TicketCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TicketCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Ticket.
     * @param {TicketDeleteArgs} args - Arguments to delete one Ticket.
     * @example
     * // Delete one Ticket
     * const Ticket = await prisma.ticket.delete({
     *   where: {
     *     // ... filter to delete one Ticket
     *   }
     * })
     * 
    **/
    delete<T extends TicketDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TicketDeleteArgs<ExtArgs>>
    ): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Ticket.
     * @param {TicketUpdateArgs} args - Arguments to update one Ticket.
     * @example
     * // Update one Ticket
     * const ticket = await prisma.ticket.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TicketUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TicketUpdateArgs<ExtArgs>>
    ): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Tickets.
     * @param {TicketDeleteManyArgs} args - Arguments to filter Tickets to delete.
     * @example
     * // Delete a few Tickets
     * const { count } = await prisma.ticket.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TicketDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TicketDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tickets
     * const ticket = await prisma.ticket.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TicketUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TicketUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Ticket.
     * @param {TicketUpsertArgs} args - Arguments to update or create a Ticket.
     * @example
     * // Update or create a Ticket
     * const ticket = await prisma.ticket.upsert({
     *   create: {
     *     // ... data to create a Ticket
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ticket we want to update
     *   }
     * })
    **/
    upsert<T extends TicketUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TicketUpsertArgs<ExtArgs>>
    ): Prisma__TicketClient<$Result.GetResult<Prisma.$TicketPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Tickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketCountArgs} args - Arguments to filter Tickets to count.
     * @example
     * // Count the number of Tickets
     * const count = await prisma.ticket.count({
     *   where: {
     *     // ... the filter for the Tickets we want to count
     *   }
     * })
    **/
    count<T extends TicketCountArgs>(
      args?: Subset<T, TicketCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TicketCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ticket.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TicketAggregateArgs>(args: Subset<T, TicketAggregateArgs>): Prisma.PrismaPromise<GetTicketAggregateType<T>>

    /**
     * Group by Ticket.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TicketGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TicketGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TicketGroupByArgs['orderBy'] }
        : { orderBy?: TicketGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TicketGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTicketGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Ticket model
   */
  readonly fields: TicketFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Ticket.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TicketClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends Ticket$userArgs<ExtArgs> = {}>(args?: Subset<T, Ticket$userArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Ticket model
   */ 
  interface TicketFieldRefs {
    readonly sis_id: FieldRef<"Ticket", 'String'>
    readonly userEmail: FieldRef<"Ticket", 'String'>
    readonly userName: FieldRef<"Ticket", 'String'>
    readonly userId: FieldRef<"Ticket", 'String'>
    readonly title: FieldRef<"Ticket", 'String'>
    readonly description: FieldRef<"Ticket", 'String'>
    readonly visited: FieldRef<"Ticket", 'Boolean'>
    readonly status: FieldRef<"Ticket", 'String'>
    readonly createdAt: FieldRef<"Ticket", 'DateTime'>
    readonly closedAt: FieldRef<"Ticket", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Ticket findUnique
   */
  export type TicketFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TicketInclude<ExtArgs> | null
    /**
     * Filter, which Ticket to fetch.
     */
    where: TicketWhereUniqueInput
  }


  /**
   * Ticket findUniqueOrThrow
   */
  export type TicketFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TicketInclude<ExtArgs> | null
    /**
     * Filter, which Ticket to fetch.
     */
    where: TicketWhereUniqueInput
  }


  /**
   * Ticket findFirst
   */
  export type TicketFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TicketInclude<ExtArgs> | null
    /**
     * Filter, which Ticket to fetch.
     */
    where?: TicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tickets to fetch.
     */
    orderBy?: TicketOrderByWithRelationInput | TicketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tickets.
     */
    cursor?: TicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tickets.
     */
    distinct?: TicketScalarFieldEnum | TicketScalarFieldEnum[]
  }


  /**
   * Ticket findFirstOrThrow
   */
  export type TicketFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TicketInclude<ExtArgs> | null
    /**
     * Filter, which Ticket to fetch.
     */
    where?: TicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tickets to fetch.
     */
    orderBy?: TicketOrderByWithRelationInput | TicketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tickets.
     */
    cursor?: TicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tickets.
     */
    distinct?: TicketScalarFieldEnum | TicketScalarFieldEnum[]
  }


  /**
   * Ticket findMany
   */
  export type TicketFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TicketInclude<ExtArgs> | null
    /**
     * Filter, which Tickets to fetch.
     */
    where?: TicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tickets to fetch.
     */
    orderBy?: TicketOrderByWithRelationInput | TicketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tickets.
     */
    cursor?: TicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tickets.
     */
    skip?: number
    distinct?: TicketScalarFieldEnum | TicketScalarFieldEnum[]
  }


  /**
   * Ticket create
   */
  export type TicketCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TicketInclude<ExtArgs> | null
    /**
     * The data needed to create a Ticket.
     */
    data: XOR<TicketCreateInput, TicketUncheckedCreateInput>
  }


  /**
   * Ticket createMany
   */
  export type TicketCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tickets.
     */
    data: TicketCreateManyInput | TicketCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Ticket update
   */
  export type TicketUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TicketInclude<ExtArgs> | null
    /**
     * The data needed to update a Ticket.
     */
    data: XOR<TicketUpdateInput, TicketUncheckedUpdateInput>
    /**
     * Choose, which Ticket to update.
     */
    where: TicketWhereUniqueInput
  }


  /**
   * Ticket updateMany
   */
  export type TicketUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tickets.
     */
    data: XOR<TicketUpdateManyMutationInput, TicketUncheckedUpdateManyInput>
    /**
     * Filter which Tickets to update
     */
    where?: TicketWhereInput
  }


  /**
   * Ticket upsert
   */
  export type TicketUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TicketInclude<ExtArgs> | null
    /**
     * The filter to search for the Ticket to update in case it exists.
     */
    where: TicketWhereUniqueInput
    /**
     * In case the Ticket found by the `where` argument doesn't exist, create a new Ticket with this data.
     */
    create: XOR<TicketCreateInput, TicketUncheckedCreateInput>
    /**
     * In case the Ticket was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TicketUpdateInput, TicketUncheckedUpdateInput>
  }


  /**
   * Ticket delete
   */
  export type TicketDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TicketInclude<ExtArgs> | null
    /**
     * Filter which Ticket to delete.
     */
    where: TicketWhereUniqueInput
  }


  /**
   * Ticket deleteMany
   */
  export type TicketDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tickets to delete
     */
    where?: TicketWhereInput
  }


  /**
   * Ticket.user
   */
  export type Ticket$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    where?: UsersWhereInput
  }


  /**
   * Ticket without action
   */
  export type TicketDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ticket
     */
    select?: TicketSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TicketInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const OTPScalarFieldEnum: {
    otp: 'otp',
    email: 'email',
    createdAt: 'createdAt'
  };

  export type OTPScalarFieldEnum = (typeof OTPScalarFieldEnum)[keyof typeof OTPScalarFieldEnum]


  export const UsersScalarFieldEnum: {
    userId: 'userId',
    email: 'email',
    name: 'name',
    password: 'password',
    token: 'token',
    roles: 'roles',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    rec_status: 'rec_status',
    cricketPlayerId: 'cricketPlayerId'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const CricketTeamScalarFieldEnum: {
    sis_id: 'sis_id',
    name: 'name',
    year: 'year'
  };

  export type CricketTeamScalarFieldEnum = (typeof CricketTeamScalarFieldEnum)[keyof typeof CricketTeamScalarFieldEnum]


  export const CricketPlayerScalarFieldEnum: {
    sis_id: 'sis_id',
    userId: 'userId',
    teamId: 'teamId',
    isSelected: 'isSelected',
    isCaptain: 'isCaptain',
    isWicketKeeper: 'isWicketKeeper',
    isAllRounder: 'isAllRounder',
    isBatsman: 'isBatsman',
    isBowler: 'isBowler',
    runs: 'runs',
    noOfMatchesPlayed: 'noOfMatchesPlayed',
    noOfSixes: 'noOfSixes',
    noOfFours: 'noOfFours',
    noOfWicketsTaken: 'noOfWicketsTaken',
    noOfHalfCenturies: 'noOfHalfCenturies',
    noOfCenturies: 'noOfCenturies',
    noOfWickets: 'noOfWickets'
  };

  export type CricketPlayerScalarFieldEnum = (typeof CricketPlayerScalarFieldEnum)[keyof typeof CricketPlayerScalarFieldEnum]


  export const CricketMatchScalarFieldEnum: {
    sis_id: 'sis_id',
    played: 'played',
    tossWonBy: 'tossWonBy',
    tossDecision: 'tossDecision',
    date: 'date',
    venue: 'venue',
    year: 'year',
    dependency: 'dependency',
    dependentOn: 'dependentOn',
    team1Wickets: 'team1Wickets',
    team2Wickets: 'team2Wickets',
    team1Runs: 'team1Runs',
    team2Runs: 'team2Runs',
    team1Balls: 'team1Balls',
    team2Balls: 'team2Balls',
    overs: 'overs',
    powerPlayOvers: 'powerPlayOvers',
    overPerBowler: 'overPerBowler',
    currentOverId: 'currentOverId',
    wonBy: 'wonBy',
    teamAId: 'teamAId',
    teamBId: 'teamBId',
    teamAScoreId: 'teamAScoreId',
    teamBScoreId: 'teamBScoreId',
    battingTeamScoreId: 'battingTeamScoreId',
    bowlingTeamScoreId: 'bowlingTeamScoreId'
  };

  export type CricketMatchScalarFieldEnum = (typeof CricketMatchScalarFieldEnum)[keyof typeof CricketMatchScalarFieldEnum]


  export const CricketTeamMatchDataScalarFieldEnum: {
    sis_id: 'sis_id',
    teamId: 'teamId',
    matchId: 'matchId',
    name: 'name',
    runs: 'runs',
    wideRuns: 'wideRuns',
    nbRuns: 'nbRuns',
    byeRuns: 'byeRuns',
    lbRuns: 'lbRuns',
    wickets: 'wickets',
    balls: 'balls'
  };

  export type CricketTeamMatchDataScalarFieldEnum = (typeof CricketTeamMatchDataScalarFieldEnum)[keyof typeof CricketTeamMatchDataScalarFieldEnum]


  export const CricketOverScalarFieldEnum: {
    sis_id: 'sis_id',
    matchId: 'matchId',
    runs: 'runs',
    wickets: 'wickets',
    totalBalls: 'totalBalls',
    validBalls: 'validBalls',
    strikerScoreId: 'strikerScoreId',
    nonStrikerScoreId: 'nonStrikerScoreId',
    bowlerScoreId: 'bowlerScoreId'
  };

  export type CricketOverScalarFieldEnum = (typeof CricketOverScalarFieldEnum)[keyof typeof CricketOverScalarFieldEnum]


  export const CricketOverBallScalarFieldEnum: {
    sis_id: 'sis_id',
    overId: 'overId',
    ballNo: 'ballNo',
    runs: 'runs',
    wicket: 'wicket',
    ballType: 'ballType',
    extras: 'extras',
    wicketType: 'wicketType',
    deliveryType: 'deliveryType'
  };

  export type CricketOverBallScalarFieldEnum = (typeof CricketOverBallScalarFieldEnum)[keyof typeof CricketOverBallScalarFieldEnum]


  export const CricketMatchPlayerBattingScoreScalarFieldEnum: {
    sis_id: 'sis_id',
    runs: 'runs',
    balls: 'balls',
    fours: 'fours',
    sixes: 'sixes',
    strikeRate: 'strikeRate',
    out: 'out',
    played: 'played',
    wicketType: 'wicketType',
    playerId: 'playerId',
    matchId: 'matchId',
    teamId: 'teamId'
  };

  export type CricketMatchPlayerBattingScoreScalarFieldEnum = (typeof CricketMatchPlayerBattingScoreScalarFieldEnum)[keyof typeof CricketMatchPlayerBattingScoreScalarFieldEnum]


  export const CricketMatchPlayerBowlingScoreScalarFieldEnum: {
    sis_id: 'sis_id',
    runs: 'runs',
    balls: 'balls',
    fours: 'fours',
    sixes: 'sixes',
    played: 'played',
    wickets: 'wickets',
    playerId: 'playerId',
    matchId: 'matchId',
    teamId: 'teamId'
  };

  export type CricketMatchPlayerBowlingScoreScalarFieldEnum = (typeof CricketMatchPlayerBowlingScoreScalarFieldEnum)[keyof typeof CricketMatchPlayerBowlingScoreScalarFieldEnum]


  export const VerificationTokenScalarFieldEnum: {
    sis_id: 'sis_id',
    token: 'token',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    expiration: 'expiration'
  };

  export type VerificationTokenScalarFieldEnum = (typeof VerificationTokenScalarFieldEnum)[keyof typeof VerificationTokenScalarFieldEnum]


  export const TicketScalarFieldEnum: {
    sis_id: 'sis_id',
    userEmail: 'userEmail',
    userName: 'userName',
    userId: 'userId',
    title: 'title',
    description: 'description',
    visited: 'visited',
    status: 'status',
    createdAt: 'createdAt',
    closedAt: 'closedAt'
  };

  export type TicketScalarFieldEnum = (typeof TicketScalarFieldEnum)[keyof typeof TicketScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'BallType'
   */
  export type EnumBallTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BallType'>
    


  /**
   * Reference to a field of type 'BallType[]'
   */
  export type ListEnumBallTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BallType[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type OTPWhereInput = {
    AND?: OTPWhereInput | OTPWhereInput[]
    OR?: OTPWhereInput[]
    NOT?: OTPWhereInput | OTPWhereInput[]
    otp?: StringFilter<"OTP"> | string
    email?: StringFilter<"OTP"> | string
    createdAt?: DateTimeFilter<"OTP"> | Date | string
  }

  export type OTPOrderByWithRelationInput = {
    otp?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
  }

  export type OTPWhereUniqueInput = Prisma.AtLeast<{
    otp?: string
    AND?: OTPWhereInput | OTPWhereInput[]
    OR?: OTPWhereInput[]
    NOT?: OTPWhereInput | OTPWhereInput[]
    email?: StringFilter<"OTP"> | string
    createdAt?: DateTimeFilter<"OTP"> | Date | string
  }, "otp">

  export type OTPOrderByWithAggregationInput = {
    otp?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    _count?: OTPCountOrderByAggregateInput
    _max?: OTPMaxOrderByAggregateInput
    _min?: OTPMinOrderByAggregateInput
  }

  export type OTPScalarWhereWithAggregatesInput = {
    AND?: OTPScalarWhereWithAggregatesInput | OTPScalarWhereWithAggregatesInput[]
    OR?: OTPScalarWhereWithAggregatesInput[]
    NOT?: OTPScalarWhereWithAggregatesInput | OTPScalarWhereWithAggregatesInput[]
    otp?: StringWithAggregatesFilter<"OTP"> | string
    email?: StringWithAggregatesFilter<"OTP"> | string
    createdAt?: DateTimeWithAggregatesFilter<"OTP"> | Date | string
  }

  export type UsersWhereInput = {
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    userId?: StringFilter<"Users"> | string
    email?: StringFilter<"Users"> | string
    name?: StringNullableFilter<"Users"> | string | null
    password?: StringNullableFilter<"Users"> | string | null
    token?: StringNullableFilter<"Users"> | string | null
    roles?: EnumRoleNullableListFilter<"Users">
    createdAt?: DateTimeFilter<"Users"> | Date | string
    updatedAt?: DateTimeFilter<"Users"> | Date | string
    rec_status?: BoolFilter<"Users"> | boolean
    cricketPlayerId?: StringNullableFilter<"Users"> | string | null
    cricketPlayer?: XOR<CricketPlayerNullableRelationFilter, CricketPlayerWhereInput> | null
    cricket_players?: CricketPlayerListRelationFilter
    verification_token?: VerificationTokenListRelationFilter
    user_tickets?: TicketListRelationFilter
  }

  export type UsersOrderByWithRelationInput = {
    userId?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    token?: SortOrderInput | SortOrder
    roles?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    rec_status?: SortOrder
    cricketPlayerId?: SortOrderInput | SortOrder
    cricketPlayer?: CricketPlayerOrderByWithRelationInput
    cricket_players?: CricketPlayerOrderByRelationAggregateInput
    verification_token?: VerificationTokenOrderByRelationAggregateInput
    user_tickets?: TicketOrderByRelationAggregateInput
  }

  export type UsersWhereUniqueInput = Prisma.AtLeast<{
    userId?: string
    email?: string
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    name?: StringNullableFilter<"Users"> | string | null
    password?: StringNullableFilter<"Users"> | string | null
    token?: StringNullableFilter<"Users"> | string | null
    roles?: EnumRoleNullableListFilter<"Users">
    createdAt?: DateTimeFilter<"Users"> | Date | string
    updatedAt?: DateTimeFilter<"Users"> | Date | string
    rec_status?: BoolFilter<"Users"> | boolean
    cricketPlayerId?: StringNullableFilter<"Users"> | string | null
    cricketPlayer?: XOR<CricketPlayerNullableRelationFilter, CricketPlayerWhereInput> | null
    cricket_players?: CricketPlayerListRelationFilter
    verification_token?: VerificationTokenListRelationFilter
    user_tickets?: TicketListRelationFilter
  }, "userId" | "userId" | "email">

  export type UsersOrderByWithAggregationInput = {
    userId?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    token?: SortOrderInput | SortOrder
    roles?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    rec_status?: SortOrder
    cricketPlayerId?: SortOrderInput | SortOrder
    _count?: UsersCountOrderByAggregateInput
    _max?: UsersMaxOrderByAggregateInput
    _min?: UsersMinOrderByAggregateInput
  }

  export type UsersScalarWhereWithAggregatesInput = {
    AND?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    OR?: UsersScalarWhereWithAggregatesInput[]
    NOT?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    userId?: StringWithAggregatesFilter<"Users"> | string
    email?: StringWithAggregatesFilter<"Users"> | string
    name?: StringNullableWithAggregatesFilter<"Users"> | string | null
    password?: StringNullableWithAggregatesFilter<"Users"> | string | null
    token?: StringNullableWithAggregatesFilter<"Users"> | string | null
    roles?: EnumRoleNullableListFilter<"Users">
    createdAt?: DateTimeWithAggregatesFilter<"Users"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Users"> | Date | string
    rec_status?: BoolWithAggregatesFilter<"Users"> | boolean
    cricketPlayerId?: StringNullableWithAggregatesFilter<"Users"> | string | null
  }

  export type CricketTeamWhereInput = {
    AND?: CricketTeamWhereInput | CricketTeamWhereInput[]
    OR?: CricketTeamWhereInput[]
    NOT?: CricketTeamWhereInput | CricketTeamWhereInput[]
    sis_id?: StringFilter<"CricketTeam"> | string
    name?: StringFilter<"CricketTeam"> | string
    year?: StringFilter<"CricketTeam"> | string
    players?: CricketPlayerListRelationFilter
    winning_team?: CricketMatchListRelationFilter
    toss_winning_team?: CricketMatchListRelationFilter
    player_team?: CricketPlayerListRelationFilter
    cricket_match_teamData?: CricketTeamMatchDataListRelationFilter
    cricket_match_player_batting_score?: CricketMatchPlayerBattingScoreListRelationFilter
    cricket_match_player_bowling_score?: CricketMatchPlayerBowlingScoreListRelationFilter
    CricketMatchTeamA?: CricketMatchListRelationFilter
    CricketMatchTeamB?: CricketMatchListRelationFilter
  }

  export type CricketTeamOrderByWithRelationInput = {
    sis_id?: SortOrder
    name?: SortOrder
    year?: SortOrder
    players?: CricketPlayerOrderByRelationAggregateInput
    winning_team?: CricketMatchOrderByRelationAggregateInput
    toss_winning_team?: CricketMatchOrderByRelationAggregateInput
    player_team?: CricketPlayerOrderByRelationAggregateInput
    cricket_match_teamData?: CricketTeamMatchDataOrderByRelationAggregateInput
    cricket_match_player_batting_score?: CricketMatchPlayerBattingScoreOrderByRelationAggregateInput
    cricket_match_player_bowling_score?: CricketMatchPlayerBowlingScoreOrderByRelationAggregateInput
    CricketMatchTeamA?: CricketMatchOrderByRelationAggregateInput
    CricketMatchTeamB?: CricketMatchOrderByRelationAggregateInput
  }

  export type CricketTeamWhereUniqueInput = Prisma.AtLeast<{
    sis_id?: string
    AND?: CricketTeamWhereInput | CricketTeamWhereInput[]
    OR?: CricketTeamWhereInput[]
    NOT?: CricketTeamWhereInput | CricketTeamWhereInput[]
    name?: StringFilter<"CricketTeam"> | string
    year?: StringFilter<"CricketTeam"> | string
    players?: CricketPlayerListRelationFilter
    winning_team?: CricketMatchListRelationFilter
    toss_winning_team?: CricketMatchListRelationFilter
    player_team?: CricketPlayerListRelationFilter
    cricket_match_teamData?: CricketTeamMatchDataListRelationFilter
    cricket_match_player_batting_score?: CricketMatchPlayerBattingScoreListRelationFilter
    cricket_match_player_bowling_score?: CricketMatchPlayerBowlingScoreListRelationFilter
    CricketMatchTeamA?: CricketMatchListRelationFilter
    CricketMatchTeamB?: CricketMatchListRelationFilter
  }, "sis_id">

  export type CricketTeamOrderByWithAggregationInput = {
    sis_id?: SortOrder
    name?: SortOrder
    year?: SortOrder
    _count?: CricketTeamCountOrderByAggregateInput
    _max?: CricketTeamMaxOrderByAggregateInput
    _min?: CricketTeamMinOrderByAggregateInput
  }

  export type CricketTeamScalarWhereWithAggregatesInput = {
    AND?: CricketTeamScalarWhereWithAggregatesInput | CricketTeamScalarWhereWithAggregatesInput[]
    OR?: CricketTeamScalarWhereWithAggregatesInput[]
    NOT?: CricketTeamScalarWhereWithAggregatesInput | CricketTeamScalarWhereWithAggregatesInput[]
    sis_id?: StringWithAggregatesFilter<"CricketTeam"> | string
    name?: StringWithAggregatesFilter<"CricketTeam"> | string
    year?: StringWithAggregatesFilter<"CricketTeam"> | string
  }

  export type CricketPlayerWhereInput = {
    AND?: CricketPlayerWhereInput | CricketPlayerWhereInput[]
    OR?: CricketPlayerWhereInput[]
    NOT?: CricketPlayerWhereInput | CricketPlayerWhereInput[]
    sis_id?: StringFilter<"CricketPlayer"> | string
    userId?: StringFilter<"CricketPlayer"> | string
    teamId?: StringNullableFilter<"CricketPlayer"> | string | null
    isSelected?: BoolFilter<"CricketPlayer"> | boolean
    isCaptain?: BoolFilter<"CricketPlayer"> | boolean
    isWicketKeeper?: BoolFilter<"CricketPlayer"> | boolean
    isAllRounder?: BoolFilter<"CricketPlayer"> | boolean
    isBatsman?: BoolFilter<"CricketPlayer"> | boolean
    isBowler?: BoolFilter<"CricketPlayer"> | boolean
    runs?: IntFilter<"CricketPlayer"> | number
    noOfMatchesPlayed?: IntFilter<"CricketPlayer"> | number
    noOfSixes?: IntFilter<"CricketPlayer"> | number
    noOfFours?: IntFilter<"CricketPlayer"> | number
    noOfWicketsTaken?: IntFilter<"CricketPlayer"> | number
    noOfHalfCenturies?: IntFilter<"CricketPlayer"> | number
    noOfCenturies?: IntFilter<"CricketPlayer"> | number
    noOfWickets?: IntFilter<"CricketPlayer"> | number
    user?: XOR<UsersRelationFilter, UsersWhereInput>
    matches?: CricketMatchListRelationFilter
    team?: XOR<CricketTeamNullableRelationFilter, CricketTeamWhereInput> | null
    user_cricket_players?: UsersListRelationFilter
    team_players?: CricketTeamListRelationFilter
    batting_score_player?: CricketMatchPlayerBattingScoreListRelationFilter
    bowling_score_player?: CricketMatchPlayerBowlingScoreListRelationFilter
  }

  export type CricketPlayerOrderByWithRelationInput = {
    sis_id?: SortOrder
    userId?: SortOrder
    teamId?: SortOrderInput | SortOrder
    isSelected?: SortOrder
    isCaptain?: SortOrder
    isWicketKeeper?: SortOrder
    isAllRounder?: SortOrder
    isBatsman?: SortOrder
    isBowler?: SortOrder
    runs?: SortOrder
    noOfMatchesPlayed?: SortOrder
    noOfSixes?: SortOrder
    noOfFours?: SortOrder
    noOfWicketsTaken?: SortOrder
    noOfHalfCenturies?: SortOrder
    noOfCenturies?: SortOrder
    noOfWickets?: SortOrder
    user?: UsersOrderByWithRelationInput
    matches?: CricketMatchOrderByRelationAggregateInput
    team?: CricketTeamOrderByWithRelationInput
    user_cricket_players?: UsersOrderByRelationAggregateInput
    team_players?: CricketTeamOrderByRelationAggregateInput
    batting_score_player?: CricketMatchPlayerBattingScoreOrderByRelationAggregateInput
    bowling_score_player?: CricketMatchPlayerBowlingScoreOrderByRelationAggregateInput
  }

  export type CricketPlayerWhereUniqueInput = Prisma.AtLeast<{
    sis_id?: string
    userId?: string
    AND?: CricketPlayerWhereInput | CricketPlayerWhereInput[]
    OR?: CricketPlayerWhereInput[]
    NOT?: CricketPlayerWhereInput | CricketPlayerWhereInput[]
    teamId?: StringNullableFilter<"CricketPlayer"> | string | null
    isSelected?: BoolFilter<"CricketPlayer"> | boolean
    isCaptain?: BoolFilter<"CricketPlayer"> | boolean
    isWicketKeeper?: BoolFilter<"CricketPlayer"> | boolean
    isAllRounder?: BoolFilter<"CricketPlayer"> | boolean
    isBatsman?: BoolFilter<"CricketPlayer"> | boolean
    isBowler?: BoolFilter<"CricketPlayer"> | boolean
    runs?: IntFilter<"CricketPlayer"> | number
    noOfMatchesPlayed?: IntFilter<"CricketPlayer"> | number
    noOfSixes?: IntFilter<"CricketPlayer"> | number
    noOfFours?: IntFilter<"CricketPlayer"> | number
    noOfWicketsTaken?: IntFilter<"CricketPlayer"> | number
    noOfHalfCenturies?: IntFilter<"CricketPlayer"> | number
    noOfCenturies?: IntFilter<"CricketPlayer"> | number
    noOfWickets?: IntFilter<"CricketPlayer"> | number
    user?: XOR<UsersRelationFilter, UsersWhereInput>
    matches?: CricketMatchListRelationFilter
    team?: XOR<CricketTeamNullableRelationFilter, CricketTeamWhereInput> | null
    user_cricket_players?: UsersListRelationFilter
    team_players?: CricketTeamListRelationFilter
    batting_score_player?: CricketMatchPlayerBattingScoreListRelationFilter
    bowling_score_player?: CricketMatchPlayerBowlingScoreListRelationFilter
  }, "sis_id" | "userId">

  export type CricketPlayerOrderByWithAggregationInput = {
    sis_id?: SortOrder
    userId?: SortOrder
    teamId?: SortOrderInput | SortOrder
    isSelected?: SortOrder
    isCaptain?: SortOrder
    isWicketKeeper?: SortOrder
    isAllRounder?: SortOrder
    isBatsman?: SortOrder
    isBowler?: SortOrder
    runs?: SortOrder
    noOfMatchesPlayed?: SortOrder
    noOfSixes?: SortOrder
    noOfFours?: SortOrder
    noOfWicketsTaken?: SortOrder
    noOfHalfCenturies?: SortOrder
    noOfCenturies?: SortOrder
    noOfWickets?: SortOrder
    _count?: CricketPlayerCountOrderByAggregateInput
    _avg?: CricketPlayerAvgOrderByAggregateInput
    _max?: CricketPlayerMaxOrderByAggregateInput
    _min?: CricketPlayerMinOrderByAggregateInput
    _sum?: CricketPlayerSumOrderByAggregateInput
  }

  export type CricketPlayerScalarWhereWithAggregatesInput = {
    AND?: CricketPlayerScalarWhereWithAggregatesInput | CricketPlayerScalarWhereWithAggregatesInput[]
    OR?: CricketPlayerScalarWhereWithAggregatesInput[]
    NOT?: CricketPlayerScalarWhereWithAggregatesInput | CricketPlayerScalarWhereWithAggregatesInput[]
    sis_id?: StringWithAggregatesFilter<"CricketPlayer"> | string
    userId?: StringWithAggregatesFilter<"CricketPlayer"> | string
    teamId?: StringNullableWithAggregatesFilter<"CricketPlayer"> | string | null
    isSelected?: BoolWithAggregatesFilter<"CricketPlayer"> | boolean
    isCaptain?: BoolWithAggregatesFilter<"CricketPlayer"> | boolean
    isWicketKeeper?: BoolWithAggregatesFilter<"CricketPlayer"> | boolean
    isAllRounder?: BoolWithAggregatesFilter<"CricketPlayer"> | boolean
    isBatsman?: BoolWithAggregatesFilter<"CricketPlayer"> | boolean
    isBowler?: BoolWithAggregatesFilter<"CricketPlayer"> | boolean
    runs?: IntWithAggregatesFilter<"CricketPlayer"> | number
    noOfMatchesPlayed?: IntWithAggregatesFilter<"CricketPlayer"> | number
    noOfSixes?: IntWithAggregatesFilter<"CricketPlayer"> | number
    noOfFours?: IntWithAggregatesFilter<"CricketPlayer"> | number
    noOfWicketsTaken?: IntWithAggregatesFilter<"CricketPlayer"> | number
    noOfHalfCenturies?: IntWithAggregatesFilter<"CricketPlayer"> | number
    noOfCenturies?: IntWithAggregatesFilter<"CricketPlayer"> | number
    noOfWickets?: IntWithAggregatesFilter<"CricketPlayer"> | number
  }

  export type CricketMatchWhereInput = {
    AND?: CricketMatchWhereInput | CricketMatchWhereInput[]
    OR?: CricketMatchWhereInput[]
    NOT?: CricketMatchWhereInput | CricketMatchWhereInput[]
    sis_id?: StringFilter<"CricketMatch"> | string
    played?: BoolFilter<"CricketMatch"> | boolean
    tossWonBy?: StringNullableFilter<"CricketMatch"> | string | null
    tossDecision?: StringNullableFilter<"CricketMatch"> | string | null
    date?: DateTimeFilter<"CricketMatch"> | Date | string
    venue?: StringNullableFilter<"CricketMatch"> | string | null
    year?: StringFilter<"CricketMatch"> | string
    dependency?: BoolFilter<"CricketMatch"> | boolean
    dependentOn?: StringNullableFilter<"CricketMatch"> | string | null
    team1Wickets?: IntNullableFilter<"CricketMatch"> | number | null
    team2Wickets?: IntNullableFilter<"CricketMatch"> | number | null
    team1Runs?: IntNullableFilter<"CricketMatch"> | number | null
    team2Runs?: IntNullableFilter<"CricketMatch"> | number | null
    team1Balls?: IntNullableFilter<"CricketMatch"> | number | null
    team2Balls?: IntNullableFilter<"CricketMatch"> | number | null
    overs?: IntNullableFilter<"CricketMatch"> | number | null
    powerPlayOvers?: IntNullableFilter<"CricketMatch"> | number | null
    overPerBowler?: IntNullableFilter<"CricketMatch"> | number | null
    currentOverId?: StringNullableFilter<"CricketMatch"> | string | null
    wonBy?: StringNullableFilter<"CricketMatch"> | string | null
    teamAId?: StringNullableFilter<"CricketMatch"> | string | null
    teamBId?: StringNullableFilter<"CricketMatch"> | string | null
    teamAScoreId?: StringNullableFilter<"CricketMatch"> | string | null
    teamBScoreId?: StringNullableFilter<"CricketMatch"> | string | null
    battingTeamScoreId?: StringNullableFilter<"CricketMatch"> | string | null
    bowlingTeamScoreId?: StringNullableFilter<"CricketMatch"> | string | null
    tossWonByTeam?: XOR<CricketTeamNullableRelationFilter, CricketTeamWhereInput> | null
    currentOver?: XOR<CricketOverNullableRelationFilter, CricketOverWhereInput> | null
    wonByTeam?: XOR<CricketTeamNullableRelationFilter, CricketTeamWhereInput> | null
    teamA?: XOR<CricketTeamNullableRelationFilter, CricketTeamWhereInput> | null
    teamB?: XOR<CricketTeamNullableRelationFilter, CricketTeamWhereInput> | null
    teamAScore?: XOR<CricketTeamMatchDataNullableRelationFilter, CricketTeamMatchDataWhereInput> | null
    teamBScore?: XOR<CricketTeamMatchDataNullableRelationFilter, CricketTeamMatchDataWhereInput> | null
    battingTeam?: XOR<CricketTeamMatchDataNullableRelationFilter, CricketTeamMatchDataWhereInput> | null
    bowlingTeam?: XOR<CricketTeamMatchDataNullableRelationFilter, CricketTeamMatchDataWhereInput> | null
    players?: CricketPlayerListRelationFilter
    over_match?: CricketOverListRelationFilter
    team_batting_score?: CricketMatchPlayerBattingScoreListRelationFilter
    team_bowling_score?: CricketMatchPlayerBowlingScoreListRelationFilter
  }

  export type CricketMatchOrderByWithRelationInput = {
    sis_id?: SortOrder
    played?: SortOrder
    tossWonBy?: SortOrderInput | SortOrder
    tossDecision?: SortOrderInput | SortOrder
    date?: SortOrder
    venue?: SortOrderInput | SortOrder
    year?: SortOrder
    dependency?: SortOrder
    dependentOn?: SortOrderInput | SortOrder
    team1Wickets?: SortOrderInput | SortOrder
    team2Wickets?: SortOrderInput | SortOrder
    team1Runs?: SortOrderInput | SortOrder
    team2Runs?: SortOrderInput | SortOrder
    team1Balls?: SortOrderInput | SortOrder
    team2Balls?: SortOrderInput | SortOrder
    overs?: SortOrderInput | SortOrder
    powerPlayOvers?: SortOrderInput | SortOrder
    overPerBowler?: SortOrderInput | SortOrder
    currentOverId?: SortOrderInput | SortOrder
    wonBy?: SortOrderInput | SortOrder
    teamAId?: SortOrderInput | SortOrder
    teamBId?: SortOrderInput | SortOrder
    teamAScoreId?: SortOrderInput | SortOrder
    teamBScoreId?: SortOrderInput | SortOrder
    battingTeamScoreId?: SortOrderInput | SortOrder
    bowlingTeamScoreId?: SortOrderInput | SortOrder
    tossWonByTeam?: CricketTeamOrderByWithRelationInput
    currentOver?: CricketOverOrderByWithRelationInput
    wonByTeam?: CricketTeamOrderByWithRelationInput
    teamA?: CricketTeamOrderByWithRelationInput
    teamB?: CricketTeamOrderByWithRelationInput
    teamAScore?: CricketTeamMatchDataOrderByWithRelationInput
    teamBScore?: CricketTeamMatchDataOrderByWithRelationInput
    battingTeam?: CricketTeamMatchDataOrderByWithRelationInput
    bowlingTeam?: CricketTeamMatchDataOrderByWithRelationInput
    players?: CricketPlayerOrderByRelationAggregateInput
    over_match?: CricketOverOrderByRelationAggregateInput
    team_batting_score?: CricketMatchPlayerBattingScoreOrderByRelationAggregateInput
    team_bowling_score?: CricketMatchPlayerBowlingScoreOrderByRelationAggregateInput
  }

  export type CricketMatchWhereUniqueInput = Prisma.AtLeast<{
    sis_id?: string
    AND?: CricketMatchWhereInput | CricketMatchWhereInput[]
    OR?: CricketMatchWhereInput[]
    NOT?: CricketMatchWhereInput | CricketMatchWhereInput[]
    played?: BoolFilter<"CricketMatch"> | boolean
    tossWonBy?: StringNullableFilter<"CricketMatch"> | string | null
    tossDecision?: StringNullableFilter<"CricketMatch"> | string | null
    date?: DateTimeFilter<"CricketMatch"> | Date | string
    venue?: StringNullableFilter<"CricketMatch"> | string | null
    year?: StringFilter<"CricketMatch"> | string
    dependency?: BoolFilter<"CricketMatch"> | boolean
    dependentOn?: StringNullableFilter<"CricketMatch"> | string | null
    team1Wickets?: IntNullableFilter<"CricketMatch"> | number | null
    team2Wickets?: IntNullableFilter<"CricketMatch"> | number | null
    team1Runs?: IntNullableFilter<"CricketMatch"> | number | null
    team2Runs?: IntNullableFilter<"CricketMatch"> | number | null
    team1Balls?: IntNullableFilter<"CricketMatch"> | number | null
    team2Balls?: IntNullableFilter<"CricketMatch"> | number | null
    overs?: IntNullableFilter<"CricketMatch"> | number | null
    powerPlayOvers?: IntNullableFilter<"CricketMatch"> | number | null
    overPerBowler?: IntNullableFilter<"CricketMatch"> | number | null
    currentOverId?: StringNullableFilter<"CricketMatch"> | string | null
    wonBy?: StringNullableFilter<"CricketMatch"> | string | null
    teamAId?: StringNullableFilter<"CricketMatch"> | string | null
    teamBId?: StringNullableFilter<"CricketMatch"> | string | null
    teamAScoreId?: StringNullableFilter<"CricketMatch"> | string | null
    teamBScoreId?: StringNullableFilter<"CricketMatch"> | string | null
    battingTeamScoreId?: StringNullableFilter<"CricketMatch"> | string | null
    bowlingTeamScoreId?: StringNullableFilter<"CricketMatch"> | string | null
    tossWonByTeam?: XOR<CricketTeamNullableRelationFilter, CricketTeamWhereInput> | null
    currentOver?: XOR<CricketOverNullableRelationFilter, CricketOverWhereInput> | null
    wonByTeam?: XOR<CricketTeamNullableRelationFilter, CricketTeamWhereInput> | null
    teamA?: XOR<CricketTeamNullableRelationFilter, CricketTeamWhereInput> | null
    teamB?: XOR<CricketTeamNullableRelationFilter, CricketTeamWhereInput> | null
    teamAScore?: XOR<CricketTeamMatchDataNullableRelationFilter, CricketTeamMatchDataWhereInput> | null
    teamBScore?: XOR<CricketTeamMatchDataNullableRelationFilter, CricketTeamMatchDataWhereInput> | null
    battingTeam?: XOR<CricketTeamMatchDataNullableRelationFilter, CricketTeamMatchDataWhereInput> | null
    bowlingTeam?: XOR<CricketTeamMatchDataNullableRelationFilter, CricketTeamMatchDataWhereInput> | null
    players?: CricketPlayerListRelationFilter
    over_match?: CricketOverListRelationFilter
    team_batting_score?: CricketMatchPlayerBattingScoreListRelationFilter
    team_bowling_score?: CricketMatchPlayerBowlingScoreListRelationFilter
  }, "sis_id">

  export type CricketMatchOrderByWithAggregationInput = {
    sis_id?: SortOrder
    played?: SortOrder
    tossWonBy?: SortOrderInput | SortOrder
    tossDecision?: SortOrderInput | SortOrder
    date?: SortOrder
    venue?: SortOrderInput | SortOrder
    year?: SortOrder
    dependency?: SortOrder
    dependentOn?: SortOrderInput | SortOrder
    team1Wickets?: SortOrderInput | SortOrder
    team2Wickets?: SortOrderInput | SortOrder
    team1Runs?: SortOrderInput | SortOrder
    team2Runs?: SortOrderInput | SortOrder
    team1Balls?: SortOrderInput | SortOrder
    team2Balls?: SortOrderInput | SortOrder
    overs?: SortOrderInput | SortOrder
    powerPlayOvers?: SortOrderInput | SortOrder
    overPerBowler?: SortOrderInput | SortOrder
    currentOverId?: SortOrderInput | SortOrder
    wonBy?: SortOrderInput | SortOrder
    teamAId?: SortOrderInput | SortOrder
    teamBId?: SortOrderInput | SortOrder
    teamAScoreId?: SortOrderInput | SortOrder
    teamBScoreId?: SortOrderInput | SortOrder
    battingTeamScoreId?: SortOrderInput | SortOrder
    bowlingTeamScoreId?: SortOrderInput | SortOrder
    _count?: CricketMatchCountOrderByAggregateInput
    _avg?: CricketMatchAvgOrderByAggregateInput
    _max?: CricketMatchMaxOrderByAggregateInput
    _min?: CricketMatchMinOrderByAggregateInput
    _sum?: CricketMatchSumOrderByAggregateInput
  }

  export type CricketMatchScalarWhereWithAggregatesInput = {
    AND?: CricketMatchScalarWhereWithAggregatesInput | CricketMatchScalarWhereWithAggregatesInput[]
    OR?: CricketMatchScalarWhereWithAggregatesInput[]
    NOT?: CricketMatchScalarWhereWithAggregatesInput | CricketMatchScalarWhereWithAggregatesInput[]
    sis_id?: StringWithAggregatesFilter<"CricketMatch"> | string
    played?: BoolWithAggregatesFilter<"CricketMatch"> | boolean
    tossWonBy?: StringNullableWithAggregatesFilter<"CricketMatch"> | string | null
    tossDecision?: StringNullableWithAggregatesFilter<"CricketMatch"> | string | null
    date?: DateTimeWithAggregatesFilter<"CricketMatch"> | Date | string
    venue?: StringNullableWithAggregatesFilter<"CricketMatch"> | string | null
    year?: StringWithAggregatesFilter<"CricketMatch"> | string
    dependency?: BoolWithAggregatesFilter<"CricketMatch"> | boolean
    dependentOn?: StringNullableWithAggregatesFilter<"CricketMatch"> | string | null
    team1Wickets?: IntNullableWithAggregatesFilter<"CricketMatch"> | number | null
    team2Wickets?: IntNullableWithAggregatesFilter<"CricketMatch"> | number | null
    team1Runs?: IntNullableWithAggregatesFilter<"CricketMatch"> | number | null
    team2Runs?: IntNullableWithAggregatesFilter<"CricketMatch"> | number | null
    team1Balls?: IntNullableWithAggregatesFilter<"CricketMatch"> | number | null
    team2Balls?: IntNullableWithAggregatesFilter<"CricketMatch"> | number | null
    overs?: IntNullableWithAggregatesFilter<"CricketMatch"> | number | null
    powerPlayOvers?: IntNullableWithAggregatesFilter<"CricketMatch"> | number | null
    overPerBowler?: IntNullableWithAggregatesFilter<"CricketMatch"> | number | null
    currentOverId?: StringNullableWithAggregatesFilter<"CricketMatch"> | string | null
    wonBy?: StringNullableWithAggregatesFilter<"CricketMatch"> | string | null
    teamAId?: StringNullableWithAggregatesFilter<"CricketMatch"> | string | null
    teamBId?: StringNullableWithAggregatesFilter<"CricketMatch"> | string | null
    teamAScoreId?: StringNullableWithAggregatesFilter<"CricketMatch"> | string | null
    teamBScoreId?: StringNullableWithAggregatesFilter<"CricketMatch"> | string | null
    battingTeamScoreId?: StringNullableWithAggregatesFilter<"CricketMatch"> | string | null
    bowlingTeamScoreId?: StringNullableWithAggregatesFilter<"CricketMatch"> | string | null
  }

  export type CricketTeamMatchDataWhereInput = {
    AND?: CricketTeamMatchDataWhereInput | CricketTeamMatchDataWhereInput[]
    OR?: CricketTeamMatchDataWhereInput[]
    NOT?: CricketTeamMatchDataWhereInput | CricketTeamMatchDataWhereInput[]
    sis_id?: StringFilter<"CricketTeamMatchData"> | string
    teamId?: StringNullableFilter<"CricketTeamMatchData"> | string | null
    matchId?: StringNullableFilter<"CricketTeamMatchData"> | string | null
    name?: StringNullableFilter<"CricketTeamMatchData"> | string | null
    runs?: IntFilter<"CricketTeamMatchData"> | number
    wideRuns?: IntFilter<"CricketTeamMatchData"> | number
    nbRuns?: IntFilter<"CricketTeamMatchData"> | number
    byeRuns?: IntFilter<"CricketTeamMatchData"> | number
    lbRuns?: IntFilter<"CricketTeamMatchData"> | number
    wickets?: IntFilter<"CricketTeamMatchData"> | number
    balls?: IntFilter<"CricketTeamMatchData"> | number
    batters?: CricketMatchPlayerBattingScoreListRelationFilter
    bowlers?: CricketMatchPlayerBowlingScoreListRelationFilter
    team?: XOR<CricketTeamNullableRelationFilter, CricketTeamWhereInput> | null
    cricketMatchTeamA?: CricketMatchListRelationFilter
    cricketMatchTeamB?: CricketMatchListRelationFilter
    matchBttingTeam?: CricketMatchListRelationFilter
    matchBowlingTeam?: CricketMatchListRelationFilter
  }

  export type CricketTeamMatchDataOrderByWithRelationInput = {
    sis_id?: SortOrder
    teamId?: SortOrderInput | SortOrder
    matchId?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    runs?: SortOrder
    wideRuns?: SortOrder
    nbRuns?: SortOrder
    byeRuns?: SortOrder
    lbRuns?: SortOrder
    wickets?: SortOrder
    balls?: SortOrder
    batters?: CricketMatchPlayerBattingScoreOrderByRelationAggregateInput
    bowlers?: CricketMatchPlayerBowlingScoreOrderByRelationAggregateInput
    team?: CricketTeamOrderByWithRelationInput
    cricketMatchTeamA?: CricketMatchOrderByRelationAggregateInput
    cricketMatchTeamB?: CricketMatchOrderByRelationAggregateInput
    matchBttingTeam?: CricketMatchOrderByRelationAggregateInput
    matchBowlingTeam?: CricketMatchOrderByRelationAggregateInput
  }

  export type CricketTeamMatchDataWhereUniqueInput = Prisma.AtLeast<{
    sis_id?: string
    teamId_matchId?: CricketTeamMatchDataTeamIdMatchIdCompoundUniqueInput
    AND?: CricketTeamMatchDataWhereInput | CricketTeamMatchDataWhereInput[]
    OR?: CricketTeamMatchDataWhereInput[]
    NOT?: CricketTeamMatchDataWhereInput | CricketTeamMatchDataWhereInput[]
    teamId?: StringNullableFilter<"CricketTeamMatchData"> | string | null
    matchId?: StringNullableFilter<"CricketTeamMatchData"> | string | null
    name?: StringNullableFilter<"CricketTeamMatchData"> | string | null
    runs?: IntFilter<"CricketTeamMatchData"> | number
    wideRuns?: IntFilter<"CricketTeamMatchData"> | number
    nbRuns?: IntFilter<"CricketTeamMatchData"> | number
    byeRuns?: IntFilter<"CricketTeamMatchData"> | number
    lbRuns?: IntFilter<"CricketTeamMatchData"> | number
    wickets?: IntFilter<"CricketTeamMatchData"> | number
    balls?: IntFilter<"CricketTeamMatchData"> | number
    batters?: CricketMatchPlayerBattingScoreListRelationFilter
    bowlers?: CricketMatchPlayerBowlingScoreListRelationFilter
    team?: XOR<CricketTeamNullableRelationFilter, CricketTeamWhereInput> | null
    cricketMatchTeamA?: CricketMatchListRelationFilter
    cricketMatchTeamB?: CricketMatchListRelationFilter
    matchBttingTeam?: CricketMatchListRelationFilter
    matchBowlingTeam?: CricketMatchListRelationFilter
  }, "sis_id" | "teamId_matchId">

  export type CricketTeamMatchDataOrderByWithAggregationInput = {
    sis_id?: SortOrder
    teamId?: SortOrderInput | SortOrder
    matchId?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    runs?: SortOrder
    wideRuns?: SortOrder
    nbRuns?: SortOrder
    byeRuns?: SortOrder
    lbRuns?: SortOrder
    wickets?: SortOrder
    balls?: SortOrder
    _count?: CricketTeamMatchDataCountOrderByAggregateInput
    _avg?: CricketTeamMatchDataAvgOrderByAggregateInput
    _max?: CricketTeamMatchDataMaxOrderByAggregateInput
    _min?: CricketTeamMatchDataMinOrderByAggregateInput
    _sum?: CricketTeamMatchDataSumOrderByAggregateInput
  }

  export type CricketTeamMatchDataScalarWhereWithAggregatesInput = {
    AND?: CricketTeamMatchDataScalarWhereWithAggregatesInput | CricketTeamMatchDataScalarWhereWithAggregatesInput[]
    OR?: CricketTeamMatchDataScalarWhereWithAggregatesInput[]
    NOT?: CricketTeamMatchDataScalarWhereWithAggregatesInput | CricketTeamMatchDataScalarWhereWithAggregatesInput[]
    sis_id?: StringWithAggregatesFilter<"CricketTeamMatchData"> | string
    teamId?: StringNullableWithAggregatesFilter<"CricketTeamMatchData"> | string | null
    matchId?: StringNullableWithAggregatesFilter<"CricketTeamMatchData"> | string | null
    name?: StringNullableWithAggregatesFilter<"CricketTeamMatchData"> | string | null
    runs?: IntWithAggregatesFilter<"CricketTeamMatchData"> | number
    wideRuns?: IntWithAggregatesFilter<"CricketTeamMatchData"> | number
    nbRuns?: IntWithAggregatesFilter<"CricketTeamMatchData"> | number
    byeRuns?: IntWithAggregatesFilter<"CricketTeamMatchData"> | number
    lbRuns?: IntWithAggregatesFilter<"CricketTeamMatchData"> | number
    wickets?: IntWithAggregatesFilter<"CricketTeamMatchData"> | number
    balls?: IntWithAggregatesFilter<"CricketTeamMatchData"> | number
  }

  export type CricketOverWhereInput = {
    AND?: CricketOverWhereInput | CricketOverWhereInput[]
    OR?: CricketOverWhereInput[]
    NOT?: CricketOverWhereInput | CricketOverWhereInput[]
    sis_id?: StringFilter<"CricketOver"> | string
    matchId?: StringFilter<"CricketOver"> | string
    runs?: IntFilter<"CricketOver"> | number
    wickets?: IntFilter<"CricketOver"> | number
    totalBalls?: IntFilter<"CricketOver"> | number
    validBalls?: IntFilter<"CricketOver"> | number
    strikerScoreId?: StringFilter<"CricketOver"> | string
    nonStrikerScoreId?: StringFilter<"CricketOver"> | string
    bowlerScoreId?: StringFilter<"CricketOver"> | string
    match?: XOR<CricketMatchRelationFilter, CricketMatchWhereInput>
    strikerScore?: XOR<CricketMatchPlayerBattingScoreRelationFilter, CricketMatchPlayerBattingScoreWhereInput>
    nonStrikerScore?: XOR<CricketMatchPlayerBattingScoreRelationFilter, CricketMatchPlayerBattingScoreWhereInput>
    bowlerScore?: XOR<CricketMatchPlayerBowlingScoreRelationFilter, CricketMatchPlayerBowlingScoreWhereInput>
    balls?: CricketOverBallListRelationFilter
    match_current_over?: CricketMatchListRelationFilter
  }

  export type CricketOverOrderByWithRelationInput = {
    sis_id?: SortOrder
    matchId?: SortOrder
    runs?: SortOrder
    wickets?: SortOrder
    totalBalls?: SortOrder
    validBalls?: SortOrder
    strikerScoreId?: SortOrder
    nonStrikerScoreId?: SortOrder
    bowlerScoreId?: SortOrder
    match?: CricketMatchOrderByWithRelationInput
    strikerScore?: CricketMatchPlayerBattingScoreOrderByWithRelationInput
    nonStrikerScore?: CricketMatchPlayerBattingScoreOrderByWithRelationInput
    bowlerScore?: CricketMatchPlayerBowlingScoreOrderByWithRelationInput
    balls?: CricketOverBallOrderByRelationAggregateInput
    match_current_over?: CricketMatchOrderByRelationAggregateInput
  }

  export type CricketOverWhereUniqueInput = Prisma.AtLeast<{
    sis_id?: string
    AND?: CricketOverWhereInput | CricketOverWhereInput[]
    OR?: CricketOverWhereInput[]
    NOT?: CricketOverWhereInput | CricketOverWhereInput[]
    matchId?: StringFilter<"CricketOver"> | string
    runs?: IntFilter<"CricketOver"> | number
    wickets?: IntFilter<"CricketOver"> | number
    totalBalls?: IntFilter<"CricketOver"> | number
    validBalls?: IntFilter<"CricketOver"> | number
    strikerScoreId?: StringFilter<"CricketOver"> | string
    nonStrikerScoreId?: StringFilter<"CricketOver"> | string
    bowlerScoreId?: StringFilter<"CricketOver"> | string
    match?: XOR<CricketMatchRelationFilter, CricketMatchWhereInput>
    strikerScore?: XOR<CricketMatchPlayerBattingScoreRelationFilter, CricketMatchPlayerBattingScoreWhereInput>
    nonStrikerScore?: XOR<CricketMatchPlayerBattingScoreRelationFilter, CricketMatchPlayerBattingScoreWhereInput>
    bowlerScore?: XOR<CricketMatchPlayerBowlingScoreRelationFilter, CricketMatchPlayerBowlingScoreWhereInput>
    balls?: CricketOverBallListRelationFilter
    match_current_over?: CricketMatchListRelationFilter
  }, "sis_id">

  export type CricketOverOrderByWithAggregationInput = {
    sis_id?: SortOrder
    matchId?: SortOrder
    runs?: SortOrder
    wickets?: SortOrder
    totalBalls?: SortOrder
    validBalls?: SortOrder
    strikerScoreId?: SortOrder
    nonStrikerScoreId?: SortOrder
    bowlerScoreId?: SortOrder
    _count?: CricketOverCountOrderByAggregateInput
    _avg?: CricketOverAvgOrderByAggregateInput
    _max?: CricketOverMaxOrderByAggregateInput
    _min?: CricketOverMinOrderByAggregateInput
    _sum?: CricketOverSumOrderByAggregateInput
  }

  export type CricketOverScalarWhereWithAggregatesInput = {
    AND?: CricketOverScalarWhereWithAggregatesInput | CricketOverScalarWhereWithAggregatesInput[]
    OR?: CricketOverScalarWhereWithAggregatesInput[]
    NOT?: CricketOverScalarWhereWithAggregatesInput | CricketOverScalarWhereWithAggregatesInput[]
    sis_id?: StringWithAggregatesFilter<"CricketOver"> | string
    matchId?: StringWithAggregatesFilter<"CricketOver"> | string
    runs?: IntWithAggregatesFilter<"CricketOver"> | number
    wickets?: IntWithAggregatesFilter<"CricketOver"> | number
    totalBalls?: IntWithAggregatesFilter<"CricketOver"> | number
    validBalls?: IntWithAggregatesFilter<"CricketOver"> | number
    strikerScoreId?: StringWithAggregatesFilter<"CricketOver"> | string
    nonStrikerScoreId?: StringWithAggregatesFilter<"CricketOver"> | string
    bowlerScoreId?: StringWithAggregatesFilter<"CricketOver"> | string
  }

  export type CricketOverBallWhereInput = {
    AND?: CricketOverBallWhereInput | CricketOverBallWhereInput[]
    OR?: CricketOverBallWhereInput[]
    NOT?: CricketOverBallWhereInput | CricketOverBallWhereInput[]
    sis_id?: StringFilter<"CricketOverBall"> | string
    overId?: StringFilter<"CricketOverBall"> | string
    ballNo?: IntFilter<"CricketOverBall"> | number
    runs?: IntFilter<"CricketOverBall"> | number
    wicket?: BoolFilter<"CricketOverBall"> | boolean
    ballType?: EnumBallTypeFilter<"CricketOverBall"> | $Enums.BallType
    extras?: IntFilter<"CricketOverBall"> | number
    wicketType?: StringNullableFilter<"CricketOverBall"> | string | null
    deliveryType?: StringNullableFilter<"CricketOverBall"> | string | null
    over?: XOR<CricketOverRelationFilter, CricketOverWhereInput>
  }

  export type CricketOverBallOrderByWithRelationInput = {
    sis_id?: SortOrder
    overId?: SortOrder
    ballNo?: SortOrder
    runs?: SortOrder
    wicket?: SortOrder
    ballType?: SortOrder
    extras?: SortOrder
    wicketType?: SortOrderInput | SortOrder
    deliveryType?: SortOrderInput | SortOrder
    over?: CricketOverOrderByWithRelationInput
  }

  export type CricketOverBallWhereUniqueInput = Prisma.AtLeast<{
    sis_id?: string
    AND?: CricketOverBallWhereInput | CricketOverBallWhereInput[]
    OR?: CricketOverBallWhereInput[]
    NOT?: CricketOverBallWhereInput | CricketOverBallWhereInput[]
    overId?: StringFilter<"CricketOverBall"> | string
    ballNo?: IntFilter<"CricketOverBall"> | number
    runs?: IntFilter<"CricketOverBall"> | number
    wicket?: BoolFilter<"CricketOverBall"> | boolean
    ballType?: EnumBallTypeFilter<"CricketOverBall"> | $Enums.BallType
    extras?: IntFilter<"CricketOverBall"> | number
    wicketType?: StringNullableFilter<"CricketOverBall"> | string | null
    deliveryType?: StringNullableFilter<"CricketOverBall"> | string | null
    over?: XOR<CricketOverRelationFilter, CricketOverWhereInput>
  }, "sis_id">

  export type CricketOverBallOrderByWithAggregationInput = {
    sis_id?: SortOrder
    overId?: SortOrder
    ballNo?: SortOrder
    runs?: SortOrder
    wicket?: SortOrder
    ballType?: SortOrder
    extras?: SortOrder
    wicketType?: SortOrderInput | SortOrder
    deliveryType?: SortOrderInput | SortOrder
    _count?: CricketOverBallCountOrderByAggregateInput
    _avg?: CricketOverBallAvgOrderByAggregateInput
    _max?: CricketOverBallMaxOrderByAggregateInput
    _min?: CricketOverBallMinOrderByAggregateInput
    _sum?: CricketOverBallSumOrderByAggregateInput
  }

  export type CricketOverBallScalarWhereWithAggregatesInput = {
    AND?: CricketOverBallScalarWhereWithAggregatesInput | CricketOverBallScalarWhereWithAggregatesInput[]
    OR?: CricketOverBallScalarWhereWithAggregatesInput[]
    NOT?: CricketOverBallScalarWhereWithAggregatesInput | CricketOverBallScalarWhereWithAggregatesInput[]
    sis_id?: StringWithAggregatesFilter<"CricketOverBall"> | string
    overId?: StringWithAggregatesFilter<"CricketOverBall"> | string
    ballNo?: IntWithAggregatesFilter<"CricketOverBall"> | number
    runs?: IntWithAggregatesFilter<"CricketOverBall"> | number
    wicket?: BoolWithAggregatesFilter<"CricketOverBall"> | boolean
    ballType?: EnumBallTypeWithAggregatesFilter<"CricketOverBall"> | $Enums.BallType
    extras?: IntWithAggregatesFilter<"CricketOverBall"> | number
    wicketType?: StringNullableWithAggregatesFilter<"CricketOverBall"> | string | null
    deliveryType?: StringNullableWithAggregatesFilter<"CricketOverBall"> | string | null
  }

  export type CricketMatchPlayerBattingScoreWhereInput = {
    AND?: CricketMatchPlayerBattingScoreWhereInput | CricketMatchPlayerBattingScoreWhereInput[]
    OR?: CricketMatchPlayerBattingScoreWhereInput[]
    NOT?: CricketMatchPlayerBattingScoreWhereInput | CricketMatchPlayerBattingScoreWhereInput[]
    sis_id?: StringFilter<"CricketMatchPlayerBattingScore"> | string
    runs?: IntFilter<"CricketMatchPlayerBattingScore"> | number
    balls?: IntFilter<"CricketMatchPlayerBattingScore"> | number
    fours?: IntFilter<"CricketMatchPlayerBattingScore"> | number
    sixes?: IntFilter<"CricketMatchPlayerBattingScore"> | number
    strikeRate?: FloatFilter<"CricketMatchPlayerBattingScore"> | number
    out?: BoolFilter<"CricketMatchPlayerBattingScore"> | boolean
    played?: BoolFilter<"CricketMatchPlayerBattingScore"> | boolean
    wicketType?: StringNullableFilter<"CricketMatchPlayerBattingScore"> | string | null
    playerId?: StringNullableFilter<"CricketMatchPlayerBattingScore"> | string | null
    matchId?: StringFilter<"CricketMatchPlayerBattingScore"> | string
    teamId?: StringFilter<"CricketMatchPlayerBattingScore"> | string
    player?: XOR<CricketPlayerNullableRelationFilter, CricketPlayerWhereInput> | null
    match?: XOR<CricketMatchRelationFilter, CricketMatchWhereInput>
    team?: XOR<CricketTeamRelationFilter, CricketTeamWhereInput>
    match_batters?: CricketTeamMatchDataListRelationFilter
    over_striker?: CricketOverListRelationFilter
    over_non_striker?: CricketOverListRelationFilter
  }

  export type CricketMatchPlayerBattingScoreOrderByWithRelationInput = {
    sis_id?: SortOrder
    runs?: SortOrder
    balls?: SortOrder
    fours?: SortOrder
    sixes?: SortOrder
    strikeRate?: SortOrder
    out?: SortOrder
    played?: SortOrder
    wicketType?: SortOrderInput | SortOrder
    playerId?: SortOrderInput | SortOrder
    matchId?: SortOrder
    teamId?: SortOrder
    player?: CricketPlayerOrderByWithRelationInput
    match?: CricketMatchOrderByWithRelationInput
    team?: CricketTeamOrderByWithRelationInput
    match_batters?: CricketTeamMatchDataOrderByRelationAggregateInput
    over_striker?: CricketOverOrderByRelationAggregateInput
    over_non_striker?: CricketOverOrderByRelationAggregateInput
  }

  export type CricketMatchPlayerBattingScoreWhereUniqueInput = Prisma.AtLeast<{
    sis_id?: string
    matchId_playerId?: CricketMatchPlayerBattingScoreMatchIdPlayerIdCompoundUniqueInput
    AND?: CricketMatchPlayerBattingScoreWhereInput | CricketMatchPlayerBattingScoreWhereInput[]
    OR?: CricketMatchPlayerBattingScoreWhereInput[]
    NOT?: CricketMatchPlayerBattingScoreWhereInput | CricketMatchPlayerBattingScoreWhereInput[]
    runs?: IntFilter<"CricketMatchPlayerBattingScore"> | number
    balls?: IntFilter<"CricketMatchPlayerBattingScore"> | number
    fours?: IntFilter<"CricketMatchPlayerBattingScore"> | number
    sixes?: IntFilter<"CricketMatchPlayerBattingScore"> | number
    strikeRate?: FloatFilter<"CricketMatchPlayerBattingScore"> | number
    out?: BoolFilter<"CricketMatchPlayerBattingScore"> | boolean
    played?: BoolFilter<"CricketMatchPlayerBattingScore"> | boolean
    wicketType?: StringNullableFilter<"CricketMatchPlayerBattingScore"> | string | null
    playerId?: StringNullableFilter<"CricketMatchPlayerBattingScore"> | string | null
    matchId?: StringFilter<"CricketMatchPlayerBattingScore"> | string
    teamId?: StringFilter<"CricketMatchPlayerBattingScore"> | string
    player?: XOR<CricketPlayerNullableRelationFilter, CricketPlayerWhereInput> | null
    match?: XOR<CricketMatchRelationFilter, CricketMatchWhereInput>
    team?: XOR<CricketTeamRelationFilter, CricketTeamWhereInput>
    match_batters?: CricketTeamMatchDataListRelationFilter
    over_striker?: CricketOverListRelationFilter
    over_non_striker?: CricketOverListRelationFilter
  }, "sis_id" | "matchId_playerId">

  export type CricketMatchPlayerBattingScoreOrderByWithAggregationInput = {
    sis_id?: SortOrder
    runs?: SortOrder
    balls?: SortOrder
    fours?: SortOrder
    sixes?: SortOrder
    strikeRate?: SortOrder
    out?: SortOrder
    played?: SortOrder
    wicketType?: SortOrderInput | SortOrder
    playerId?: SortOrderInput | SortOrder
    matchId?: SortOrder
    teamId?: SortOrder
    _count?: CricketMatchPlayerBattingScoreCountOrderByAggregateInput
    _avg?: CricketMatchPlayerBattingScoreAvgOrderByAggregateInput
    _max?: CricketMatchPlayerBattingScoreMaxOrderByAggregateInput
    _min?: CricketMatchPlayerBattingScoreMinOrderByAggregateInput
    _sum?: CricketMatchPlayerBattingScoreSumOrderByAggregateInput
  }

  export type CricketMatchPlayerBattingScoreScalarWhereWithAggregatesInput = {
    AND?: CricketMatchPlayerBattingScoreScalarWhereWithAggregatesInput | CricketMatchPlayerBattingScoreScalarWhereWithAggregatesInput[]
    OR?: CricketMatchPlayerBattingScoreScalarWhereWithAggregatesInput[]
    NOT?: CricketMatchPlayerBattingScoreScalarWhereWithAggregatesInput | CricketMatchPlayerBattingScoreScalarWhereWithAggregatesInput[]
    sis_id?: StringWithAggregatesFilter<"CricketMatchPlayerBattingScore"> | string
    runs?: IntWithAggregatesFilter<"CricketMatchPlayerBattingScore"> | number
    balls?: IntWithAggregatesFilter<"CricketMatchPlayerBattingScore"> | number
    fours?: IntWithAggregatesFilter<"CricketMatchPlayerBattingScore"> | number
    sixes?: IntWithAggregatesFilter<"CricketMatchPlayerBattingScore"> | number
    strikeRate?: FloatWithAggregatesFilter<"CricketMatchPlayerBattingScore"> | number
    out?: BoolWithAggregatesFilter<"CricketMatchPlayerBattingScore"> | boolean
    played?: BoolWithAggregatesFilter<"CricketMatchPlayerBattingScore"> | boolean
    wicketType?: StringNullableWithAggregatesFilter<"CricketMatchPlayerBattingScore"> | string | null
    playerId?: StringNullableWithAggregatesFilter<"CricketMatchPlayerBattingScore"> | string | null
    matchId?: StringWithAggregatesFilter<"CricketMatchPlayerBattingScore"> | string
    teamId?: StringWithAggregatesFilter<"CricketMatchPlayerBattingScore"> | string
  }

  export type CricketMatchPlayerBowlingScoreWhereInput = {
    AND?: CricketMatchPlayerBowlingScoreWhereInput | CricketMatchPlayerBowlingScoreWhereInput[]
    OR?: CricketMatchPlayerBowlingScoreWhereInput[]
    NOT?: CricketMatchPlayerBowlingScoreWhereInput | CricketMatchPlayerBowlingScoreWhereInput[]
    sis_id?: StringFilter<"CricketMatchPlayerBowlingScore"> | string
    runs?: IntFilter<"CricketMatchPlayerBowlingScore"> | number
    balls?: IntFilter<"CricketMatchPlayerBowlingScore"> | number
    fours?: IntFilter<"CricketMatchPlayerBowlingScore"> | number
    sixes?: IntFilter<"CricketMatchPlayerBowlingScore"> | number
    played?: BoolFilter<"CricketMatchPlayerBowlingScore"> | boolean
    wickets?: IntFilter<"CricketMatchPlayerBowlingScore"> | number
    playerId?: StringNullableFilter<"CricketMatchPlayerBowlingScore"> | string | null
    matchId?: StringFilter<"CricketMatchPlayerBowlingScore"> | string
    teamId?: StringFilter<"CricketMatchPlayerBowlingScore"> | string
    player?: XOR<CricketPlayerNullableRelationFilter, CricketPlayerWhereInput> | null
    match?: XOR<CricketMatchRelationFilter, CricketMatchWhereInput>
    team?: XOR<CricketTeamRelationFilter, CricketTeamWhereInput>
    match_bowlers?: CricketTeamMatchDataListRelationFilter
    over_bowler?: CricketOverListRelationFilter
  }

  export type CricketMatchPlayerBowlingScoreOrderByWithRelationInput = {
    sis_id?: SortOrder
    runs?: SortOrder
    balls?: SortOrder
    fours?: SortOrder
    sixes?: SortOrder
    played?: SortOrder
    wickets?: SortOrder
    playerId?: SortOrderInput | SortOrder
    matchId?: SortOrder
    teamId?: SortOrder
    player?: CricketPlayerOrderByWithRelationInput
    match?: CricketMatchOrderByWithRelationInput
    team?: CricketTeamOrderByWithRelationInput
    match_bowlers?: CricketTeamMatchDataOrderByRelationAggregateInput
    over_bowler?: CricketOverOrderByRelationAggregateInput
  }

  export type CricketMatchPlayerBowlingScoreWhereUniqueInput = Prisma.AtLeast<{
    sis_id?: string
    matchId_playerId?: CricketMatchPlayerBowlingScoreMatchIdPlayerIdCompoundUniqueInput
    AND?: CricketMatchPlayerBowlingScoreWhereInput | CricketMatchPlayerBowlingScoreWhereInput[]
    OR?: CricketMatchPlayerBowlingScoreWhereInput[]
    NOT?: CricketMatchPlayerBowlingScoreWhereInput | CricketMatchPlayerBowlingScoreWhereInput[]
    runs?: IntFilter<"CricketMatchPlayerBowlingScore"> | number
    balls?: IntFilter<"CricketMatchPlayerBowlingScore"> | number
    fours?: IntFilter<"CricketMatchPlayerBowlingScore"> | number
    sixes?: IntFilter<"CricketMatchPlayerBowlingScore"> | number
    played?: BoolFilter<"CricketMatchPlayerBowlingScore"> | boolean
    wickets?: IntFilter<"CricketMatchPlayerBowlingScore"> | number
    playerId?: StringNullableFilter<"CricketMatchPlayerBowlingScore"> | string | null
    matchId?: StringFilter<"CricketMatchPlayerBowlingScore"> | string
    teamId?: StringFilter<"CricketMatchPlayerBowlingScore"> | string
    player?: XOR<CricketPlayerNullableRelationFilter, CricketPlayerWhereInput> | null
    match?: XOR<CricketMatchRelationFilter, CricketMatchWhereInput>
    team?: XOR<CricketTeamRelationFilter, CricketTeamWhereInput>
    match_bowlers?: CricketTeamMatchDataListRelationFilter
    over_bowler?: CricketOverListRelationFilter
  }, "sis_id" | "matchId_playerId">

  export type CricketMatchPlayerBowlingScoreOrderByWithAggregationInput = {
    sis_id?: SortOrder
    runs?: SortOrder
    balls?: SortOrder
    fours?: SortOrder
    sixes?: SortOrder
    played?: SortOrder
    wickets?: SortOrder
    playerId?: SortOrderInput | SortOrder
    matchId?: SortOrder
    teamId?: SortOrder
    _count?: CricketMatchPlayerBowlingScoreCountOrderByAggregateInput
    _avg?: CricketMatchPlayerBowlingScoreAvgOrderByAggregateInput
    _max?: CricketMatchPlayerBowlingScoreMaxOrderByAggregateInput
    _min?: CricketMatchPlayerBowlingScoreMinOrderByAggregateInput
    _sum?: CricketMatchPlayerBowlingScoreSumOrderByAggregateInput
  }

  export type CricketMatchPlayerBowlingScoreScalarWhereWithAggregatesInput = {
    AND?: CricketMatchPlayerBowlingScoreScalarWhereWithAggregatesInput | CricketMatchPlayerBowlingScoreScalarWhereWithAggregatesInput[]
    OR?: CricketMatchPlayerBowlingScoreScalarWhereWithAggregatesInput[]
    NOT?: CricketMatchPlayerBowlingScoreScalarWhereWithAggregatesInput | CricketMatchPlayerBowlingScoreScalarWhereWithAggregatesInput[]
    sis_id?: StringWithAggregatesFilter<"CricketMatchPlayerBowlingScore"> | string
    runs?: IntWithAggregatesFilter<"CricketMatchPlayerBowlingScore"> | number
    balls?: IntWithAggregatesFilter<"CricketMatchPlayerBowlingScore"> | number
    fours?: IntWithAggregatesFilter<"CricketMatchPlayerBowlingScore"> | number
    sixes?: IntWithAggregatesFilter<"CricketMatchPlayerBowlingScore"> | number
    played?: BoolWithAggregatesFilter<"CricketMatchPlayerBowlingScore"> | boolean
    wickets?: IntWithAggregatesFilter<"CricketMatchPlayerBowlingScore"> | number
    playerId?: StringNullableWithAggregatesFilter<"CricketMatchPlayerBowlingScore"> | string | null
    matchId?: StringWithAggregatesFilter<"CricketMatchPlayerBowlingScore"> | string
    teamId?: StringWithAggregatesFilter<"CricketMatchPlayerBowlingScore"> | string
  }

  export type VerificationTokenWhereInput = {
    AND?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    OR?: VerificationTokenWhereInput[]
    NOT?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    sis_id?: StringFilter<"VerificationToken"> | string
    token?: StringFilter<"VerificationToken"> | string
    createdAt?: DateTimeFilter<"VerificationToken"> | Date | string
    updatedAt?: DateTimeFilter<"VerificationToken"> | Date | string
    expiration?: DateTimeFilter<"VerificationToken"> | Date | string
    user?: XOR<UsersRelationFilter, UsersWhereInput>
  }

  export type VerificationTokenOrderByWithRelationInput = {
    sis_id?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    expiration?: SortOrder
    user?: UsersOrderByWithRelationInput
  }

  export type VerificationTokenWhereUniqueInput = Prisma.AtLeast<{
    sis_id?: string
    token?: string
    AND?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    OR?: VerificationTokenWhereInput[]
    NOT?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    createdAt?: DateTimeFilter<"VerificationToken"> | Date | string
    updatedAt?: DateTimeFilter<"VerificationToken"> | Date | string
    expiration?: DateTimeFilter<"VerificationToken"> | Date | string
    user?: XOR<UsersRelationFilter, UsersWhereInput>
  }, "sis_id" | "token">

  export type VerificationTokenOrderByWithAggregationInput = {
    sis_id?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    expiration?: SortOrder
    _count?: VerificationTokenCountOrderByAggregateInput
    _max?: VerificationTokenMaxOrderByAggregateInput
    _min?: VerificationTokenMinOrderByAggregateInput
  }

  export type VerificationTokenScalarWhereWithAggregatesInput = {
    AND?: VerificationTokenScalarWhereWithAggregatesInput | VerificationTokenScalarWhereWithAggregatesInput[]
    OR?: VerificationTokenScalarWhereWithAggregatesInput[]
    NOT?: VerificationTokenScalarWhereWithAggregatesInput | VerificationTokenScalarWhereWithAggregatesInput[]
    sis_id?: StringWithAggregatesFilter<"VerificationToken"> | string
    token?: StringWithAggregatesFilter<"VerificationToken"> | string
    createdAt?: DateTimeWithAggregatesFilter<"VerificationToken"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"VerificationToken"> | Date | string
    expiration?: DateTimeWithAggregatesFilter<"VerificationToken"> | Date | string
  }

  export type TicketWhereInput = {
    AND?: TicketWhereInput | TicketWhereInput[]
    OR?: TicketWhereInput[]
    NOT?: TicketWhereInput | TicketWhereInput[]
    sis_id?: StringFilter<"Ticket"> | string
    userEmail?: StringFilter<"Ticket"> | string
    userName?: StringFilter<"Ticket"> | string
    userId?: StringNullableFilter<"Ticket"> | string | null
    title?: StringFilter<"Ticket"> | string
    description?: StringFilter<"Ticket"> | string
    visited?: BoolFilter<"Ticket"> | boolean
    status?: StringFilter<"Ticket"> | string
    createdAt?: DateTimeFilter<"Ticket"> | Date | string
    closedAt?: DateTimeNullableFilter<"Ticket"> | Date | string | null
    user?: XOR<UsersNullableRelationFilter, UsersWhereInput> | null
  }

  export type TicketOrderByWithRelationInput = {
    sis_id?: SortOrder
    userEmail?: SortOrder
    userName?: SortOrder
    userId?: SortOrderInput | SortOrder
    title?: SortOrder
    description?: SortOrder
    visited?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    closedAt?: SortOrderInput | SortOrder
    user?: UsersOrderByWithRelationInput
  }

  export type TicketWhereUniqueInput = Prisma.AtLeast<{
    sis_id?: string
    AND?: TicketWhereInput | TicketWhereInput[]
    OR?: TicketWhereInput[]
    NOT?: TicketWhereInput | TicketWhereInput[]
    userEmail?: StringFilter<"Ticket"> | string
    userName?: StringFilter<"Ticket"> | string
    userId?: StringNullableFilter<"Ticket"> | string | null
    title?: StringFilter<"Ticket"> | string
    description?: StringFilter<"Ticket"> | string
    visited?: BoolFilter<"Ticket"> | boolean
    status?: StringFilter<"Ticket"> | string
    createdAt?: DateTimeFilter<"Ticket"> | Date | string
    closedAt?: DateTimeNullableFilter<"Ticket"> | Date | string | null
    user?: XOR<UsersNullableRelationFilter, UsersWhereInput> | null
  }, "sis_id">

  export type TicketOrderByWithAggregationInput = {
    sis_id?: SortOrder
    userEmail?: SortOrder
    userName?: SortOrder
    userId?: SortOrderInput | SortOrder
    title?: SortOrder
    description?: SortOrder
    visited?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    closedAt?: SortOrderInput | SortOrder
    _count?: TicketCountOrderByAggregateInput
    _max?: TicketMaxOrderByAggregateInput
    _min?: TicketMinOrderByAggregateInput
  }

  export type TicketScalarWhereWithAggregatesInput = {
    AND?: TicketScalarWhereWithAggregatesInput | TicketScalarWhereWithAggregatesInput[]
    OR?: TicketScalarWhereWithAggregatesInput[]
    NOT?: TicketScalarWhereWithAggregatesInput | TicketScalarWhereWithAggregatesInput[]
    sis_id?: StringWithAggregatesFilter<"Ticket"> | string
    userEmail?: StringWithAggregatesFilter<"Ticket"> | string
    userName?: StringWithAggregatesFilter<"Ticket"> | string
    userId?: StringNullableWithAggregatesFilter<"Ticket"> | string | null
    title?: StringWithAggregatesFilter<"Ticket"> | string
    description?: StringWithAggregatesFilter<"Ticket"> | string
    visited?: BoolWithAggregatesFilter<"Ticket"> | boolean
    status?: StringWithAggregatesFilter<"Ticket"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Ticket"> | Date | string
    closedAt?: DateTimeNullableWithAggregatesFilter<"Ticket"> | Date | string | null
  }

  export type OTPCreateInput = {
    otp: string
    email: string
    createdAt?: Date | string
  }

  export type OTPUncheckedCreateInput = {
    otp: string
    email: string
    createdAt?: Date | string
  }

  export type OTPUpdateInput = {
    otp?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OTPUncheckedUpdateInput = {
    otp?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OTPCreateManyInput = {
    otp: string
    email: string
    createdAt?: Date | string
  }

  export type OTPUpdateManyMutationInput = {
    otp?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OTPUncheckedUpdateManyInput = {
    otp?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsersCreateInput = {
    userId: string
    email: string
    name?: string | null
    password?: string | null
    token?: string | null
    roles?: UsersCreaterolesInput | $Enums.Role[]
    createdAt?: Date | string
    updatedAt?: Date | string
    rec_status?: boolean
    cricketPlayer?: CricketPlayerCreateNestedOneWithoutUser_cricket_playersInput
    cricket_players?: CricketPlayerCreateNestedManyWithoutUserInput
    verification_token?: VerificationTokenCreateNestedManyWithoutUserInput
    user_tickets?: TicketCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateInput = {
    userId: string
    email: string
    name?: string | null
    password?: string | null
    token?: string | null
    roles?: UsersCreaterolesInput | $Enums.Role[]
    createdAt?: Date | string
    updatedAt?: Date | string
    rec_status?: boolean
    cricketPlayerId?: string | null
    cricket_players?: CricketPlayerUncheckedCreateNestedManyWithoutUserInput
    verification_token?: VerificationTokenUncheckedCreateNestedManyWithoutUserInput
    user_tickets?: TicketUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: UsersUpdaterolesInput | $Enums.Role[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rec_status?: BoolFieldUpdateOperationsInput | boolean
    cricketPlayer?: CricketPlayerUpdateOneWithoutUser_cricket_playersNestedInput
    cricket_players?: CricketPlayerUpdateManyWithoutUserNestedInput
    verification_token?: VerificationTokenUpdateManyWithoutUserNestedInput
    user_tickets?: TicketUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: UsersUpdaterolesInput | $Enums.Role[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rec_status?: BoolFieldUpdateOperationsInput | boolean
    cricketPlayerId?: NullableStringFieldUpdateOperationsInput | string | null
    cricket_players?: CricketPlayerUncheckedUpdateManyWithoutUserNestedInput
    verification_token?: VerificationTokenUncheckedUpdateManyWithoutUserNestedInput
    user_tickets?: TicketUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UsersCreateManyInput = {
    userId: string
    email: string
    name?: string | null
    password?: string | null
    token?: string | null
    roles?: UsersCreaterolesInput | $Enums.Role[]
    createdAt?: Date | string
    updatedAt?: Date | string
    rec_status?: boolean
    cricketPlayerId?: string | null
  }

  export type UsersUpdateManyMutationInput = {
    userId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: UsersUpdaterolesInput | $Enums.Role[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rec_status?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UsersUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: UsersUpdaterolesInput | $Enums.Role[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rec_status?: BoolFieldUpdateOperationsInput | boolean
    cricketPlayerId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CricketTeamCreateInput = {
    sis_id?: string
    name: string
    year: string
    players?: CricketPlayerCreateNestedManyWithoutTeam_playersInput
    winning_team?: CricketMatchCreateNestedManyWithoutWonByTeamInput
    toss_winning_team?: CricketMatchCreateNestedManyWithoutTossWonByTeamInput
    player_team?: CricketPlayerCreateNestedManyWithoutTeamInput
    cricket_match_teamData?: CricketTeamMatchDataCreateNestedManyWithoutTeamInput
    cricket_match_player_batting_score?: CricketMatchPlayerBattingScoreCreateNestedManyWithoutTeamInput
    cricket_match_player_bowling_score?: CricketMatchPlayerBowlingScoreCreateNestedManyWithoutTeamInput
    CricketMatchTeamA?: CricketMatchCreateNestedManyWithoutTeamAInput
    CricketMatchTeamB?: CricketMatchCreateNestedManyWithoutTeamBInput
  }

  export type CricketTeamUncheckedCreateInput = {
    sis_id?: string
    name: string
    year: string
    players?: CricketPlayerUncheckedCreateNestedManyWithoutTeam_playersInput
    winning_team?: CricketMatchUncheckedCreateNestedManyWithoutWonByTeamInput
    toss_winning_team?: CricketMatchUncheckedCreateNestedManyWithoutTossWonByTeamInput
    player_team?: CricketPlayerUncheckedCreateNestedManyWithoutTeamInput
    cricket_match_teamData?: CricketTeamMatchDataUncheckedCreateNestedManyWithoutTeamInput
    cricket_match_player_batting_score?: CricketMatchPlayerBattingScoreUncheckedCreateNestedManyWithoutTeamInput
    cricket_match_player_bowling_score?: CricketMatchPlayerBowlingScoreUncheckedCreateNestedManyWithoutTeamInput
    CricketMatchTeamA?: CricketMatchUncheckedCreateNestedManyWithoutTeamAInput
    CricketMatchTeamB?: CricketMatchUncheckedCreateNestedManyWithoutTeamBInput
  }

  export type CricketTeamUpdateInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    players?: CricketPlayerUpdateManyWithoutTeam_playersNestedInput
    winning_team?: CricketMatchUpdateManyWithoutWonByTeamNestedInput
    toss_winning_team?: CricketMatchUpdateManyWithoutTossWonByTeamNestedInput
    player_team?: CricketPlayerUpdateManyWithoutTeamNestedInput
    cricket_match_teamData?: CricketTeamMatchDataUpdateManyWithoutTeamNestedInput
    cricket_match_player_batting_score?: CricketMatchPlayerBattingScoreUpdateManyWithoutTeamNestedInput
    cricket_match_player_bowling_score?: CricketMatchPlayerBowlingScoreUpdateManyWithoutTeamNestedInput
    CricketMatchTeamA?: CricketMatchUpdateManyWithoutTeamANestedInput
    CricketMatchTeamB?: CricketMatchUpdateManyWithoutTeamBNestedInput
  }

  export type CricketTeamUncheckedUpdateInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    players?: CricketPlayerUncheckedUpdateManyWithoutTeam_playersNestedInput
    winning_team?: CricketMatchUncheckedUpdateManyWithoutWonByTeamNestedInput
    toss_winning_team?: CricketMatchUncheckedUpdateManyWithoutTossWonByTeamNestedInput
    player_team?: CricketPlayerUncheckedUpdateManyWithoutTeamNestedInput
    cricket_match_teamData?: CricketTeamMatchDataUncheckedUpdateManyWithoutTeamNestedInput
    cricket_match_player_batting_score?: CricketMatchPlayerBattingScoreUncheckedUpdateManyWithoutTeamNestedInput
    cricket_match_player_bowling_score?: CricketMatchPlayerBowlingScoreUncheckedUpdateManyWithoutTeamNestedInput
    CricketMatchTeamA?: CricketMatchUncheckedUpdateManyWithoutTeamANestedInput
    CricketMatchTeamB?: CricketMatchUncheckedUpdateManyWithoutTeamBNestedInput
  }

  export type CricketTeamCreateManyInput = {
    sis_id?: string
    name: string
    year: string
  }

  export type CricketTeamUpdateManyMutationInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
  }

  export type CricketTeamUncheckedUpdateManyInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
  }

  export type CricketPlayerCreateInput = {
    sis_id?: string
    isSelected?: boolean
    isCaptain?: boolean
    isWicketKeeper?: boolean
    isAllRounder?: boolean
    isBatsman?: boolean
    isBowler?: boolean
    runs?: number
    noOfMatchesPlayed?: number
    noOfSixes?: number
    noOfFours?: number
    noOfWicketsTaken?: number
    noOfHalfCenturies?: number
    noOfCenturies?: number
    noOfWickets?: number
    user: UsersCreateNestedOneWithoutCricket_playersInput
    matches?: CricketMatchCreateNestedManyWithoutPlayersInput
    team?: CricketTeamCreateNestedOneWithoutPlayer_teamInput
    user_cricket_players?: UsersCreateNestedManyWithoutCricketPlayerInput
    team_players?: CricketTeamCreateNestedManyWithoutPlayersInput
    batting_score_player?: CricketMatchPlayerBattingScoreCreateNestedManyWithoutPlayerInput
    bowling_score_player?: CricketMatchPlayerBowlingScoreCreateNestedManyWithoutPlayerInput
  }

  export type CricketPlayerUncheckedCreateInput = {
    sis_id?: string
    userId: string
    teamId?: string | null
    isSelected?: boolean
    isCaptain?: boolean
    isWicketKeeper?: boolean
    isAllRounder?: boolean
    isBatsman?: boolean
    isBowler?: boolean
    runs?: number
    noOfMatchesPlayed?: number
    noOfSixes?: number
    noOfFours?: number
    noOfWicketsTaken?: number
    noOfHalfCenturies?: number
    noOfCenturies?: number
    noOfWickets?: number
    matches?: CricketMatchUncheckedCreateNestedManyWithoutPlayersInput
    user_cricket_players?: UsersUncheckedCreateNestedManyWithoutCricketPlayerInput
    team_players?: CricketTeamUncheckedCreateNestedManyWithoutPlayersInput
    batting_score_player?: CricketMatchPlayerBattingScoreUncheckedCreateNestedManyWithoutPlayerInput
    bowling_score_player?: CricketMatchPlayerBowlingScoreUncheckedCreateNestedManyWithoutPlayerInput
  }

  export type CricketPlayerUpdateInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    isSelected?: BoolFieldUpdateOperationsInput | boolean
    isCaptain?: BoolFieldUpdateOperationsInput | boolean
    isWicketKeeper?: BoolFieldUpdateOperationsInput | boolean
    isAllRounder?: BoolFieldUpdateOperationsInput | boolean
    isBatsman?: BoolFieldUpdateOperationsInput | boolean
    isBowler?: BoolFieldUpdateOperationsInput | boolean
    runs?: IntFieldUpdateOperationsInput | number
    noOfMatchesPlayed?: IntFieldUpdateOperationsInput | number
    noOfSixes?: IntFieldUpdateOperationsInput | number
    noOfFours?: IntFieldUpdateOperationsInput | number
    noOfWicketsTaken?: IntFieldUpdateOperationsInput | number
    noOfHalfCenturies?: IntFieldUpdateOperationsInput | number
    noOfCenturies?: IntFieldUpdateOperationsInput | number
    noOfWickets?: IntFieldUpdateOperationsInput | number
    user?: UsersUpdateOneRequiredWithoutCricket_playersNestedInput
    matches?: CricketMatchUpdateManyWithoutPlayersNestedInput
    team?: CricketTeamUpdateOneWithoutPlayer_teamNestedInput
    user_cricket_players?: UsersUpdateManyWithoutCricketPlayerNestedInput
    team_players?: CricketTeamUpdateManyWithoutPlayersNestedInput
    batting_score_player?: CricketMatchPlayerBattingScoreUpdateManyWithoutPlayerNestedInput
    bowling_score_player?: CricketMatchPlayerBowlingScoreUpdateManyWithoutPlayerNestedInput
  }

  export type CricketPlayerUncheckedUpdateInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    isSelected?: BoolFieldUpdateOperationsInput | boolean
    isCaptain?: BoolFieldUpdateOperationsInput | boolean
    isWicketKeeper?: BoolFieldUpdateOperationsInput | boolean
    isAllRounder?: BoolFieldUpdateOperationsInput | boolean
    isBatsman?: BoolFieldUpdateOperationsInput | boolean
    isBowler?: BoolFieldUpdateOperationsInput | boolean
    runs?: IntFieldUpdateOperationsInput | number
    noOfMatchesPlayed?: IntFieldUpdateOperationsInput | number
    noOfSixes?: IntFieldUpdateOperationsInput | number
    noOfFours?: IntFieldUpdateOperationsInput | number
    noOfWicketsTaken?: IntFieldUpdateOperationsInput | number
    noOfHalfCenturies?: IntFieldUpdateOperationsInput | number
    noOfCenturies?: IntFieldUpdateOperationsInput | number
    noOfWickets?: IntFieldUpdateOperationsInput | number
    matches?: CricketMatchUncheckedUpdateManyWithoutPlayersNestedInput
    user_cricket_players?: UsersUncheckedUpdateManyWithoutCricketPlayerNestedInput
    team_players?: CricketTeamUncheckedUpdateManyWithoutPlayersNestedInput
    batting_score_player?: CricketMatchPlayerBattingScoreUncheckedUpdateManyWithoutPlayerNestedInput
    bowling_score_player?: CricketMatchPlayerBowlingScoreUncheckedUpdateManyWithoutPlayerNestedInput
  }

  export type CricketPlayerCreateManyInput = {
    sis_id?: string
    userId: string
    teamId?: string | null
    isSelected?: boolean
    isCaptain?: boolean
    isWicketKeeper?: boolean
    isAllRounder?: boolean
    isBatsman?: boolean
    isBowler?: boolean
    runs?: number
    noOfMatchesPlayed?: number
    noOfSixes?: number
    noOfFours?: number
    noOfWicketsTaken?: number
    noOfHalfCenturies?: number
    noOfCenturies?: number
    noOfWickets?: number
  }

  export type CricketPlayerUpdateManyMutationInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    isSelected?: BoolFieldUpdateOperationsInput | boolean
    isCaptain?: BoolFieldUpdateOperationsInput | boolean
    isWicketKeeper?: BoolFieldUpdateOperationsInput | boolean
    isAllRounder?: BoolFieldUpdateOperationsInput | boolean
    isBatsman?: BoolFieldUpdateOperationsInput | boolean
    isBowler?: BoolFieldUpdateOperationsInput | boolean
    runs?: IntFieldUpdateOperationsInput | number
    noOfMatchesPlayed?: IntFieldUpdateOperationsInput | number
    noOfSixes?: IntFieldUpdateOperationsInput | number
    noOfFours?: IntFieldUpdateOperationsInput | number
    noOfWicketsTaken?: IntFieldUpdateOperationsInput | number
    noOfHalfCenturies?: IntFieldUpdateOperationsInput | number
    noOfCenturies?: IntFieldUpdateOperationsInput | number
    noOfWickets?: IntFieldUpdateOperationsInput | number
  }

  export type CricketPlayerUncheckedUpdateManyInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    isSelected?: BoolFieldUpdateOperationsInput | boolean
    isCaptain?: BoolFieldUpdateOperationsInput | boolean
    isWicketKeeper?: BoolFieldUpdateOperationsInput | boolean
    isAllRounder?: BoolFieldUpdateOperationsInput | boolean
    isBatsman?: BoolFieldUpdateOperationsInput | boolean
    isBowler?: BoolFieldUpdateOperationsInput | boolean
    runs?: IntFieldUpdateOperationsInput | number
    noOfMatchesPlayed?: IntFieldUpdateOperationsInput | number
    noOfSixes?: IntFieldUpdateOperationsInput | number
    noOfFours?: IntFieldUpdateOperationsInput | number
    noOfWicketsTaken?: IntFieldUpdateOperationsInput | number
    noOfHalfCenturies?: IntFieldUpdateOperationsInput | number
    noOfCenturies?: IntFieldUpdateOperationsInput | number
    noOfWickets?: IntFieldUpdateOperationsInput | number
  }

  export type CricketMatchCreateInput = {
    sis_id?: string
    played?: boolean
    tossDecision?: string | null
    date: Date | string
    venue?: string | null
    year: string
    dependency?: boolean
    dependentOn?: string | null
    team1Wickets?: number | null
    team2Wickets?: number | null
    team1Runs?: number | null
    team2Runs?: number | null
    team1Balls?: number | null
    team2Balls?: number | null
    overs?: number | null
    powerPlayOvers?: number | null
    overPerBowler?: number | null
    tossWonByTeam?: CricketTeamCreateNestedOneWithoutToss_winning_teamInput
    currentOver?: CricketOverCreateNestedOneWithoutMatch_current_overInput
    wonByTeam?: CricketTeamCreateNestedOneWithoutWinning_teamInput
    teamA?: CricketTeamCreateNestedOneWithoutCricketMatchTeamAInput
    teamB?: CricketTeamCreateNestedOneWithoutCricketMatchTeamBInput
    teamAScore?: CricketTeamMatchDataCreateNestedOneWithoutCricketMatchTeamAInput
    teamBScore?: CricketTeamMatchDataCreateNestedOneWithoutCricketMatchTeamBInput
    battingTeam?: CricketTeamMatchDataCreateNestedOneWithoutMatchBttingTeamInput
    bowlingTeam?: CricketTeamMatchDataCreateNestedOneWithoutMatchBowlingTeamInput
    players?: CricketPlayerCreateNestedManyWithoutMatchesInput
    over_match?: CricketOverCreateNestedManyWithoutMatchInput
    team_batting_score?: CricketMatchPlayerBattingScoreCreateNestedManyWithoutMatchInput
    team_bowling_score?: CricketMatchPlayerBowlingScoreCreateNestedManyWithoutMatchInput
  }

  export type CricketMatchUncheckedCreateInput = {
    sis_id?: string
    played?: boolean
    tossWonBy?: string | null
    tossDecision?: string | null
    date: Date | string
    venue?: string | null
    year: string
    dependency?: boolean
    dependentOn?: string | null
    team1Wickets?: number | null
    team2Wickets?: number | null
    team1Runs?: number | null
    team2Runs?: number | null
    team1Balls?: number | null
    team2Balls?: number | null
    overs?: number | null
    powerPlayOvers?: number | null
    overPerBowler?: number | null
    currentOverId?: string | null
    wonBy?: string | null
    teamAId?: string | null
    teamBId?: string | null
    teamAScoreId?: string | null
    teamBScoreId?: string | null
    battingTeamScoreId?: string | null
    bowlingTeamScoreId?: string | null
    players?: CricketPlayerUncheckedCreateNestedManyWithoutMatchesInput
    over_match?: CricketOverUncheckedCreateNestedManyWithoutMatchInput
    team_batting_score?: CricketMatchPlayerBattingScoreUncheckedCreateNestedManyWithoutMatchInput
    team_bowling_score?: CricketMatchPlayerBowlingScoreUncheckedCreateNestedManyWithoutMatchInput
  }

  export type CricketMatchUpdateInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    played?: BoolFieldUpdateOperationsInput | boolean
    tossDecision?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    year?: StringFieldUpdateOperationsInput | string
    dependency?: BoolFieldUpdateOperationsInput | boolean
    dependentOn?: NullableStringFieldUpdateOperationsInput | string | null
    team1Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team2Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team1Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team2Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team1Balls?: NullableIntFieldUpdateOperationsInput | number | null
    team2Balls?: NullableIntFieldUpdateOperationsInput | number | null
    overs?: NullableIntFieldUpdateOperationsInput | number | null
    powerPlayOvers?: NullableIntFieldUpdateOperationsInput | number | null
    overPerBowler?: NullableIntFieldUpdateOperationsInput | number | null
    tossWonByTeam?: CricketTeamUpdateOneWithoutToss_winning_teamNestedInput
    currentOver?: CricketOverUpdateOneWithoutMatch_current_overNestedInput
    wonByTeam?: CricketTeamUpdateOneWithoutWinning_teamNestedInput
    teamA?: CricketTeamUpdateOneWithoutCricketMatchTeamANestedInput
    teamB?: CricketTeamUpdateOneWithoutCricketMatchTeamBNestedInput
    teamAScore?: CricketTeamMatchDataUpdateOneWithoutCricketMatchTeamANestedInput
    teamBScore?: CricketTeamMatchDataUpdateOneWithoutCricketMatchTeamBNestedInput
    battingTeam?: CricketTeamMatchDataUpdateOneWithoutMatchBttingTeamNestedInput
    bowlingTeam?: CricketTeamMatchDataUpdateOneWithoutMatchBowlingTeamNestedInput
    players?: CricketPlayerUpdateManyWithoutMatchesNestedInput
    over_match?: CricketOverUpdateManyWithoutMatchNestedInput
    team_batting_score?: CricketMatchPlayerBattingScoreUpdateManyWithoutMatchNestedInput
    team_bowling_score?: CricketMatchPlayerBowlingScoreUpdateManyWithoutMatchNestedInput
  }

  export type CricketMatchUncheckedUpdateInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    played?: BoolFieldUpdateOperationsInput | boolean
    tossWonBy?: NullableStringFieldUpdateOperationsInput | string | null
    tossDecision?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    year?: StringFieldUpdateOperationsInput | string
    dependency?: BoolFieldUpdateOperationsInput | boolean
    dependentOn?: NullableStringFieldUpdateOperationsInput | string | null
    team1Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team2Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team1Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team2Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team1Balls?: NullableIntFieldUpdateOperationsInput | number | null
    team2Balls?: NullableIntFieldUpdateOperationsInput | number | null
    overs?: NullableIntFieldUpdateOperationsInput | number | null
    powerPlayOvers?: NullableIntFieldUpdateOperationsInput | number | null
    overPerBowler?: NullableIntFieldUpdateOperationsInput | number | null
    currentOverId?: NullableStringFieldUpdateOperationsInput | string | null
    wonBy?: NullableStringFieldUpdateOperationsInput | string | null
    teamAId?: NullableStringFieldUpdateOperationsInput | string | null
    teamBId?: NullableStringFieldUpdateOperationsInput | string | null
    teamAScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    teamBScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    battingTeamScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    bowlingTeamScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    players?: CricketPlayerUncheckedUpdateManyWithoutMatchesNestedInput
    over_match?: CricketOverUncheckedUpdateManyWithoutMatchNestedInput
    team_batting_score?: CricketMatchPlayerBattingScoreUncheckedUpdateManyWithoutMatchNestedInput
    team_bowling_score?: CricketMatchPlayerBowlingScoreUncheckedUpdateManyWithoutMatchNestedInput
  }

  export type CricketMatchCreateManyInput = {
    sis_id?: string
    played?: boolean
    tossWonBy?: string | null
    tossDecision?: string | null
    date: Date | string
    venue?: string | null
    year: string
    dependency?: boolean
    dependentOn?: string | null
    team1Wickets?: number | null
    team2Wickets?: number | null
    team1Runs?: number | null
    team2Runs?: number | null
    team1Balls?: number | null
    team2Balls?: number | null
    overs?: number | null
    powerPlayOvers?: number | null
    overPerBowler?: number | null
    currentOverId?: string | null
    wonBy?: string | null
    teamAId?: string | null
    teamBId?: string | null
    teamAScoreId?: string | null
    teamBScoreId?: string | null
    battingTeamScoreId?: string | null
    bowlingTeamScoreId?: string | null
  }

  export type CricketMatchUpdateManyMutationInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    played?: BoolFieldUpdateOperationsInput | boolean
    tossDecision?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    year?: StringFieldUpdateOperationsInput | string
    dependency?: BoolFieldUpdateOperationsInput | boolean
    dependentOn?: NullableStringFieldUpdateOperationsInput | string | null
    team1Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team2Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team1Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team2Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team1Balls?: NullableIntFieldUpdateOperationsInput | number | null
    team2Balls?: NullableIntFieldUpdateOperationsInput | number | null
    overs?: NullableIntFieldUpdateOperationsInput | number | null
    powerPlayOvers?: NullableIntFieldUpdateOperationsInput | number | null
    overPerBowler?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CricketMatchUncheckedUpdateManyInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    played?: BoolFieldUpdateOperationsInput | boolean
    tossWonBy?: NullableStringFieldUpdateOperationsInput | string | null
    tossDecision?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    year?: StringFieldUpdateOperationsInput | string
    dependency?: BoolFieldUpdateOperationsInput | boolean
    dependentOn?: NullableStringFieldUpdateOperationsInput | string | null
    team1Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team2Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team1Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team2Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team1Balls?: NullableIntFieldUpdateOperationsInput | number | null
    team2Balls?: NullableIntFieldUpdateOperationsInput | number | null
    overs?: NullableIntFieldUpdateOperationsInput | number | null
    powerPlayOvers?: NullableIntFieldUpdateOperationsInput | number | null
    overPerBowler?: NullableIntFieldUpdateOperationsInput | number | null
    currentOverId?: NullableStringFieldUpdateOperationsInput | string | null
    wonBy?: NullableStringFieldUpdateOperationsInput | string | null
    teamAId?: NullableStringFieldUpdateOperationsInput | string | null
    teamBId?: NullableStringFieldUpdateOperationsInput | string | null
    teamAScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    teamBScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    battingTeamScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    bowlingTeamScoreId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CricketTeamMatchDataCreateInput = {
    sis_id?: string
    matchId?: string | null
    name?: string | null
    runs?: number
    wideRuns?: number
    nbRuns?: number
    byeRuns?: number
    lbRuns?: number
    wickets?: number
    balls?: number
    batters?: CricketMatchPlayerBattingScoreCreateNestedManyWithoutMatch_battersInput
    bowlers?: CricketMatchPlayerBowlingScoreCreateNestedManyWithoutMatch_bowlersInput
    team?: CricketTeamCreateNestedOneWithoutCricket_match_teamDataInput
    cricketMatchTeamA?: CricketMatchCreateNestedManyWithoutTeamAScoreInput
    cricketMatchTeamB?: CricketMatchCreateNestedManyWithoutTeamBScoreInput
    matchBttingTeam?: CricketMatchCreateNestedManyWithoutBattingTeamInput
    matchBowlingTeam?: CricketMatchCreateNestedManyWithoutBowlingTeamInput
  }

  export type CricketTeamMatchDataUncheckedCreateInput = {
    sis_id?: string
    teamId?: string | null
    matchId?: string | null
    name?: string | null
    runs?: number
    wideRuns?: number
    nbRuns?: number
    byeRuns?: number
    lbRuns?: number
    wickets?: number
    balls?: number
    batters?: CricketMatchPlayerBattingScoreUncheckedCreateNestedManyWithoutMatch_battersInput
    bowlers?: CricketMatchPlayerBowlingScoreUncheckedCreateNestedManyWithoutMatch_bowlersInput
    cricketMatchTeamA?: CricketMatchUncheckedCreateNestedManyWithoutTeamAScoreInput
    cricketMatchTeamB?: CricketMatchUncheckedCreateNestedManyWithoutTeamBScoreInput
    matchBttingTeam?: CricketMatchUncheckedCreateNestedManyWithoutBattingTeamInput
    matchBowlingTeam?: CricketMatchUncheckedCreateNestedManyWithoutBowlingTeamInput
  }

  export type CricketTeamMatchDataUpdateInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    matchId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    runs?: IntFieldUpdateOperationsInput | number
    wideRuns?: IntFieldUpdateOperationsInput | number
    nbRuns?: IntFieldUpdateOperationsInput | number
    byeRuns?: IntFieldUpdateOperationsInput | number
    lbRuns?: IntFieldUpdateOperationsInput | number
    wickets?: IntFieldUpdateOperationsInput | number
    balls?: IntFieldUpdateOperationsInput | number
    batters?: CricketMatchPlayerBattingScoreUpdateManyWithoutMatch_battersNestedInput
    bowlers?: CricketMatchPlayerBowlingScoreUpdateManyWithoutMatch_bowlersNestedInput
    team?: CricketTeamUpdateOneWithoutCricket_match_teamDataNestedInput
    cricketMatchTeamA?: CricketMatchUpdateManyWithoutTeamAScoreNestedInput
    cricketMatchTeamB?: CricketMatchUpdateManyWithoutTeamBScoreNestedInput
    matchBttingTeam?: CricketMatchUpdateManyWithoutBattingTeamNestedInput
    matchBowlingTeam?: CricketMatchUpdateManyWithoutBowlingTeamNestedInput
  }

  export type CricketTeamMatchDataUncheckedUpdateInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    matchId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    runs?: IntFieldUpdateOperationsInput | number
    wideRuns?: IntFieldUpdateOperationsInput | number
    nbRuns?: IntFieldUpdateOperationsInput | number
    byeRuns?: IntFieldUpdateOperationsInput | number
    lbRuns?: IntFieldUpdateOperationsInput | number
    wickets?: IntFieldUpdateOperationsInput | number
    balls?: IntFieldUpdateOperationsInput | number
    batters?: CricketMatchPlayerBattingScoreUncheckedUpdateManyWithoutMatch_battersNestedInput
    bowlers?: CricketMatchPlayerBowlingScoreUncheckedUpdateManyWithoutMatch_bowlersNestedInput
    cricketMatchTeamA?: CricketMatchUncheckedUpdateManyWithoutTeamAScoreNestedInput
    cricketMatchTeamB?: CricketMatchUncheckedUpdateManyWithoutTeamBScoreNestedInput
    matchBttingTeam?: CricketMatchUncheckedUpdateManyWithoutBattingTeamNestedInput
    matchBowlingTeam?: CricketMatchUncheckedUpdateManyWithoutBowlingTeamNestedInput
  }

  export type CricketTeamMatchDataCreateManyInput = {
    sis_id?: string
    teamId?: string | null
    matchId?: string | null
    name?: string | null
    runs?: number
    wideRuns?: number
    nbRuns?: number
    byeRuns?: number
    lbRuns?: number
    wickets?: number
    balls?: number
  }

  export type CricketTeamMatchDataUpdateManyMutationInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    matchId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    runs?: IntFieldUpdateOperationsInput | number
    wideRuns?: IntFieldUpdateOperationsInput | number
    nbRuns?: IntFieldUpdateOperationsInput | number
    byeRuns?: IntFieldUpdateOperationsInput | number
    lbRuns?: IntFieldUpdateOperationsInput | number
    wickets?: IntFieldUpdateOperationsInput | number
    balls?: IntFieldUpdateOperationsInput | number
  }

  export type CricketTeamMatchDataUncheckedUpdateManyInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    matchId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    runs?: IntFieldUpdateOperationsInput | number
    wideRuns?: IntFieldUpdateOperationsInput | number
    nbRuns?: IntFieldUpdateOperationsInput | number
    byeRuns?: IntFieldUpdateOperationsInput | number
    lbRuns?: IntFieldUpdateOperationsInput | number
    wickets?: IntFieldUpdateOperationsInput | number
    balls?: IntFieldUpdateOperationsInput | number
  }

  export type CricketOverCreateInput = {
    sis_id?: string
    runs?: number
    wickets?: number
    totalBalls?: number
    validBalls?: number
    match: CricketMatchCreateNestedOneWithoutOver_matchInput
    strikerScore: CricketMatchPlayerBattingScoreCreateNestedOneWithoutOver_strikerInput
    nonStrikerScore: CricketMatchPlayerBattingScoreCreateNestedOneWithoutOver_non_strikerInput
    bowlerScore: CricketMatchPlayerBowlingScoreCreateNestedOneWithoutOver_bowlerInput
    balls?: CricketOverBallCreateNestedManyWithoutOverInput
    match_current_over?: CricketMatchCreateNestedManyWithoutCurrentOverInput
  }

  export type CricketOverUncheckedCreateInput = {
    sis_id?: string
    matchId: string
    runs?: number
    wickets?: number
    totalBalls?: number
    validBalls?: number
    strikerScoreId: string
    nonStrikerScoreId: string
    bowlerScoreId: string
    balls?: CricketOverBallUncheckedCreateNestedManyWithoutOverInput
    match_current_over?: CricketMatchUncheckedCreateNestedManyWithoutCurrentOverInput
  }

  export type CricketOverUpdateInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    runs?: IntFieldUpdateOperationsInput | number
    wickets?: IntFieldUpdateOperationsInput | number
    totalBalls?: IntFieldUpdateOperationsInput | number
    validBalls?: IntFieldUpdateOperationsInput | number
    match?: CricketMatchUpdateOneRequiredWithoutOver_matchNestedInput
    strikerScore?: CricketMatchPlayerBattingScoreUpdateOneRequiredWithoutOver_strikerNestedInput
    nonStrikerScore?: CricketMatchPlayerBattingScoreUpdateOneRequiredWithoutOver_non_strikerNestedInput
    bowlerScore?: CricketMatchPlayerBowlingScoreUpdateOneRequiredWithoutOver_bowlerNestedInput
    balls?: CricketOverBallUpdateManyWithoutOverNestedInput
    match_current_over?: CricketMatchUpdateManyWithoutCurrentOverNestedInput
  }

  export type CricketOverUncheckedUpdateInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    matchId?: StringFieldUpdateOperationsInput | string
    runs?: IntFieldUpdateOperationsInput | number
    wickets?: IntFieldUpdateOperationsInput | number
    totalBalls?: IntFieldUpdateOperationsInput | number
    validBalls?: IntFieldUpdateOperationsInput | number
    strikerScoreId?: StringFieldUpdateOperationsInput | string
    nonStrikerScoreId?: StringFieldUpdateOperationsInput | string
    bowlerScoreId?: StringFieldUpdateOperationsInput | string
    balls?: CricketOverBallUncheckedUpdateManyWithoutOverNestedInput
    match_current_over?: CricketMatchUncheckedUpdateManyWithoutCurrentOverNestedInput
  }

  export type CricketOverCreateManyInput = {
    sis_id?: string
    matchId: string
    runs?: number
    wickets?: number
    totalBalls?: number
    validBalls?: number
    strikerScoreId: string
    nonStrikerScoreId: string
    bowlerScoreId: string
  }

  export type CricketOverUpdateManyMutationInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    runs?: IntFieldUpdateOperationsInput | number
    wickets?: IntFieldUpdateOperationsInput | number
    totalBalls?: IntFieldUpdateOperationsInput | number
    validBalls?: IntFieldUpdateOperationsInput | number
  }

  export type CricketOverUncheckedUpdateManyInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    matchId?: StringFieldUpdateOperationsInput | string
    runs?: IntFieldUpdateOperationsInput | number
    wickets?: IntFieldUpdateOperationsInput | number
    totalBalls?: IntFieldUpdateOperationsInput | number
    validBalls?: IntFieldUpdateOperationsInput | number
    strikerScoreId?: StringFieldUpdateOperationsInput | string
    nonStrikerScoreId?: StringFieldUpdateOperationsInput | string
    bowlerScoreId?: StringFieldUpdateOperationsInput | string
  }

  export type CricketOverBallCreateInput = {
    sis_id?: string
    ballNo: number
    runs: number
    wicket?: boolean
    ballType?: $Enums.BallType
    extras?: number
    wicketType?: string | null
    deliveryType?: string | null
    over: CricketOverCreateNestedOneWithoutBallsInput
  }

  export type CricketOverBallUncheckedCreateInput = {
    sis_id?: string
    overId: string
    ballNo: number
    runs: number
    wicket?: boolean
    ballType?: $Enums.BallType
    extras?: number
    wicketType?: string | null
    deliveryType?: string | null
  }

  export type CricketOverBallUpdateInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    ballNo?: IntFieldUpdateOperationsInput | number
    runs?: IntFieldUpdateOperationsInput | number
    wicket?: BoolFieldUpdateOperationsInput | boolean
    ballType?: EnumBallTypeFieldUpdateOperationsInput | $Enums.BallType
    extras?: IntFieldUpdateOperationsInput | number
    wicketType?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryType?: NullableStringFieldUpdateOperationsInput | string | null
    over?: CricketOverUpdateOneRequiredWithoutBallsNestedInput
  }

  export type CricketOverBallUncheckedUpdateInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    overId?: StringFieldUpdateOperationsInput | string
    ballNo?: IntFieldUpdateOperationsInput | number
    runs?: IntFieldUpdateOperationsInput | number
    wicket?: BoolFieldUpdateOperationsInput | boolean
    ballType?: EnumBallTypeFieldUpdateOperationsInput | $Enums.BallType
    extras?: IntFieldUpdateOperationsInput | number
    wicketType?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryType?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CricketOverBallCreateManyInput = {
    sis_id?: string
    overId: string
    ballNo: number
    runs: number
    wicket?: boolean
    ballType?: $Enums.BallType
    extras?: number
    wicketType?: string | null
    deliveryType?: string | null
  }

  export type CricketOverBallUpdateManyMutationInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    ballNo?: IntFieldUpdateOperationsInput | number
    runs?: IntFieldUpdateOperationsInput | number
    wicket?: BoolFieldUpdateOperationsInput | boolean
    ballType?: EnumBallTypeFieldUpdateOperationsInput | $Enums.BallType
    extras?: IntFieldUpdateOperationsInput | number
    wicketType?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryType?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CricketOverBallUncheckedUpdateManyInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    overId?: StringFieldUpdateOperationsInput | string
    ballNo?: IntFieldUpdateOperationsInput | number
    runs?: IntFieldUpdateOperationsInput | number
    wicket?: BoolFieldUpdateOperationsInput | boolean
    ballType?: EnumBallTypeFieldUpdateOperationsInput | $Enums.BallType
    extras?: IntFieldUpdateOperationsInput | number
    wicketType?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryType?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CricketMatchPlayerBattingScoreCreateInput = {
    sis_id?: string
    runs?: number
    balls?: number
    fours?: number
    sixes?: number
    strikeRate?: number
    out?: boolean
    played?: boolean
    wicketType?: string | null
    player?: CricketPlayerCreateNestedOneWithoutBatting_score_playerInput
    match: CricketMatchCreateNestedOneWithoutTeam_batting_scoreInput
    team: CricketTeamCreateNestedOneWithoutCricket_match_player_batting_scoreInput
    match_batters?: CricketTeamMatchDataCreateNestedManyWithoutBattersInput
    over_striker?: CricketOverCreateNestedManyWithoutStrikerScoreInput
    over_non_striker?: CricketOverCreateNestedManyWithoutNonStrikerScoreInput
  }

  export type CricketMatchPlayerBattingScoreUncheckedCreateInput = {
    sis_id?: string
    runs?: number
    balls?: number
    fours?: number
    sixes?: number
    strikeRate?: number
    out?: boolean
    played?: boolean
    wicketType?: string | null
    playerId?: string | null
    matchId: string
    teamId: string
    match_batters?: CricketTeamMatchDataUncheckedCreateNestedManyWithoutBattersInput
    over_striker?: CricketOverUncheckedCreateNestedManyWithoutStrikerScoreInput
    over_non_striker?: CricketOverUncheckedCreateNestedManyWithoutNonStrikerScoreInput
  }

  export type CricketMatchPlayerBattingScoreUpdateInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    runs?: IntFieldUpdateOperationsInput | number
    balls?: IntFieldUpdateOperationsInput | number
    fours?: IntFieldUpdateOperationsInput | number
    sixes?: IntFieldUpdateOperationsInput | number
    strikeRate?: FloatFieldUpdateOperationsInput | number
    out?: BoolFieldUpdateOperationsInput | boolean
    played?: BoolFieldUpdateOperationsInput | boolean
    wicketType?: NullableStringFieldUpdateOperationsInput | string | null
    player?: CricketPlayerUpdateOneWithoutBatting_score_playerNestedInput
    match?: CricketMatchUpdateOneRequiredWithoutTeam_batting_scoreNestedInput
    team?: CricketTeamUpdateOneRequiredWithoutCricket_match_player_batting_scoreNestedInput
    match_batters?: CricketTeamMatchDataUpdateManyWithoutBattersNestedInput
    over_striker?: CricketOverUpdateManyWithoutStrikerScoreNestedInput
    over_non_striker?: CricketOverUpdateManyWithoutNonStrikerScoreNestedInput
  }

  export type CricketMatchPlayerBattingScoreUncheckedUpdateInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    runs?: IntFieldUpdateOperationsInput | number
    balls?: IntFieldUpdateOperationsInput | number
    fours?: IntFieldUpdateOperationsInput | number
    sixes?: IntFieldUpdateOperationsInput | number
    strikeRate?: FloatFieldUpdateOperationsInput | number
    out?: BoolFieldUpdateOperationsInput | boolean
    played?: BoolFieldUpdateOperationsInput | boolean
    wicketType?: NullableStringFieldUpdateOperationsInput | string | null
    playerId?: NullableStringFieldUpdateOperationsInput | string | null
    matchId?: StringFieldUpdateOperationsInput | string
    teamId?: StringFieldUpdateOperationsInput | string
    match_batters?: CricketTeamMatchDataUncheckedUpdateManyWithoutBattersNestedInput
    over_striker?: CricketOverUncheckedUpdateManyWithoutStrikerScoreNestedInput
    over_non_striker?: CricketOverUncheckedUpdateManyWithoutNonStrikerScoreNestedInput
  }

  export type CricketMatchPlayerBattingScoreCreateManyInput = {
    sis_id?: string
    runs?: number
    balls?: number
    fours?: number
    sixes?: number
    strikeRate?: number
    out?: boolean
    played?: boolean
    wicketType?: string | null
    playerId?: string | null
    matchId: string
    teamId: string
  }

  export type CricketMatchPlayerBattingScoreUpdateManyMutationInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    runs?: IntFieldUpdateOperationsInput | number
    balls?: IntFieldUpdateOperationsInput | number
    fours?: IntFieldUpdateOperationsInput | number
    sixes?: IntFieldUpdateOperationsInput | number
    strikeRate?: FloatFieldUpdateOperationsInput | number
    out?: BoolFieldUpdateOperationsInput | boolean
    played?: BoolFieldUpdateOperationsInput | boolean
    wicketType?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CricketMatchPlayerBattingScoreUncheckedUpdateManyInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    runs?: IntFieldUpdateOperationsInput | number
    balls?: IntFieldUpdateOperationsInput | number
    fours?: IntFieldUpdateOperationsInput | number
    sixes?: IntFieldUpdateOperationsInput | number
    strikeRate?: FloatFieldUpdateOperationsInput | number
    out?: BoolFieldUpdateOperationsInput | boolean
    played?: BoolFieldUpdateOperationsInput | boolean
    wicketType?: NullableStringFieldUpdateOperationsInput | string | null
    playerId?: NullableStringFieldUpdateOperationsInput | string | null
    matchId?: StringFieldUpdateOperationsInput | string
    teamId?: StringFieldUpdateOperationsInput | string
  }

  export type CricketMatchPlayerBowlingScoreCreateInput = {
    sis_id?: string
    runs?: number
    balls?: number
    fours?: number
    sixes?: number
    played?: boolean
    wickets?: number
    player?: CricketPlayerCreateNestedOneWithoutBowling_score_playerInput
    match: CricketMatchCreateNestedOneWithoutTeam_bowling_scoreInput
    team: CricketTeamCreateNestedOneWithoutCricket_match_player_bowling_scoreInput
    match_bowlers?: CricketTeamMatchDataCreateNestedManyWithoutBowlersInput
    over_bowler?: CricketOverCreateNestedManyWithoutBowlerScoreInput
  }

  export type CricketMatchPlayerBowlingScoreUncheckedCreateInput = {
    sis_id?: string
    runs?: number
    balls?: number
    fours?: number
    sixes?: number
    played?: boolean
    wickets?: number
    playerId?: string | null
    matchId: string
    teamId: string
    match_bowlers?: CricketTeamMatchDataUncheckedCreateNestedManyWithoutBowlersInput
    over_bowler?: CricketOverUncheckedCreateNestedManyWithoutBowlerScoreInput
  }

  export type CricketMatchPlayerBowlingScoreUpdateInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    runs?: IntFieldUpdateOperationsInput | number
    balls?: IntFieldUpdateOperationsInput | number
    fours?: IntFieldUpdateOperationsInput | number
    sixes?: IntFieldUpdateOperationsInput | number
    played?: BoolFieldUpdateOperationsInput | boolean
    wickets?: IntFieldUpdateOperationsInput | number
    player?: CricketPlayerUpdateOneWithoutBowling_score_playerNestedInput
    match?: CricketMatchUpdateOneRequiredWithoutTeam_bowling_scoreNestedInput
    team?: CricketTeamUpdateOneRequiredWithoutCricket_match_player_bowling_scoreNestedInput
    match_bowlers?: CricketTeamMatchDataUpdateManyWithoutBowlersNestedInput
    over_bowler?: CricketOverUpdateManyWithoutBowlerScoreNestedInput
  }

  export type CricketMatchPlayerBowlingScoreUncheckedUpdateInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    runs?: IntFieldUpdateOperationsInput | number
    balls?: IntFieldUpdateOperationsInput | number
    fours?: IntFieldUpdateOperationsInput | number
    sixes?: IntFieldUpdateOperationsInput | number
    played?: BoolFieldUpdateOperationsInput | boolean
    wickets?: IntFieldUpdateOperationsInput | number
    playerId?: NullableStringFieldUpdateOperationsInput | string | null
    matchId?: StringFieldUpdateOperationsInput | string
    teamId?: StringFieldUpdateOperationsInput | string
    match_bowlers?: CricketTeamMatchDataUncheckedUpdateManyWithoutBowlersNestedInput
    over_bowler?: CricketOverUncheckedUpdateManyWithoutBowlerScoreNestedInput
  }

  export type CricketMatchPlayerBowlingScoreCreateManyInput = {
    sis_id?: string
    runs?: number
    balls?: number
    fours?: number
    sixes?: number
    played?: boolean
    wickets?: number
    playerId?: string | null
    matchId: string
    teamId: string
  }

  export type CricketMatchPlayerBowlingScoreUpdateManyMutationInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    runs?: IntFieldUpdateOperationsInput | number
    balls?: IntFieldUpdateOperationsInput | number
    fours?: IntFieldUpdateOperationsInput | number
    sixes?: IntFieldUpdateOperationsInput | number
    played?: BoolFieldUpdateOperationsInput | boolean
    wickets?: IntFieldUpdateOperationsInput | number
  }

  export type CricketMatchPlayerBowlingScoreUncheckedUpdateManyInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    runs?: IntFieldUpdateOperationsInput | number
    balls?: IntFieldUpdateOperationsInput | number
    fours?: IntFieldUpdateOperationsInput | number
    sixes?: IntFieldUpdateOperationsInput | number
    played?: BoolFieldUpdateOperationsInput | boolean
    wickets?: IntFieldUpdateOperationsInput | number
    playerId?: NullableStringFieldUpdateOperationsInput | string | null
    matchId?: StringFieldUpdateOperationsInput | string
    teamId?: StringFieldUpdateOperationsInput | string
  }

  export type VerificationTokenCreateInput = {
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
    expiration: Date | string
    user?: UsersCreateNestedOneWithoutVerification_tokenInput
  }

  export type VerificationTokenUncheckedCreateInput = {
    sis_id?: string
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
    expiration: Date | string
  }

  export type VerificationTokenUpdateInput = {
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiration?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UsersUpdateOneRequiredWithoutVerification_tokenNestedInput
  }

  export type VerificationTokenUncheckedUpdateInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiration?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenCreateManyInput = {
    sis_id?: string
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
    expiration: Date | string
  }

  export type VerificationTokenUpdateManyMutationInput = {
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiration?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateManyInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiration?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TicketCreateInput = {
    sis_id?: string
    userEmail: string
    userName: string
    title: string
    description: string
    visited?: boolean
    status?: string
    createdAt?: Date | string
    closedAt?: Date | string | null
    user?: UsersCreateNestedOneWithoutUser_ticketsInput
  }

  export type TicketUncheckedCreateInput = {
    sis_id?: string
    userEmail: string
    userName: string
    userId?: string | null
    title: string
    description: string
    visited?: boolean
    status?: string
    createdAt?: Date | string
    closedAt?: Date | string | null
  }

  export type TicketUpdateInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    userEmail?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    visited?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UsersUpdateOneWithoutUser_ticketsNestedInput
  }

  export type TicketUncheckedUpdateInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    userEmail?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    visited?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TicketCreateManyInput = {
    sis_id?: string
    userEmail: string
    userName: string
    userId?: string | null
    title: string
    description: string
    visited?: boolean
    status?: string
    createdAt?: Date | string
    closedAt?: Date | string | null
  }

  export type TicketUpdateManyMutationInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    userEmail?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    visited?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TicketUncheckedUpdateManyInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    userEmail?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    visited?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type OTPCountOrderByAggregateInput = {
    otp?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
  }

  export type OTPMaxOrderByAggregateInput = {
    otp?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
  }

  export type OTPMinOrderByAggregateInput = {
    otp?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumRoleNullableListFilter<$PrismaModel = never> = {
    equals?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel> | null
    has?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel> | null
    hasEvery?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    hasSome?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type CricketPlayerNullableRelationFilter = {
    is?: CricketPlayerWhereInput | null
    isNot?: CricketPlayerWhereInput | null
  }

  export type CricketPlayerListRelationFilter = {
    every?: CricketPlayerWhereInput
    some?: CricketPlayerWhereInput
    none?: CricketPlayerWhereInput
  }

  export type VerificationTokenListRelationFilter = {
    every?: VerificationTokenWhereInput
    some?: VerificationTokenWhereInput
    none?: VerificationTokenWhereInput
  }

  export type TicketListRelationFilter = {
    every?: TicketWhereInput
    some?: TicketWhereInput
    none?: TicketWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type CricketPlayerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VerificationTokenOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TicketOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsersCountOrderByAggregateInput = {
    userId?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    token?: SortOrder
    roles?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    rec_status?: SortOrder
    cricketPlayerId?: SortOrder
  }

  export type UsersMaxOrderByAggregateInput = {
    userId?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    rec_status?: SortOrder
    cricketPlayerId?: SortOrder
  }

  export type UsersMinOrderByAggregateInput = {
    userId?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    rec_status?: SortOrder
    cricketPlayerId?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type CricketMatchListRelationFilter = {
    every?: CricketMatchWhereInput
    some?: CricketMatchWhereInput
    none?: CricketMatchWhereInput
  }

  export type CricketTeamMatchDataListRelationFilter = {
    every?: CricketTeamMatchDataWhereInput
    some?: CricketTeamMatchDataWhereInput
    none?: CricketTeamMatchDataWhereInput
  }

  export type CricketMatchPlayerBattingScoreListRelationFilter = {
    every?: CricketMatchPlayerBattingScoreWhereInput
    some?: CricketMatchPlayerBattingScoreWhereInput
    none?: CricketMatchPlayerBattingScoreWhereInput
  }

  export type CricketMatchPlayerBowlingScoreListRelationFilter = {
    every?: CricketMatchPlayerBowlingScoreWhereInput
    some?: CricketMatchPlayerBowlingScoreWhereInput
    none?: CricketMatchPlayerBowlingScoreWhereInput
  }

  export type CricketMatchOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CricketTeamMatchDataOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CricketMatchPlayerBattingScoreOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CricketMatchPlayerBowlingScoreOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CricketTeamCountOrderByAggregateInput = {
    sis_id?: SortOrder
    name?: SortOrder
    year?: SortOrder
  }

  export type CricketTeamMaxOrderByAggregateInput = {
    sis_id?: SortOrder
    name?: SortOrder
    year?: SortOrder
  }

  export type CricketTeamMinOrderByAggregateInput = {
    sis_id?: SortOrder
    name?: SortOrder
    year?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type UsersRelationFilter = {
    is?: UsersWhereInput
    isNot?: UsersWhereInput
  }

  export type CricketTeamNullableRelationFilter = {
    is?: CricketTeamWhereInput | null
    isNot?: CricketTeamWhereInput | null
  }

  export type UsersListRelationFilter = {
    every?: UsersWhereInput
    some?: UsersWhereInput
    none?: UsersWhereInput
  }

  export type CricketTeamListRelationFilter = {
    every?: CricketTeamWhereInput
    some?: CricketTeamWhereInput
    none?: CricketTeamWhereInput
  }

  export type UsersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CricketTeamOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CricketPlayerCountOrderByAggregateInput = {
    sis_id?: SortOrder
    userId?: SortOrder
    teamId?: SortOrder
    isSelected?: SortOrder
    isCaptain?: SortOrder
    isWicketKeeper?: SortOrder
    isAllRounder?: SortOrder
    isBatsman?: SortOrder
    isBowler?: SortOrder
    runs?: SortOrder
    noOfMatchesPlayed?: SortOrder
    noOfSixes?: SortOrder
    noOfFours?: SortOrder
    noOfWicketsTaken?: SortOrder
    noOfHalfCenturies?: SortOrder
    noOfCenturies?: SortOrder
    noOfWickets?: SortOrder
  }

  export type CricketPlayerAvgOrderByAggregateInput = {
    runs?: SortOrder
    noOfMatchesPlayed?: SortOrder
    noOfSixes?: SortOrder
    noOfFours?: SortOrder
    noOfWicketsTaken?: SortOrder
    noOfHalfCenturies?: SortOrder
    noOfCenturies?: SortOrder
    noOfWickets?: SortOrder
  }

  export type CricketPlayerMaxOrderByAggregateInput = {
    sis_id?: SortOrder
    userId?: SortOrder
    teamId?: SortOrder
    isSelected?: SortOrder
    isCaptain?: SortOrder
    isWicketKeeper?: SortOrder
    isAllRounder?: SortOrder
    isBatsman?: SortOrder
    isBowler?: SortOrder
    runs?: SortOrder
    noOfMatchesPlayed?: SortOrder
    noOfSixes?: SortOrder
    noOfFours?: SortOrder
    noOfWicketsTaken?: SortOrder
    noOfHalfCenturies?: SortOrder
    noOfCenturies?: SortOrder
    noOfWickets?: SortOrder
  }

  export type CricketPlayerMinOrderByAggregateInput = {
    sis_id?: SortOrder
    userId?: SortOrder
    teamId?: SortOrder
    isSelected?: SortOrder
    isCaptain?: SortOrder
    isWicketKeeper?: SortOrder
    isAllRounder?: SortOrder
    isBatsman?: SortOrder
    isBowler?: SortOrder
    runs?: SortOrder
    noOfMatchesPlayed?: SortOrder
    noOfSixes?: SortOrder
    noOfFours?: SortOrder
    noOfWicketsTaken?: SortOrder
    noOfHalfCenturies?: SortOrder
    noOfCenturies?: SortOrder
    noOfWickets?: SortOrder
  }

  export type CricketPlayerSumOrderByAggregateInput = {
    runs?: SortOrder
    noOfMatchesPlayed?: SortOrder
    noOfSixes?: SortOrder
    noOfFours?: SortOrder
    noOfWicketsTaken?: SortOrder
    noOfHalfCenturies?: SortOrder
    noOfCenturies?: SortOrder
    noOfWickets?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type CricketOverNullableRelationFilter = {
    is?: CricketOverWhereInput | null
    isNot?: CricketOverWhereInput | null
  }

  export type CricketTeamMatchDataNullableRelationFilter = {
    is?: CricketTeamMatchDataWhereInput | null
    isNot?: CricketTeamMatchDataWhereInput | null
  }

  export type CricketOverListRelationFilter = {
    every?: CricketOverWhereInput
    some?: CricketOverWhereInput
    none?: CricketOverWhereInput
  }

  export type CricketOverOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CricketMatchCountOrderByAggregateInput = {
    sis_id?: SortOrder
    played?: SortOrder
    tossWonBy?: SortOrder
    tossDecision?: SortOrder
    date?: SortOrder
    venue?: SortOrder
    year?: SortOrder
    dependency?: SortOrder
    dependentOn?: SortOrder
    team1Wickets?: SortOrder
    team2Wickets?: SortOrder
    team1Runs?: SortOrder
    team2Runs?: SortOrder
    team1Balls?: SortOrder
    team2Balls?: SortOrder
    overs?: SortOrder
    powerPlayOvers?: SortOrder
    overPerBowler?: SortOrder
    currentOverId?: SortOrder
    wonBy?: SortOrder
    teamAId?: SortOrder
    teamBId?: SortOrder
    teamAScoreId?: SortOrder
    teamBScoreId?: SortOrder
    battingTeamScoreId?: SortOrder
    bowlingTeamScoreId?: SortOrder
  }

  export type CricketMatchAvgOrderByAggregateInput = {
    team1Wickets?: SortOrder
    team2Wickets?: SortOrder
    team1Runs?: SortOrder
    team2Runs?: SortOrder
    team1Balls?: SortOrder
    team2Balls?: SortOrder
    overs?: SortOrder
    powerPlayOvers?: SortOrder
    overPerBowler?: SortOrder
  }

  export type CricketMatchMaxOrderByAggregateInput = {
    sis_id?: SortOrder
    played?: SortOrder
    tossWonBy?: SortOrder
    tossDecision?: SortOrder
    date?: SortOrder
    venue?: SortOrder
    year?: SortOrder
    dependency?: SortOrder
    dependentOn?: SortOrder
    team1Wickets?: SortOrder
    team2Wickets?: SortOrder
    team1Runs?: SortOrder
    team2Runs?: SortOrder
    team1Balls?: SortOrder
    team2Balls?: SortOrder
    overs?: SortOrder
    powerPlayOvers?: SortOrder
    overPerBowler?: SortOrder
    currentOverId?: SortOrder
    wonBy?: SortOrder
    teamAId?: SortOrder
    teamBId?: SortOrder
    teamAScoreId?: SortOrder
    teamBScoreId?: SortOrder
    battingTeamScoreId?: SortOrder
    bowlingTeamScoreId?: SortOrder
  }

  export type CricketMatchMinOrderByAggregateInput = {
    sis_id?: SortOrder
    played?: SortOrder
    tossWonBy?: SortOrder
    tossDecision?: SortOrder
    date?: SortOrder
    venue?: SortOrder
    year?: SortOrder
    dependency?: SortOrder
    dependentOn?: SortOrder
    team1Wickets?: SortOrder
    team2Wickets?: SortOrder
    team1Runs?: SortOrder
    team2Runs?: SortOrder
    team1Balls?: SortOrder
    team2Balls?: SortOrder
    overs?: SortOrder
    powerPlayOvers?: SortOrder
    overPerBowler?: SortOrder
    currentOverId?: SortOrder
    wonBy?: SortOrder
    teamAId?: SortOrder
    teamBId?: SortOrder
    teamAScoreId?: SortOrder
    teamBScoreId?: SortOrder
    battingTeamScoreId?: SortOrder
    bowlingTeamScoreId?: SortOrder
  }

  export type CricketMatchSumOrderByAggregateInput = {
    team1Wickets?: SortOrder
    team2Wickets?: SortOrder
    team1Runs?: SortOrder
    team2Runs?: SortOrder
    team1Balls?: SortOrder
    team2Balls?: SortOrder
    overs?: SortOrder
    powerPlayOvers?: SortOrder
    overPerBowler?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type CricketTeamMatchDataTeamIdMatchIdCompoundUniqueInput = {
    teamId: string
    matchId: string
  }

  export type CricketTeamMatchDataCountOrderByAggregateInput = {
    sis_id?: SortOrder
    teamId?: SortOrder
    matchId?: SortOrder
    name?: SortOrder
    runs?: SortOrder
    wideRuns?: SortOrder
    nbRuns?: SortOrder
    byeRuns?: SortOrder
    lbRuns?: SortOrder
    wickets?: SortOrder
    balls?: SortOrder
  }

  export type CricketTeamMatchDataAvgOrderByAggregateInput = {
    runs?: SortOrder
    wideRuns?: SortOrder
    nbRuns?: SortOrder
    byeRuns?: SortOrder
    lbRuns?: SortOrder
    wickets?: SortOrder
    balls?: SortOrder
  }

  export type CricketTeamMatchDataMaxOrderByAggregateInput = {
    sis_id?: SortOrder
    teamId?: SortOrder
    matchId?: SortOrder
    name?: SortOrder
    runs?: SortOrder
    wideRuns?: SortOrder
    nbRuns?: SortOrder
    byeRuns?: SortOrder
    lbRuns?: SortOrder
    wickets?: SortOrder
    balls?: SortOrder
  }

  export type CricketTeamMatchDataMinOrderByAggregateInput = {
    sis_id?: SortOrder
    teamId?: SortOrder
    matchId?: SortOrder
    name?: SortOrder
    runs?: SortOrder
    wideRuns?: SortOrder
    nbRuns?: SortOrder
    byeRuns?: SortOrder
    lbRuns?: SortOrder
    wickets?: SortOrder
    balls?: SortOrder
  }

  export type CricketTeamMatchDataSumOrderByAggregateInput = {
    runs?: SortOrder
    wideRuns?: SortOrder
    nbRuns?: SortOrder
    byeRuns?: SortOrder
    lbRuns?: SortOrder
    wickets?: SortOrder
    balls?: SortOrder
  }

  export type CricketMatchRelationFilter = {
    is?: CricketMatchWhereInput
    isNot?: CricketMatchWhereInput
  }

  export type CricketMatchPlayerBattingScoreRelationFilter = {
    is?: CricketMatchPlayerBattingScoreWhereInput
    isNot?: CricketMatchPlayerBattingScoreWhereInput
  }

  export type CricketMatchPlayerBowlingScoreRelationFilter = {
    is?: CricketMatchPlayerBowlingScoreWhereInput
    isNot?: CricketMatchPlayerBowlingScoreWhereInput
  }

  export type CricketOverBallListRelationFilter = {
    every?: CricketOverBallWhereInput
    some?: CricketOverBallWhereInput
    none?: CricketOverBallWhereInput
  }

  export type CricketOverBallOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CricketOverCountOrderByAggregateInput = {
    sis_id?: SortOrder
    matchId?: SortOrder
    runs?: SortOrder
    wickets?: SortOrder
    totalBalls?: SortOrder
    validBalls?: SortOrder
    strikerScoreId?: SortOrder
    nonStrikerScoreId?: SortOrder
    bowlerScoreId?: SortOrder
  }

  export type CricketOverAvgOrderByAggregateInput = {
    runs?: SortOrder
    wickets?: SortOrder
    totalBalls?: SortOrder
    validBalls?: SortOrder
  }

  export type CricketOverMaxOrderByAggregateInput = {
    sis_id?: SortOrder
    matchId?: SortOrder
    runs?: SortOrder
    wickets?: SortOrder
    totalBalls?: SortOrder
    validBalls?: SortOrder
    strikerScoreId?: SortOrder
    nonStrikerScoreId?: SortOrder
    bowlerScoreId?: SortOrder
  }

  export type CricketOverMinOrderByAggregateInput = {
    sis_id?: SortOrder
    matchId?: SortOrder
    runs?: SortOrder
    wickets?: SortOrder
    totalBalls?: SortOrder
    validBalls?: SortOrder
    strikerScoreId?: SortOrder
    nonStrikerScoreId?: SortOrder
    bowlerScoreId?: SortOrder
  }

  export type CricketOverSumOrderByAggregateInput = {
    runs?: SortOrder
    wickets?: SortOrder
    totalBalls?: SortOrder
    validBalls?: SortOrder
  }

  export type EnumBallTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.BallType | EnumBallTypeFieldRefInput<$PrismaModel>
    in?: $Enums.BallType[] | ListEnumBallTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.BallType[] | ListEnumBallTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumBallTypeFilter<$PrismaModel> | $Enums.BallType
  }

  export type CricketOverRelationFilter = {
    is?: CricketOverWhereInput
    isNot?: CricketOverWhereInput
  }

  export type CricketOverBallCountOrderByAggregateInput = {
    sis_id?: SortOrder
    overId?: SortOrder
    ballNo?: SortOrder
    runs?: SortOrder
    wicket?: SortOrder
    ballType?: SortOrder
    extras?: SortOrder
    wicketType?: SortOrder
    deliveryType?: SortOrder
  }

  export type CricketOverBallAvgOrderByAggregateInput = {
    ballNo?: SortOrder
    runs?: SortOrder
    extras?: SortOrder
  }

  export type CricketOverBallMaxOrderByAggregateInput = {
    sis_id?: SortOrder
    overId?: SortOrder
    ballNo?: SortOrder
    runs?: SortOrder
    wicket?: SortOrder
    ballType?: SortOrder
    extras?: SortOrder
    wicketType?: SortOrder
    deliveryType?: SortOrder
  }

  export type CricketOverBallMinOrderByAggregateInput = {
    sis_id?: SortOrder
    overId?: SortOrder
    ballNo?: SortOrder
    runs?: SortOrder
    wicket?: SortOrder
    ballType?: SortOrder
    extras?: SortOrder
    wicketType?: SortOrder
    deliveryType?: SortOrder
  }

  export type CricketOverBallSumOrderByAggregateInput = {
    ballNo?: SortOrder
    runs?: SortOrder
    extras?: SortOrder
  }

  export type EnumBallTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BallType | EnumBallTypeFieldRefInput<$PrismaModel>
    in?: $Enums.BallType[] | ListEnumBallTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.BallType[] | ListEnumBallTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumBallTypeWithAggregatesFilter<$PrismaModel> | $Enums.BallType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBallTypeFilter<$PrismaModel>
    _max?: NestedEnumBallTypeFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type CricketTeamRelationFilter = {
    is?: CricketTeamWhereInput
    isNot?: CricketTeamWhereInput
  }

  export type CricketMatchPlayerBattingScoreMatchIdPlayerIdCompoundUniqueInput = {
    matchId: string
    playerId: string
  }

  export type CricketMatchPlayerBattingScoreCountOrderByAggregateInput = {
    sis_id?: SortOrder
    runs?: SortOrder
    balls?: SortOrder
    fours?: SortOrder
    sixes?: SortOrder
    strikeRate?: SortOrder
    out?: SortOrder
    played?: SortOrder
    wicketType?: SortOrder
    playerId?: SortOrder
    matchId?: SortOrder
    teamId?: SortOrder
  }

  export type CricketMatchPlayerBattingScoreAvgOrderByAggregateInput = {
    runs?: SortOrder
    balls?: SortOrder
    fours?: SortOrder
    sixes?: SortOrder
    strikeRate?: SortOrder
  }

  export type CricketMatchPlayerBattingScoreMaxOrderByAggregateInput = {
    sis_id?: SortOrder
    runs?: SortOrder
    balls?: SortOrder
    fours?: SortOrder
    sixes?: SortOrder
    strikeRate?: SortOrder
    out?: SortOrder
    played?: SortOrder
    wicketType?: SortOrder
    playerId?: SortOrder
    matchId?: SortOrder
    teamId?: SortOrder
  }

  export type CricketMatchPlayerBattingScoreMinOrderByAggregateInput = {
    sis_id?: SortOrder
    runs?: SortOrder
    balls?: SortOrder
    fours?: SortOrder
    sixes?: SortOrder
    strikeRate?: SortOrder
    out?: SortOrder
    played?: SortOrder
    wicketType?: SortOrder
    playerId?: SortOrder
    matchId?: SortOrder
    teamId?: SortOrder
  }

  export type CricketMatchPlayerBattingScoreSumOrderByAggregateInput = {
    runs?: SortOrder
    balls?: SortOrder
    fours?: SortOrder
    sixes?: SortOrder
    strikeRate?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type CricketMatchPlayerBowlingScoreMatchIdPlayerIdCompoundUniqueInput = {
    matchId: string
    playerId: string
  }

  export type CricketMatchPlayerBowlingScoreCountOrderByAggregateInput = {
    sis_id?: SortOrder
    runs?: SortOrder
    balls?: SortOrder
    fours?: SortOrder
    sixes?: SortOrder
    played?: SortOrder
    wickets?: SortOrder
    playerId?: SortOrder
    matchId?: SortOrder
    teamId?: SortOrder
  }

  export type CricketMatchPlayerBowlingScoreAvgOrderByAggregateInput = {
    runs?: SortOrder
    balls?: SortOrder
    fours?: SortOrder
    sixes?: SortOrder
    wickets?: SortOrder
  }

  export type CricketMatchPlayerBowlingScoreMaxOrderByAggregateInput = {
    sis_id?: SortOrder
    runs?: SortOrder
    balls?: SortOrder
    fours?: SortOrder
    sixes?: SortOrder
    played?: SortOrder
    wickets?: SortOrder
    playerId?: SortOrder
    matchId?: SortOrder
    teamId?: SortOrder
  }

  export type CricketMatchPlayerBowlingScoreMinOrderByAggregateInput = {
    sis_id?: SortOrder
    runs?: SortOrder
    balls?: SortOrder
    fours?: SortOrder
    sixes?: SortOrder
    played?: SortOrder
    wickets?: SortOrder
    playerId?: SortOrder
    matchId?: SortOrder
    teamId?: SortOrder
  }

  export type CricketMatchPlayerBowlingScoreSumOrderByAggregateInput = {
    runs?: SortOrder
    balls?: SortOrder
    fours?: SortOrder
    sixes?: SortOrder
    wickets?: SortOrder
  }

  export type VerificationTokenCountOrderByAggregateInput = {
    sis_id?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    expiration?: SortOrder
  }

  export type VerificationTokenMaxOrderByAggregateInput = {
    sis_id?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    expiration?: SortOrder
  }

  export type VerificationTokenMinOrderByAggregateInput = {
    sis_id?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    expiration?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type UsersNullableRelationFilter = {
    is?: UsersWhereInput | null
    isNot?: UsersWhereInput | null
  }

  export type TicketCountOrderByAggregateInput = {
    sis_id?: SortOrder
    userEmail?: SortOrder
    userName?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    visited?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    closedAt?: SortOrder
  }

  export type TicketMaxOrderByAggregateInput = {
    sis_id?: SortOrder
    userEmail?: SortOrder
    userName?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    visited?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    closedAt?: SortOrder
  }

  export type TicketMinOrderByAggregateInput = {
    sis_id?: SortOrder
    userEmail?: SortOrder
    userName?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    visited?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    closedAt?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UsersCreaterolesInput = {
    set: $Enums.Role[]
  }

  export type CricketPlayerCreateNestedOneWithoutUser_cricket_playersInput = {
    create?: XOR<CricketPlayerCreateWithoutUser_cricket_playersInput, CricketPlayerUncheckedCreateWithoutUser_cricket_playersInput>
    connectOrCreate?: CricketPlayerCreateOrConnectWithoutUser_cricket_playersInput
    connect?: CricketPlayerWhereUniqueInput
  }

  export type CricketPlayerCreateNestedManyWithoutUserInput = {
    create?: XOR<CricketPlayerCreateWithoutUserInput, CricketPlayerUncheckedCreateWithoutUserInput> | CricketPlayerCreateWithoutUserInput[] | CricketPlayerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CricketPlayerCreateOrConnectWithoutUserInput | CricketPlayerCreateOrConnectWithoutUserInput[]
    createMany?: CricketPlayerCreateManyUserInputEnvelope
    connect?: CricketPlayerWhereUniqueInput | CricketPlayerWhereUniqueInput[]
  }

  export type VerificationTokenCreateNestedManyWithoutUserInput = {
    create?: XOR<VerificationTokenCreateWithoutUserInput, VerificationTokenUncheckedCreateWithoutUserInput> | VerificationTokenCreateWithoutUserInput[] | VerificationTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VerificationTokenCreateOrConnectWithoutUserInput | VerificationTokenCreateOrConnectWithoutUserInput[]
    createMany?: VerificationTokenCreateManyUserInputEnvelope
    connect?: VerificationTokenWhereUniqueInput | VerificationTokenWhereUniqueInput[]
  }

  export type TicketCreateNestedManyWithoutUserInput = {
    create?: XOR<TicketCreateWithoutUserInput, TicketUncheckedCreateWithoutUserInput> | TicketCreateWithoutUserInput[] | TicketUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutUserInput | TicketCreateOrConnectWithoutUserInput[]
    createMany?: TicketCreateManyUserInputEnvelope
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
  }

  export type CricketPlayerUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CricketPlayerCreateWithoutUserInput, CricketPlayerUncheckedCreateWithoutUserInput> | CricketPlayerCreateWithoutUserInput[] | CricketPlayerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CricketPlayerCreateOrConnectWithoutUserInput | CricketPlayerCreateOrConnectWithoutUserInput[]
    createMany?: CricketPlayerCreateManyUserInputEnvelope
    connect?: CricketPlayerWhereUniqueInput | CricketPlayerWhereUniqueInput[]
  }

  export type VerificationTokenUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<VerificationTokenCreateWithoutUserInput, VerificationTokenUncheckedCreateWithoutUserInput> | VerificationTokenCreateWithoutUserInput[] | VerificationTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VerificationTokenCreateOrConnectWithoutUserInput | VerificationTokenCreateOrConnectWithoutUserInput[]
    createMany?: VerificationTokenCreateManyUserInputEnvelope
    connect?: VerificationTokenWhereUniqueInput | VerificationTokenWhereUniqueInput[]
  }

  export type TicketUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TicketCreateWithoutUserInput, TicketUncheckedCreateWithoutUserInput> | TicketCreateWithoutUserInput[] | TicketUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutUserInput | TicketCreateOrConnectWithoutUserInput[]
    createMany?: TicketCreateManyUserInputEnvelope
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UsersUpdaterolesInput = {
    set?: $Enums.Role[]
    push?: $Enums.Role | $Enums.Role[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type CricketPlayerUpdateOneWithoutUser_cricket_playersNestedInput = {
    create?: XOR<CricketPlayerCreateWithoutUser_cricket_playersInput, CricketPlayerUncheckedCreateWithoutUser_cricket_playersInput>
    connectOrCreate?: CricketPlayerCreateOrConnectWithoutUser_cricket_playersInput
    upsert?: CricketPlayerUpsertWithoutUser_cricket_playersInput
    disconnect?: CricketPlayerWhereInput | boolean
    delete?: CricketPlayerWhereInput | boolean
    connect?: CricketPlayerWhereUniqueInput
    update?: XOR<XOR<CricketPlayerUpdateToOneWithWhereWithoutUser_cricket_playersInput, CricketPlayerUpdateWithoutUser_cricket_playersInput>, CricketPlayerUncheckedUpdateWithoutUser_cricket_playersInput>
  }

  export type CricketPlayerUpdateManyWithoutUserNestedInput = {
    create?: XOR<CricketPlayerCreateWithoutUserInput, CricketPlayerUncheckedCreateWithoutUserInput> | CricketPlayerCreateWithoutUserInput[] | CricketPlayerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CricketPlayerCreateOrConnectWithoutUserInput | CricketPlayerCreateOrConnectWithoutUserInput[]
    upsert?: CricketPlayerUpsertWithWhereUniqueWithoutUserInput | CricketPlayerUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CricketPlayerCreateManyUserInputEnvelope
    set?: CricketPlayerWhereUniqueInput | CricketPlayerWhereUniqueInput[]
    disconnect?: CricketPlayerWhereUniqueInput | CricketPlayerWhereUniqueInput[]
    delete?: CricketPlayerWhereUniqueInput | CricketPlayerWhereUniqueInput[]
    connect?: CricketPlayerWhereUniqueInput | CricketPlayerWhereUniqueInput[]
    update?: CricketPlayerUpdateWithWhereUniqueWithoutUserInput | CricketPlayerUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CricketPlayerUpdateManyWithWhereWithoutUserInput | CricketPlayerUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CricketPlayerScalarWhereInput | CricketPlayerScalarWhereInput[]
  }

  export type VerificationTokenUpdateManyWithoutUserNestedInput = {
    create?: XOR<VerificationTokenCreateWithoutUserInput, VerificationTokenUncheckedCreateWithoutUserInput> | VerificationTokenCreateWithoutUserInput[] | VerificationTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VerificationTokenCreateOrConnectWithoutUserInput | VerificationTokenCreateOrConnectWithoutUserInput[]
    upsert?: VerificationTokenUpsertWithWhereUniqueWithoutUserInput | VerificationTokenUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: VerificationTokenCreateManyUserInputEnvelope
    set?: VerificationTokenWhereUniqueInput | VerificationTokenWhereUniqueInput[]
    disconnect?: VerificationTokenWhereUniqueInput | VerificationTokenWhereUniqueInput[]
    delete?: VerificationTokenWhereUniqueInput | VerificationTokenWhereUniqueInput[]
    connect?: VerificationTokenWhereUniqueInput | VerificationTokenWhereUniqueInput[]
    update?: VerificationTokenUpdateWithWhereUniqueWithoutUserInput | VerificationTokenUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: VerificationTokenUpdateManyWithWhereWithoutUserInput | VerificationTokenUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: VerificationTokenScalarWhereInput | VerificationTokenScalarWhereInput[]
  }

  export type TicketUpdateManyWithoutUserNestedInput = {
    create?: XOR<TicketCreateWithoutUserInput, TicketUncheckedCreateWithoutUserInput> | TicketCreateWithoutUserInput[] | TicketUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutUserInput | TicketCreateOrConnectWithoutUserInput[]
    upsert?: TicketUpsertWithWhereUniqueWithoutUserInput | TicketUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TicketCreateManyUserInputEnvelope
    set?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    disconnect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    delete?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    update?: TicketUpdateWithWhereUniqueWithoutUserInput | TicketUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TicketUpdateManyWithWhereWithoutUserInput | TicketUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TicketScalarWhereInput | TicketScalarWhereInput[]
  }

  export type CricketPlayerUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CricketPlayerCreateWithoutUserInput, CricketPlayerUncheckedCreateWithoutUserInput> | CricketPlayerCreateWithoutUserInput[] | CricketPlayerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CricketPlayerCreateOrConnectWithoutUserInput | CricketPlayerCreateOrConnectWithoutUserInput[]
    upsert?: CricketPlayerUpsertWithWhereUniqueWithoutUserInput | CricketPlayerUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CricketPlayerCreateManyUserInputEnvelope
    set?: CricketPlayerWhereUniqueInput | CricketPlayerWhereUniqueInput[]
    disconnect?: CricketPlayerWhereUniqueInput | CricketPlayerWhereUniqueInput[]
    delete?: CricketPlayerWhereUniqueInput | CricketPlayerWhereUniqueInput[]
    connect?: CricketPlayerWhereUniqueInput | CricketPlayerWhereUniqueInput[]
    update?: CricketPlayerUpdateWithWhereUniqueWithoutUserInput | CricketPlayerUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CricketPlayerUpdateManyWithWhereWithoutUserInput | CricketPlayerUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CricketPlayerScalarWhereInput | CricketPlayerScalarWhereInput[]
  }

  export type VerificationTokenUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<VerificationTokenCreateWithoutUserInput, VerificationTokenUncheckedCreateWithoutUserInput> | VerificationTokenCreateWithoutUserInput[] | VerificationTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VerificationTokenCreateOrConnectWithoutUserInput | VerificationTokenCreateOrConnectWithoutUserInput[]
    upsert?: VerificationTokenUpsertWithWhereUniqueWithoutUserInput | VerificationTokenUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: VerificationTokenCreateManyUserInputEnvelope
    set?: VerificationTokenWhereUniqueInput | VerificationTokenWhereUniqueInput[]
    disconnect?: VerificationTokenWhereUniqueInput | VerificationTokenWhereUniqueInput[]
    delete?: VerificationTokenWhereUniqueInput | VerificationTokenWhereUniqueInput[]
    connect?: VerificationTokenWhereUniqueInput | VerificationTokenWhereUniqueInput[]
    update?: VerificationTokenUpdateWithWhereUniqueWithoutUserInput | VerificationTokenUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: VerificationTokenUpdateManyWithWhereWithoutUserInput | VerificationTokenUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: VerificationTokenScalarWhereInput | VerificationTokenScalarWhereInput[]
  }

  export type TicketUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TicketCreateWithoutUserInput, TicketUncheckedCreateWithoutUserInput> | TicketCreateWithoutUserInput[] | TicketUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TicketCreateOrConnectWithoutUserInput | TicketCreateOrConnectWithoutUserInput[]
    upsert?: TicketUpsertWithWhereUniqueWithoutUserInput | TicketUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TicketCreateManyUserInputEnvelope
    set?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    disconnect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    delete?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    connect?: TicketWhereUniqueInput | TicketWhereUniqueInput[]
    update?: TicketUpdateWithWhereUniqueWithoutUserInput | TicketUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TicketUpdateManyWithWhereWithoutUserInput | TicketUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TicketScalarWhereInput | TicketScalarWhereInput[]
  }

  export type CricketPlayerCreateNestedManyWithoutTeam_playersInput = {
    create?: XOR<CricketPlayerCreateWithoutTeam_playersInput, CricketPlayerUncheckedCreateWithoutTeam_playersInput> | CricketPlayerCreateWithoutTeam_playersInput[] | CricketPlayerUncheckedCreateWithoutTeam_playersInput[]
    connectOrCreate?: CricketPlayerCreateOrConnectWithoutTeam_playersInput | CricketPlayerCreateOrConnectWithoutTeam_playersInput[]
    connect?: CricketPlayerWhereUniqueInput | CricketPlayerWhereUniqueInput[]
  }

  export type CricketMatchCreateNestedManyWithoutWonByTeamInput = {
    create?: XOR<CricketMatchCreateWithoutWonByTeamInput, CricketMatchUncheckedCreateWithoutWonByTeamInput> | CricketMatchCreateWithoutWonByTeamInput[] | CricketMatchUncheckedCreateWithoutWonByTeamInput[]
    connectOrCreate?: CricketMatchCreateOrConnectWithoutWonByTeamInput | CricketMatchCreateOrConnectWithoutWonByTeamInput[]
    createMany?: CricketMatchCreateManyWonByTeamInputEnvelope
    connect?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
  }

  export type CricketMatchCreateNestedManyWithoutTossWonByTeamInput = {
    create?: XOR<CricketMatchCreateWithoutTossWonByTeamInput, CricketMatchUncheckedCreateWithoutTossWonByTeamInput> | CricketMatchCreateWithoutTossWonByTeamInput[] | CricketMatchUncheckedCreateWithoutTossWonByTeamInput[]
    connectOrCreate?: CricketMatchCreateOrConnectWithoutTossWonByTeamInput | CricketMatchCreateOrConnectWithoutTossWonByTeamInput[]
    createMany?: CricketMatchCreateManyTossWonByTeamInputEnvelope
    connect?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
  }

  export type CricketPlayerCreateNestedManyWithoutTeamInput = {
    create?: XOR<CricketPlayerCreateWithoutTeamInput, CricketPlayerUncheckedCreateWithoutTeamInput> | CricketPlayerCreateWithoutTeamInput[] | CricketPlayerUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: CricketPlayerCreateOrConnectWithoutTeamInput | CricketPlayerCreateOrConnectWithoutTeamInput[]
    createMany?: CricketPlayerCreateManyTeamInputEnvelope
    connect?: CricketPlayerWhereUniqueInput | CricketPlayerWhereUniqueInput[]
  }

  export type CricketTeamMatchDataCreateNestedManyWithoutTeamInput = {
    create?: XOR<CricketTeamMatchDataCreateWithoutTeamInput, CricketTeamMatchDataUncheckedCreateWithoutTeamInput> | CricketTeamMatchDataCreateWithoutTeamInput[] | CricketTeamMatchDataUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: CricketTeamMatchDataCreateOrConnectWithoutTeamInput | CricketTeamMatchDataCreateOrConnectWithoutTeamInput[]
    createMany?: CricketTeamMatchDataCreateManyTeamInputEnvelope
    connect?: CricketTeamMatchDataWhereUniqueInput | CricketTeamMatchDataWhereUniqueInput[]
  }

  export type CricketMatchPlayerBattingScoreCreateNestedManyWithoutTeamInput = {
    create?: XOR<CricketMatchPlayerBattingScoreCreateWithoutTeamInput, CricketMatchPlayerBattingScoreUncheckedCreateWithoutTeamInput> | CricketMatchPlayerBattingScoreCreateWithoutTeamInput[] | CricketMatchPlayerBattingScoreUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: CricketMatchPlayerBattingScoreCreateOrConnectWithoutTeamInput | CricketMatchPlayerBattingScoreCreateOrConnectWithoutTeamInput[]
    createMany?: CricketMatchPlayerBattingScoreCreateManyTeamInputEnvelope
    connect?: CricketMatchPlayerBattingScoreWhereUniqueInput | CricketMatchPlayerBattingScoreWhereUniqueInput[]
  }

  export type CricketMatchPlayerBowlingScoreCreateNestedManyWithoutTeamInput = {
    create?: XOR<CricketMatchPlayerBowlingScoreCreateWithoutTeamInput, CricketMatchPlayerBowlingScoreUncheckedCreateWithoutTeamInput> | CricketMatchPlayerBowlingScoreCreateWithoutTeamInput[] | CricketMatchPlayerBowlingScoreUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: CricketMatchPlayerBowlingScoreCreateOrConnectWithoutTeamInput | CricketMatchPlayerBowlingScoreCreateOrConnectWithoutTeamInput[]
    createMany?: CricketMatchPlayerBowlingScoreCreateManyTeamInputEnvelope
    connect?: CricketMatchPlayerBowlingScoreWhereUniqueInput | CricketMatchPlayerBowlingScoreWhereUniqueInput[]
  }

  export type CricketMatchCreateNestedManyWithoutTeamAInput = {
    create?: XOR<CricketMatchCreateWithoutTeamAInput, CricketMatchUncheckedCreateWithoutTeamAInput> | CricketMatchCreateWithoutTeamAInput[] | CricketMatchUncheckedCreateWithoutTeamAInput[]
    connectOrCreate?: CricketMatchCreateOrConnectWithoutTeamAInput | CricketMatchCreateOrConnectWithoutTeamAInput[]
    createMany?: CricketMatchCreateManyTeamAInputEnvelope
    connect?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
  }

  export type CricketMatchCreateNestedManyWithoutTeamBInput = {
    create?: XOR<CricketMatchCreateWithoutTeamBInput, CricketMatchUncheckedCreateWithoutTeamBInput> | CricketMatchCreateWithoutTeamBInput[] | CricketMatchUncheckedCreateWithoutTeamBInput[]
    connectOrCreate?: CricketMatchCreateOrConnectWithoutTeamBInput | CricketMatchCreateOrConnectWithoutTeamBInput[]
    createMany?: CricketMatchCreateManyTeamBInputEnvelope
    connect?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
  }

  export type CricketPlayerUncheckedCreateNestedManyWithoutTeam_playersInput = {
    create?: XOR<CricketPlayerCreateWithoutTeam_playersInput, CricketPlayerUncheckedCreateWithoutTeam_playersInput> | CricketPlayerCreateWithoutTeam_playersInput[] | CricketPlayerUncheckedCreateWithoutTeam_playersInput[]
    connectOrCreate?: CricketPlayerCreateOrConnectWithoutTeam_playersInput | CricketPlayerCreateOrConnectWithoutTeam_playersInput[]
    connect?: CricketPlayerWhereUniqueInput | CricketPlayerWhereUniqueInput[]
  }

  export type CricketMatchUncheckedCreateNestedManyWithoutWonByTeamInput = {
    create?: XOR<CricketMatchCreateWithoutWonByTeamInput, CricketMatchUncheckedCreateWithoutWonByTeamInput> | CricketMatchCreateWithoutWonByTeamInput[] | CricketMatchUncheckedCreateWithoutWonByTeamInput[]
    connectOrCreate?: CricketMatchCreateOrConnectWithoutWonByTeamInput | CricketMatchCreateOrConnectWithoutWonByTeamInput[]
    createMany?: CricketMatchCreateManyWonByTeamInputEnvelope
    connect?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
  }

  export type CricketMatchUncheckedCreateNestedManyWithoutTossWonByTeamInput = {
    create?: XOR<CricketMatchCreateWithoutTossWonByTeamInput, CricketMatchUncheckedCreateWithoutTossWonByTeamInput> | CricketMatchCreateWithoutTossWonByTeamInput[] | CricketMatchUncheckedCreateWithoutTossWonByTeamInput[]
    connectOrCreate?: CricketMatchCreateOrConnectWithoutTossWonByTeamInput | CricketMatchCreateOrConnectWithoutTossWonByTeamInput[]
    createMany?: CricketMatchCreateManyTossWonByTeamInputEnvelope
    connect?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
  }

  export type CricketPlayerUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<CricketPlayerCreateWithoutTeamInput, CricketPlayerUncheckedCreateWithoutTeamInput> | CricketPlayerCreateWithoutTeamInput[] | CricketPlayerUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: CricketPlayerCreateOrConnectWithoutTeamInput | CricketPlayerCreateOrConnectWithoutTeamInput[]
    createMany?: CricketPlayerCreateManyTeamInputEnvelope
    connect?: CricketPlayerWhereUniqueInput | CricketPlayerWhereUniqueInput[]
  }

  export type CricketTeamMatchDataUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<CricketTeamMatchDataCreateWithoutTeamInput, CricketTeamMatchDataUncheckedCreateWithoutTeamInput> | CricketTeamMatchDataCreateWithoutTeamInput[] | CricketTeamMatchDataUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: CricketTeamMatchDataCreateOrConnectWithoutTeamInput | CricketTeamMatchDataCreateOrConnectWithoutTeamInput[]
    createMany?: CricketTeamMatchDataCreateManyTeamInputEnvelope
    connect?: CricketTeamMatchDataWhereUniqueInput | CricketTeamMatchDataWhereUniqueInput[]
  }

  export type CricketMatchPlayerBattingScoreUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<CricketMatchPlayerBattingScoreCreateWithoutTeamInput, CricketMatchPlayerBattingScoreUncheckedCreateWithoutTeamInput> | CricketMatchPlayerBattingScoreCreateWithoutTeamInput[] | CricketMatchPlayerBattingScoreUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: CricketMatchPlayerBattingScoreCreateOrConnectWithoutTeamInput | CricketMatchPlayerBattingScoreCreateOrConnectWithoutTeamInput[]
    createMany?: CricketMatchPlayerBattingScoreCreateManyTeamInputEnvelope
    connect?: CricketMatchPlayerBattingScoreWhereUniqueInput | CricketMatchPlayerBattingScoreWhereUniqueInput[]
  }

  export type CricketMatchPlayerBowlingScoreUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<CricketMatchPlayerBowlingScoreCreateWithoutTeamInput, CricketMatchPlayerBowlingScoreUncheckedCreateWithoutTeamInput> | CricketMatchPlayerBowlingScoreCreateWithoutTeamInput[] | CricketMatchPlayerBowlingScoreUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: CricketMatchPlayerBowlingScoreCreateOrConnectWithoutTeamInput | CricketMatchPlayerBowlingScoreCreateOrConnectWithoutTeamInput[]
    createMany?: CricketMatchPlayerBowlingScoreCreateManyTeamInputEnvelope
    connect?: CricketMatchPlayerBowlingScoreWhereUniqueInput | CricketMatchPlayerBowlingScoreWhereUniqueInput[]
  }

  export type CricketMatchUncheckedCreateNestedManyWithoutTeamAInput = {
    create?: XOR<CricketMatchCreateWithoutTeamAInput, CricketMatchUncheckedCreateWithoutTeamAInput> | CricketMatchCreateWithoutTeamAInput[] | CricketMatchUncheckedCreateWithoutTeamAInput[]
    connectOrCreate?: CricketMatchCreateOrConnectWithoutTeamAInput | CricketMatchCreateOrConnectWithoutTeamAInput[]
    createMany?: CricketMatchCreateManyTeamAInputEnvelope
    connect?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
  }

  export type CricketMatchUncheckedCreateNestedManyWithoutTeamBInput = {
    create?: XOR<CricketMatchCreateWithoutTeamBInput, CricketMatchUncheckedCreateWithoutTeamBInput> | CricketMatchCreateWithoutTeamBInput[] | CricketMatchUncheckedCreateWithoutTeamBInput[]
    connectOrCreate?: CricketMatchCreateOrConnectWithoutTeamBInput | CricketMatchCreateOrConnectWithoutTeamBInput[]
    createMany?: CricketMatchCreateManyTeamBInputEnvelope
    connect?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
  }

  export type CricketPlayerUpdateManyWithoutTeam_playersNestedInput = {
    create?: XOR<CricketPlayerCreateWithoutTeam_playersInput, CricketPlayerUncheckedCreateWithoutTeam_playersInput> | CricketPlayerCreateWithoutTeam_playersInput[] | CricketPlayerUncheckedCreateWithoutTeam_playersInput[]
    connectOrCreate?: CricketPlayerCreateOrConnectWithoutTeam_playersInput | CricketPlayerCreateOrConnectWithoutTeam_playersInput[]
    upsert?: CricketPlayerUpsertWithWhereUniqueWithoutTeam_playersInput | CricketPlayerUpsertWithWhereUniqueWithoutTeam_playersInput[]
    set?: CricketPlayerWhereUniqueInput | CricketPlayerWhereUniqueInput[]
    disconnect?: CricketPlayerWhereUniqueInput | CricketPlayerWhereUniqueInput[]
    delete?: CricketPlayerWhereUniqueInput | CricketPlayerWhereUniqueInput[]
    connect?: CricketPlayerWhereUniqueInput | CricketPlayerWhereUniqueInput[]
    update?: CricketPlayerUpdateWithWhereUniqueWithoutTeam_playersInput | CricketPlayerUpdateWithWhereUniqueWithoutTeam_playersInput[]
    updateMany?: CricketPlayerUpdateManyWithWhereWithoutTeam_playersInput | CricketPlayerUpdateManyWithWhereWithoutTeam_playersInput[]
    deleteMany?: CricketPlayerScalarWhereInput | CricketPlayerScalarWhereInput[]
  }

  export type CricketMatchUpdateManyWithoutWonByTeamNestedInput = {
    create?: XOR<CricketMatchCreateWithoutWonByTeamInput, CricketMatchUncheckedCreateWithoutWonByTeamInput> | CricketMatchCreateWithoutWonByTeamInput[] | CricketMatchUncheckedCreateWithoutWonByTeamInput[]
    connectOrCreate?: CricketMatchCreateOrConnectWithoutWonByTeamInput | CricketMatchCreateOrConnectWithoutWonByTeamInput[]
    upsert?: CricketMatchUpsertWithWhereUniqueWithoutWonByTeamInput | CricketMatchUpsertWithWhereUniqueWithoutWonByTeamInput[]
    createMany?: CricketMatchCreateManyWonByTeamInputEnvelope
    set?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    disconnect?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    delete?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    connect?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    update?: CricketMatchUpdateWithWhereUniqueWithoutWonByTeamInput | CricketMatchUpdateWithWhereUniqueWithoutWonByTeamInput[]
    updateMany?: CricketMatchUpdateManyWithWhereWithoutWonByTeamInput | CricketMatchUpdateManyWithWhereWithoutWonByTeamInput[]
    deleteMany?: CricketMatchScalarWhereInput | CricketMatchScalarWhereInput[]
  }

  export type CricketMatchUpdateManyWithoutTossWonByTeamNestedInput = {
    create?: XOR<CricketMatchCreateWithoutTossWonByTeamInput, CricketMatchUncheckedCreateWithoutTossWonByTeamInput> | CricketMatchCreateWithoutTossWonByTeamInput[] | CricketMatchUncheckedCreateWithoutTossWonByTeamInput[]
    connectOrCreate?: CricketMatchCreateOrConnectWithoutTossWonByTeamInput | CricketMatchCreateOrConnectWithoutTossWonByTeamInput[]
    upsert?: CricketMatchUpsertWithWhereUniqueWithoutTossWonByTeamInput | CricketMatchUpsertWithWhereUniqueWithoutTossWonByTeamInput[]
    createMany?: CricketMatchCreateManyTossWonByTeamInputEnvelope
    set?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    disconnect?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    delete?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    connect?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    update?: CricketMatchUpdateWithWhereUniqueWithoutTossWonByTeamInput | CricketMatchUpdateWithWhereUniqueWithoutTossWonByTeamInput[]
    updateMany?: CricketMatchUpdateManyWithWhereWithoutTossWonByTeamInput | CricketMatchUpdateManyWithWhereWithoutTossWonByTeamInput[]
    deleteMany?: CricketMatchScalarWhereInput | CricketMatchScalarWhereInput[]
  }

  export type CricketPlayerUpdateManyWithoutTeamNestedInput = {
    create?: XOR<CricketPlayerCreateWithoutTeamInput, CricketPlayerUncheckedCreateWithoutTeamInput> | CricketPlayerCreateWithoutTeamInput[] | CricketPlayerUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: CricketPlayerCreateOrConnectWithoutTeamInput | CricketPlayerCreateOrConnectWithoutTeamInput[]
    upsert?: CricketPlayerUpsertWithWhereUniqueWithoutTeamInput | CricketPlayerUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: CricketPlayerCreateManyTeamInputEnvelope
    set?: CricketPlayerWhereUniqueInput | CricketPlayerWhereUniqueInput[]
    disconnect?: CricketPlayerWhereUniqueInput | CricketPlayerWhereUniqueInput[]
    delete?: CricketPlayerWhereUniqueInput | CricketPlayerWhereUniqueInput[]
    connect?: CricketPlayerWhereUniqueInput | CricketPlayerWhereUniqueInput[]
    update?: CricketPlayerUpdateWithWhereUniqueWithoutTeamInput | CricketPlayerUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: CricketPlayerUpdateManyWithWhereWithoutTeamInput | CricketPlayerUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: CricketPlayerScalarWhereInput | CricketPlayerScalarWhereInput[]
  }

  export type CricketTeamMatchDataUpdateManyWithoutTeamNestedInput = {
    create?: XOR<CricketTeamMatchDataCreateWithoutTeamInput, CricketTeamMatchDataUncheckedCreateWithoutTeamInput> | CricketTeamMatchDataCreateWithoutTeamInput[] | CricketTeamMatchDataUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: CricketTeamMatchDataCreateOrConnectWithoutTeamInput | CricketTeamMatchDataCreateOrConnectWithoutTeamInput[]
    upsert?: CricketTeamMatchDataUpsertWithWhereUniqueWithoutTeamInput | CricketTeamMatchDataUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: CricketTeamMatchDataCreateManyTeamInputEnvelope
    set?: CricketTeamMatchDataWhereUniqueInput | CricketTeamMatchDataWhereUniqueInput[]
    disconnect?: CricketTeamMatchDataWhereUniqueInput | CricketTeamMatchDataWhereUniqueInput[]
    delete?: CricketTeamMatchDataWhereUniqueInput | CricketTeamMatchDataWhereUniqueInput[]
    connect?: CricketTeamMatchDataWhereUniqueInput | CricketTeamMatchDataWhereUniqueInput[]
    update?: CricketTeamMatchDataUpdateWithWhereUniqueWithoutTeamInput | CricketTeamMatchDataUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: CricketTeamMatchDataUpdateManyWithWhereWithoutTeamInput | CricketTeamMatchDataUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: CricketTeamMatchDataScalarWhereInput | CricketTeamMatchDataScalarWhereInput[]
  }

  export type CricketMatchPlayerBattingScoreUpdateManyWithoutTeamNestedInput = {
    create?: XOR<CricketMatchPlayerBattingScoreCreateWithoutTeamInput, CricketMatchPlayerBattingScoreUncheckedCreateWithoutTeamInput> | CricketMatchPlayerBattingScoreCreateWithoutTeamInput[] | CricketMatchPlayerBattingScoreUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: CricketMatchPlayerBattingScoreCreateOrConnectWithoutTeamInput | CricketMatchPlayerBattingScoreCreateOrConnectWithoutTeamInput[]
    upsert?: CricketMatchPlayerBattingScoreUpsertWithWhereUniqueWithoutTeamInput | CricketMatchPlayerBattingScoreUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: CricketMatchPlayerBattingScoreCreateManyTeamInputEnvelope
    set?: CricketMatchPlayerBattingScoreWhereUniqueInput | CricketMatchPlayerBattingScoreWhereUniqueInput[]
    disconnect?: CricketMatchPlayerBattingScoreWhereUniqueInput | CricketMatchPlayerBattingScoreWhereUniqueInput[]
    delete?: CricketMatchPlayerBattingScoreWhereUniqueInput | CricketMatchPlayerBattingScoreWhereUniqueInput[]
    connect?: CricketMatchPlayerBattingScoreWhereUniqueInput | CricketMatchPlayerBattingScoreWhereUniqueInput[]
    update?: CricketMatchPlayerBattingScoreUpdateWithWhereUniqueWithoutTeamInput | CricketMatchPlayerBattingScoreUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: CricketMatchPlayerBattingScoreUpdateManyWithWhereWithoutTeamInput | CricketMatchPlayerBattingScoreUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: CricketMatchPlayerBattingScoreScalarWhereInput | CricketMatchPlayerBattingScoreScalarWhereInput[]
  }

  export type CricketMatchPlayerBowlingScoreUpdateManyWithoutTeamNestedInput = {
    create?: XOR<CricketMatchPlayerBowlingScoreCreateWithoutTeamInput, CricketMatchPlayerBowlingScoreUncheckedCreateWithoutTeamInput> | CricketMatchPlayerBowlingScoreCreateWithoutTeamInput[] | CricketMatchPlayerBowlingScoreUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: CricketMatchPlayerBowlingScoreCreateOrConnectWithoutTeamInput | CricketMatchPlayerBowlingScoreCreateOrConnectWithoutTeamInput[]
    upsert?: CricketMatchPlayerBowlingScoreUpsertWithWhereUniqueWithoutTeamInput | CricketMatchPlayerBowlingScoreUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: CricketMatchPlayerBowlingScoreCreateManyTeamInputEnvelope
    set?: CricketMatchPlayerBowlingScoreWhereUniqueInput | CricketMatchPlayerBowlingScoreWhereUniqueInput[]
    disconnect?: CricketMatchPlayerBowlingScoreWhereUniqueInput | CricketMatchPlayerBowlingScoreWhereUniqueInput[]
    delete?: CricketMatchPlayerBowlingScoreWhereUniqueInput | CricketMatchPlayerBowlingScoreWhereUniqueInput[]
    connect?: CricketMatchPlayerBowlingScoreWhereUniqueInput | CricketMatchPlayerBowlingScoreWhereUniqueInput[]
    update?: CricketMatchPlayerBowlingScoreUpdateWithWhereUniqueWithoutTeamInput | CricketMatchPlayerBowlingScoreUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: CricketMatchPlayerBowlingScoreUpdateManyWithWhereWithoutTeamInput | CricketMatchPlayerBowlingScoreUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: CricketMatchPlayerBowlingScoreScalarWhereInput | CricketMatchPlayerBowlingScoreScalarWhereInput[]
  }

  export type CricketMatchUpdateManyWithoutTeamANestedInput = {
    create?: XOR<CricketMatchCreateWithoutTeamAInput, CricketMatchUncheckedCreateWithoutTeamAInput> | CricketMatchCreateWithoutTeamAInput[] | CricketMatchUncheckedCreateWithoutTeamAInput[]
    connectOrCreate?: CricketMatchCreateOrConnectWithoutTeamAInput | CricketMatchCreateOrConnectWithoutTeamAInput[]
    upsert?: CricketMatchUpsertWithWhereUniqueWithoutTeamAInput | CricketMatchUpsertWithWhereUniqueWithoutTeamAInput[]
    createMany?: CricketMatchCreateManyTeamAInputEnvelope
    set?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    disconnect?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    delete?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    connect?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    update?: CricketMatchUpdateWithWhereUniqueWithoutTeamAInput | CricketMatchUpdateWithWhereUniqueWithoutTeamAInput[]
    updateMany?: CricketMatchUpdateManyWithWhereWithoutTeamAInput | CricketMatchUpdateManyWithWhereWithoutTeamAInput[]
    deleteMany?: CricketMatchScalarWhereInput | CricketMatchScalarWhereInput[]
  }

  export type CricketMatchUpdateManyWithoutTeamBNestedInput = {
    create?: XOR<CricketMatchCreateWithoutTeamBInput, CricketMatchUncheckedCreateWithoutTeamBInput> | CricketMatchCreateWithoutTeamBInput[] | CricketMatchUncheckedCreateWithoutTeamBInput[]
    connectOrCreate?: CricketMatchCreateOrConnectWithoutTeamBInput | CricketMatchCreateOrConnectWithoutTeamBInput[]
    upsert?: CricketMatchUpsertWithWhereUniqueWithoutTeamBInput | CricketMatchUpsertWithWhereUniqueWithoutTeamBInput[]
    createMany?: CricketMatchCreateManyTeamBInputEnvelope
    set?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    disconnect?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    delete?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    connect?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    update?: CricketMatchUpdateWithWhereUniqueWithoutTeamBInput | CricketMatchUpdateWithWhereUniqueWithoutTeamBInput[]
    updateMany?: CricketMatchUpdateManyWithWhereWithoutTeamBInput | CricketMatchUpdateManyWithWhereWithoutTeamBInput[]
    deleteMany?: CricketMatchScalarWhereInput | CricketMatchScalarWhereInput[]
  }

  export type CricketPlayerUncheckedUpdateManyWithoutTeam_playersNestedInput = {
    create?: XOR<CricketPlayerCreateWithoutTeam_playersInput, CricketPlayerUncheckedCreateWithoutTeam_playersInput> | CricketPlayerCreateWithoutTeam_playersInput[] | CricketPlayerUncheckedCreateWithoutTeam_playersInput[]
    connectOrCreate?: CricketPlayerCreateOrConnectWithoutTeam_playersInput | CricketPlayerCreateOrConnectWithoutTeam_playersInput[]
    upsert?: CricketPlayerUpsertWithWhereUniqueWithoutTeam_playersInput | CricketPlayerUpsertWithWhereUniqueWithoutTeam_playersInput[]
    set?: CricketPlayerWhereUniqueInput | CricketPlayerWhereUniqueInput[]
    disconnect?: CricketPlayerWhereUniqueInput | CricketPlayerWhereUniqueInput[]
    delete?: CricketPlayerWhereUniqueInput | CricketPlayerWhereUniqueInput[]
    connect?: CricketPlayerWhereUniqueInput | CricketPlayerWhereUniqueInput[]
    update?: CricketPlayerUpdateWithWhereUniqueWithoutTeam_playersInput | CricketPlayerUpdateWithWhereUniqueWithoutTeam_playersInput[]
    updateMany?: CricketPlayerUpdateManyWithWhereWithoutTeam_playersInput | CricketPlayerUpdateManyWithWhereWithoutTeam_playersInput[]
    deleteMany?: CricketPlayerScalarWhereInput | CricketPlayerScalarWhereInput[]
  }

  export type CricketMatchUncheckedUpdateManyWithoutWonByTeamNestedInput = {
    create?: XOR<CricketMatchCreateWithoutWonByTeamInput, CricketMatchUncheckedCreateWithoutWonByTeamInput> | CricketMatchCreateWithoutWonByTeamInput[] | CricketMatchUncheckedCreateWithoutWonByTeamInput[]
    connectOrCreate?: CricketMatchCreateOrConnectWithoutWonByTeamInput | CricketMatchCreateOrConnectWithoutWonByTeamInput[]
    upsert?: CricketMatchUpsertWithWhereUniqueWithoutWonByTeamInput | CricketMatchUpsertWithWhereUniqueWithoutWonByTeamInput[]
    createMany?: CricketMatchCreateManyWonByTeamInputEnvelope
    set?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    disconnect?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    delete?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    connect?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    update?: CricketMatchUpdateWithWhereUniqueWithoutWonByTeamInput | CricketMatchUpdateWithWhereUniqueWithoutWonByTeamInput[]
    updateMany?: CricketMatchUpdateManyWithWhereWithoutWonByTeamInput | CricketMatchUpdateManyWithWhereWithoutWonByTeamInput[]
    deleteMany?: CricketMatchScalarWhereInput | CricketMatchScalarWhereInput[]
  }

  export type CricketMatchUncheckedUpdateManyWithoutTossWonByTeamNestedInput = {
    create?: XOR<CricketMatchCreateWithoutTossWonByTeamInput, CricketMatchUncheckedCreateWithoutTossWonByTeamInput> | CricketMatchCreateWithoutTossWonByTeamInput[] | CricketMatchUncheckedCreateWithoutTossWonByTeamInput[]
    connectOrCreate?: CricketMatchCreateOrConnectWithoutTossWonByTeamInput | CricketMatchCreateOrConnectWithoutTossWonByTeamInput[]
    upsert?: CricketMatchUpsertWithWhereUniqueWithoutTossWonByTeamInput | CricketMatchUpsertWithWhereUniqueWithoutTossWonByTeamInput[]
    createMany?: CricketMatchCreateManyTossWonByTeamInputEnvelope
    set?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    disconnect?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    delete?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    connect?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    update?: CricketMatchUpdateWithWhereUniqueWithoutTossWonByTeamInput | CricketMatchUpdateWithWhereUniqueWithoutTossWonByTeamInput[]
    updateMany?: CricketMatchUpdateManyWithWhereWithoutTossWonByTeamInput | CricketMatchUpdateManyWithWhereWithoutTossWonByTeamInput[]
    deleteMany?: CricketMatchScalarWhereInput | CricketMatchScalarWhereInput[]
  }

  export type CricketPlayerUncheckedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<CricketPlayerCreateWithoutTeamInput, CricketPlayerUncheckedCreateWithoutTeamInput> | CricketPlayerCreateWithoutTeamInput[] | CricketPlayerUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: CricketPlayerCreateOrConnectWithoutTeamInput | CricketPlayerCreateOrConnectWithoutTeamInput[]
    upsert?: CricketPlayerUpsertWithWhereUniqueWithoutTeamInput | CricketPlayerUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: CricketPlayerCreateManyTeamInputEnvelope
    set?: CricketPlayerWhereUniqueInput | CricketPlayerWhereUniqueInput[]
    disconnect?: CricketPlayerWhereUniqueInput | CricketPlayerWhereUniqueInput[]
    delete?: CricketPlayerWhereUniqueInput | CricketPlayerWhereUniqueInput[]
    connect?: CricketPlayerWhereUniqueInput | CricketPlayerWhereUniqueInput[]
    update?: CricketPlayerUpdateWithWhereUniqueWithoutTeamInput | CricketPlayerUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: CricketPlayerUpdateManyWithWhereWithoutTeamInput | CricketPlayerUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: CricketPlayerScalarWhereInput | CricketPlayerScalarWhereInput[]
  }

  export type CricketTeamMatchDataUncheckedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<CricketTeamMatchDataCreateWithoutTeamInput, CricketTeamMatchDataUncheckedCreateWithoutTeamInput> | CricketTeamMatchDataCreateWithoutTeamInput[] | CricketTeamMatchDataUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: CricketTeamMatchDataCreateOrConnectWithoutTeamInput | CricketTeamMatchDataCreateOrConnectWithoutTeamInput[]
    upsert?: CricketTeamMatchDataUpsertWithWhereUniqueWithoutTeamInput | CricketTeamMatchDataUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: CricketTeamMatchDataCreateManyTeamInputEnvelope
    set?: CricketTeamMatchDataWhereUniqueInput | CricketTeamMatchDataWhereUniqueInput[]
    disconnect?: CricketTeamMatchDataWhereUniqueInput | CricketTeamMatchDataWhereUniqueInput[]
    delete?: CricketTeamMatchDataWhereUniqueInput | CricketTeamMatchDataWhereUniqueInput[]
    connect?: CricketTeamMatchDataWhereUniqueInput | CricketTeamMatchDataWhereUniqueInput[]
    update?: CricketTeamMatchDataUpdateWithWhereUniqueWithoutTeamInput | CricketTeamMatchDataUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: CricketTeamMatchDataUpdateManyWithWhereWithoutTeamInput | CricketTeamMatchDataUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: CricketTeamMatchDataScalarWhereInput | CricketTeamMatchDataScalarWhereInput[]
  }

  export type CricketMatchPlayerBattingScoreUncheckedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<CricketMatchPlayerBattingScoreCreateWithoutTeamInput, CricketMatchPlayerBattingScoreUncheckedCreateWithoutTeamInput> | CricketMatchPlayerBattingScoreCreateWithoutTeamInput[] | CricketMatchPlayerBattingScoreUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: CricketMatchPlayerBattingScoreCreateOrConnectWithoutTeamInput | CricketMatchPlayerBattingScoreCreateOrConnectWithoutTeamInput[]
    upsert?: CricketMatchPlayerBattingScoreUpsertWithWhereUniqueWithoutTeamInput | CricketMatchPlayerBattingScoreUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: CricketMatchPlayerBattingScoreCreateManyTeamInputEnvelope
    set?: CricketMatchPlayerBattingScoreWhereUniqueInput | CricketMatchPlayerBattingScoreWhereUniqueInput[]
    disconnect?: CricketMatchPlayerBattingScoreWhereUniqueInput | CricketMatchPlayerBattingScoreWhereUniqueInput[]
    delete?: CricketMatchPlayerBattingScoreWhereUniqueInput | CricketMatchPlayerBattingScoreWhereUniqueInput[]
    connect?: CricketMatchPlayerBattingScoreWhereUniqueInput | CricketMatchPlayerBattingScoreWhereUniqueInput[]
    update?: CricketMatchPlayerBattingScoreUpdateWithWhereUniqueWithoutTeamInput | CricketMatchPlayerBattingScoreUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: CricketMatchPlayerBattingScoreUpdateManyWithWhereWithoutTeamInput | CricketMatchPlayerBattingScoreUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: CricketMatchPlayerBattingScoreScalarWhereInput | CricketMatchPlayerBattingScoreScalarWhereInput[]
  }

  export type CricketMatchPlayerBowlingScoreUncheckedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<CricketMatchPlayerBowlingScoreCreateWithoutTeamInput, CricketMatchPlayerBowlingScoreUncheckedCreateWithoutTeamInput> | CricketMatchPlayerBowlingScoreCreateWithoutTeamInput[] | CricketMatchPlayerBowlingScoreUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: CricketMatchPlayerBowlingScoreCreateOrConnectWithoutTeamInput | CricketMatchPlayerBowlingScoreCreateOrConnectWithoutTeamInput[]
    upsert?: CricketMatchPlayerBowlingScoreUpsertWithWhereUniqueWithoutTeamInput | CricketMatchPlayerBowlingScoreUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: CricketMatchPlayerBowlingScoreCreateManyTeamInputEnvelope
    set?: CricketMatchPlayerBowlingScoreWhereUniqueInput | CricketMatchPlayerBowlingScoreWhereUniqueInput[]
    disconnect?: CricketMatchPlayerBowlingScoreWhereUniqueInput | CricketMatchPlayerBowlingScoreWhereUniqueInput[]
    delete?: CricketMatchPlayerBowlingScoreWhereUniqueInput | CricketMatchPlayerBowlingScoreWhereUniqueInput[]
    connect?: CricketMatchPlayerBowlingScoreWhereUniqueInput | CricketMatchPlayerBowlingScoreWhereUniqueInput[]
    update?: CricketMatchPlayerBowlingScoreUpdateWithWhereUniqueWithoutTeamInput | CricketMatchPlayerBowlingScoreUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: CricketMatchPlayerBowlingScoreUpdateManyWithWhereWithoutTeamInput | CricketMatchPlayerBowlingScoreUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: CricketMatchPlayerBowlingScoreScalarWhereInput | CricketMatchPlayerBowlingScoreScalarWhereInput[]
  }

  export type CricketMatchUncheckedUpdateManyWithoutTeamANestedInput = {
    create?: XOR<CricketMatchCreateWithoutTeamAInput, CricketMatchUncheckedCreateWithoutTeamAInput> | CricketMatchCreateWithoutTeamAInput[] | CricketMatchUncheckedCreateWithoutTeamAInput[]
    connectOrCreate?: CricketMatchCreateOrConnectWithoutTeamAInput | CricketMatchCreateOrConnectWithoutTeamAInput[]
    upsert?: CricketMatchUpsertWithWhereUniqueWithoutTeamAInput | CricketMatchUpsertWithWhereUniqueWithoutTeamAInput[]
    createMany?: CricketMatchCreateManyTeamAInputEnvelope
    set?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    disconnect?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    delete?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    connect?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    update?: CricketMatchUpdateWithWhereUniqueWithoutTeamAInput | CricketMatchUpdateWithWhereUniqueWithoutTeamAInput[]
    updateMany?: CricketMatchUpdateManyWithWhereWithoutTeamAInput | CricketMatchUpdateManyWithWhereWithoutTeamAInput[]
    deleteMany?: CricketMatchScalarWhereInput | CricketMatchScalarWhereInput[]
  }

  export type CricketMatchUncheckedUpdateManyWithoutTeamBNestedInput = {
    create?: XOR<CricketMatchCreateWithoutTeamBInput, CricketMatchUncheckedCreateWithoutTeamBInput> | CricketMatchCreateWithoutTeamBInput[] | CricketMatchUncheckedCreateWithoutTeamBInput[]
    connectOrCreate?: CricketMatchCreateOrConnectWithoutTeamBInput | CricketMatchCreateOrConnectWithoutTeamBInput[]
    upsert?: CricketMatchUpsertWithWhereUniqueWithoutTeamBInput | CricketMatchUpsertWithWhereUniqueWithoutTeamBInput[]
    createMany?: CricketMatchCreateManyTeamBInputEnvelope
    set?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    disconnect?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    delete?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    connect?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    update?: CricketMatchUpdateWithWhereUniqueWithoutTeamBInput | CricketMatchUpdateWithWhereUniqueWithoutTeamBInput[]
    updateMany?: CricketMatchUpdateManyWithWhereWithoutTeamBInput | CricketMatchUpdateManyWithWhereWithoutTeamBInput[]
    deleteMany?: CricketMatchScalarWhereInput | CricketMatchScalarWhereInput[]
  }

  export type UsersCreateNestedOneWithoutCricket_playersInput = {
    create?: XOR<UsersCreateWithoutCricket_playersInput, UsersUncheckedCreateWithoutCricket_playersInput>
    connectOrCreate?: UsersCreateOrConnectWithoutCricket_playersInput
    connect?: UsersWhereUniqueInput
  }

  export type CricketMatchCreateNestedManyWithoutPlayersInput = {
    create?: XOR<CricketMatchCreateWithoutPlayersInput, CricketMatchUncheckedCreateWithoutPlayersInput> | CricketMatchCreateWithoutPlayersInput[] | CricketMatchUncheckedCreateWithoutPlayersInput[]
    connectOrCreate?: CricketMatchCreateOrConnectWithoutPlayersInput | CricketMatchCreateOrConnectWithoutPlayersInput[]
    connect?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
  }

  export type CricketTeamCreateNestedOneWithoutPlayer_teamInput = {
    create?: XOR<CricketTeamCreateWithoutPlayer_teamInput, CricketTeamUncheckedCreateWithoutPlayer_teamInput>
    connectOrCreate?: CricketTeamCreateOrConnectWithoutPlayer_teamInput
    connect?: CricketTeamWhereUniqueInput
  }

  export type UsersCreateNestedManyWithoutCricketPlayerInput = {
    create?: XOR<UsersCreateWithoutCricketPlayerInput, UsersUncheckedCreateWithoutCricketPlayerInput> | UsersCreateWithoutCricketPlayerInput[] | UsersUncheckedCreateWithoutCricketPlayerInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutCricketPlayerInput | UsersCreateOrConnectWithoutCricketPlayerInput[]
    createMany?: UsersCreateManyCricketPlayerInputEnvelope
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
  }

  export type CricketTeamCreateNestedManyWithoutPlayersInput = {
    create?: XOR<CricketTeamCreateWithoutPlayersInput, CricketTeamUncheckedCreateWithoutPlayersInput> | CricketTeamCreateWithoutPlayersInput[] | CricketTeamUncheckedCreateWithoutPlayersInput[]
    connectOrCreate?: CricketTeamCreateOrConnectWithoutPlayersInput | CricketTeamCreateOrConnectWithoutPlayersInput[]
    connect?: CricketTeamWhereUniqueInput | CricketTeamWhereUniqueInput[]
  }

  export type CricketMatchPlayerBattingScoreCreateNestedManyWithoutPlayerInput = {
    create?: XOR<CricketMatchPlayerBattingScoreCreateWithoutPlayerInput, CricketMatchPlayerBattingScoreUncheckedCreateWithoutPlayerInput> | CricketMatchPlayerBattingScoreCreateWithoutPlayerInput[] | CricketMatchPlayerBattingScoreUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: CricketMatchPlayerBattingScoreCreateOrConnectWithoutPlayerInput | CricketMatchPlayerBattingScoreCreateOrConnectWithoutPlayerInput[]
    createMany?: CricketMatchPlayerBattingScoreCreateManyPlayerInputEnvelope
    connect?: CricketMatchPlayerBattingScoreWhereUniqueInput | CricketMatchPlayerBattingScoreWhereUniqueInput[]
  }

  export type CricketMatchPlayerBowlingScoreCreateNestedManyWithoutPlayerInput = {
    create?: XOR<CricketMatchPlayerBowlingScoreCreateWithoutPlayerInput, CricketMatchPlayerBowlingScoreUncheckedCreateWithoutPlayerInput> | CricketMatchPlayerBowlingScoreCreateWithoutPlayerInput[] | CricketMatchPlayerBowlingScoreUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: CricketMatchPlayerBowlingScoreCreateOrConnectWithoutPlayerInput | CricketMatchPlayerBowlingScoreCreateOrConnectWithoutPlayerInput[]
    createMany?: CricketMatchPlayerBowlingScoreCreateManyPlayerInputEnvelope
    connect?: CricketMatchPlayerBowlingScoreWhereUniqueInput | CricketMatchPlayerBowlingScoreWhereUniqueInput[]
  }

  export type CricketMatchUncheckedCreateNestedManyWithoutPlayersInput = {
    create?: XOR<CricketMatchCreateWithoutPlayersInput, CricketMatchUncheckedCreateWithoutPlayersInput> | CricketMatchCreateWithoutPlayersInput[] | CricketMatchUncheckedCreateWithoutPlayersInput[]
    connectOrCreate?: CricketMatchCreateOrConnectWithoutPlayersInput | CricketMatchCreateOrConnectWithoutPlayersInput[]
    connect?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
  }

  export type UsersUncheckedCreateNestedManyWithoutCricketPlayerInput = {
    create?: XOR<UsersCreateWithoutCricketPlayerInput, UsersUncheckedCreateWithoutCricketPlayerInput> | UsersCreateWithoutCricketPlayerInput[] | UsersUncheckedCreateWithoutCricketPlayerInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutCricketPlayerInput | UsersCreateOrConnectWithoutCricketPlayerInput[]
    createMany?: UsersCreateManyCricketPlayerInputEnvelope
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
  }

  export type CricketTeamUncheckedCreateNestedManyWithoutPlayersInput = {
    create?: XOR<CricketTeamCreateWithoutPlayersInput, CricketTeamUncheckedCreateWithoutPlayersInput> | CricketTeamCreateWithoutPlayersInput[] | CricketTeamUncheckedCreateWithoutPlayersInput[]
    connectOrCreate?: CricketTeamCreateOrConnectWithoutPlayersInput | CricketTeamCreateOrConnectWithoutPlayersInput[]
    connect?: CricketTeamWhereUniqueInput | CricketTeamWhereUniqueInput[]
  }

  export type CricketMatchPlayerBattingScoreUncheckedCreateNestedManyWithoutPlayerInput = {
    create?: XOR<CricketMatchPlayerBattingScoreCreateWithoutPlayerInput, CricketMatchPlayerBattingScoreUncheckedCreateWithoutPlayerInput> | CricketMatchPlayerBattingScoreCreateWithoutPlayerInput[] | CricketMatchPlayerBattingScoreUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: CricketMatchPlayerBattingScoreCreateOrConnectWithoutPlayerInput | CricketMatchPlayerBattingScoreCreateOrConnectWithoutPlayerInput[]
    createMany?: CricketMatchPlayerBattingScoreCreateManyPlayerInputEnvelope
    connect?: CricketMatchPlayerBattingScoreWhereUniqueInput | CricketMatchPlayerBattingScoreWhereUniqueInput[]
  }

  export type CricketMatchPlayerBowlingScoreUncheckedCreateNestedManyWithoutPlayerInput = {
    create?: XOR<CricketMatchPlayerBowlingScoreCreateWithoutPlayerInput, CricketMatchPlayerBowlingScoreUncheckedCreateWithoutPlayerInput> | CricketMatchPlayerBowlingScoreCreateWithoutPlayerInput[] | CricketMatchPlayerBowlingScoreUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: CricketMatchPlayerBowlingScoreCreateOrConnectWithoutPlayerInput | CricketMatchPlayerBowlingScoreCreateOrConnectWithoutPlayerInput[]
    createMany?: CricketMatchPlayerBowlingScoreCreateManyPlayerInputEnvelope
    connect?: CricketMatchPlayerBowlingScoreWhereUniqueInput | CricketMatchPlayerBowlingScoreWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UsersUpdateOneRequiredWithoutCricket_playersNestedInput = {
    create?: XOR<UsersCreateWithoutCricket_playersInput, UsersUncheckedCreateWithoutCricket_playersInput>
    connectOrCreate?: UsersCreateOrConnectWithoutCricket_playersInput
    upsert?: UsersUpsertWithoutCricket_playersInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutCricket_playersInput, UsersUpdateWithoutCricket_playersInput>, UsersUncheckedUpdateWithoutCricket_playersInput>
  }

  export type CricketMatchUpdateManyWithoutPlayersNestedInput = {
    create?: XOR<CricketMatchCreateWithoutPlayersInput, CricketMatchUncheckedCreateWithoutPlayersInput> | CricketMatchCreateWithoutPlayersInput[] | CricketMatchUncheckedCreateWithoutPlayersInput[]
    connectOrCreate?: CricketMatchCreateOrConnectWithoutPlayersInput | CricketMatchCreateOrConnectWithoutPlayersInput[]
    upsert?: CricketMatchUpsertWithWhereUniqueWithoutPlayersInput | CricketMatchUpsertWithWhereUniqueWithoutPlayersInput[]
    set?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    disconnect?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    delete?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    connect?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    update?: CricketMatchUpdateWithWhereUniqueWithoutPlayersInput | CricketMatchUpdateWithWhereUniqueWithoutPlayersInput[]
    updateMany?: CricketMatchUpdateManyWithWhereWithoutPlayersInput | CricketMatchUpdateManyWithWhereWithoutPlayersInput[]
    deleteMany?: CricketMatchScalarWhereInput | CricketMatchScalarWhereInput[]
  }

  export type CricketTeamUpdateOneWithoutPlayer_teamNestedInput = {
    create?: XOR<CricketTeamCreateWithoutPlayer_teamInput, CricketTeamUncheckedCreateWithoutPlayer_teamInput>
    connectOrCreate?: CricketTeamCreateOrConnectWithoutPlayer_teamInput
    upsert?: CricketTeamUpsertWithoutPlayer_teamInput
    disconnect?: CricketTeamWhereInput | boolean
    delete?: CricketTeamWhereInput | boolean
    connect?: CricketTeamWhereUniqueInput
    update?: XOR<XOR<CricketTeamUpdateToOneWithWhereWithoutPlayer_teamInput, CricketTeamUpdateWithoutPlayer_teamInput>, CricketTeamUncheckedUpdateWithoutPlayer_teamInput>
  }

  export type UsersUpdateManyWithoutCricketPlayerNestedInput = {
    create?: XOR<UsersCreateWithoutCricketPlayerInput, UsersUncheckedCreateWithoutCricketPlayerInput> | UsersCreateWithoutCricketPlayerInput[] | UsersUncheckedCreateWithoutCricketPlayerInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutCricketPlayerInput | UsersCreateOrConnectWithoutCricketPlayerInput[]
    upsert?: UsersUpsertWithWhereUniqueWithoutCricketPlayerInput | UsersUpsertWithWhereUniqueWithoutCricketPlayerInput[]
    createMany?: UsersCreateManyCricketPlayerInputEnvelope
    set?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    disconnect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    delete?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    update?: UsersUpdateWithWhereUniqueWithoutCricketPlayerInput | UsersUpdateWithWhereUniqueWithoutCricketPlayerInput[]
    updateMany?: UsersUpdateManyWithWhereWithoutCricketPlayerInput | UsersUpdateManyWithWhereWithoutCricketPlayerInput[]
    deleteMany?: UsersScalarWhereInput | UsersScalarWhereInput[]
  }

  export type CricketTeamUpdateManyWithoutPlayersNestedInput = {
    create?: XOR<CricketTeamCreateWithoutPlayersInput, CricketTeamUncheckedCreateWithoutPlayersInput> | CricketTeamCreateWithoutPlayersInput[] | CricketTeamUncheckedCreateWithoutPlayersInput[]
    connectOrCreate?: CricketTeamCreateOrConnectWithoutPlayersInput | CricketTeamCreateOrConnectWithoutPlayersInput[]
    upsert?: CricketTeamUpsertWithWhereUniqueWithoutPlayersInput | CricketTeamUpsertWithWhereUniqueWithoutPlayersInput[]
    set?: CricketTeamWhereUniqueInput | CricketTeamWhereUniqueInput[]
    disconnect?: CricketTeamWhereUniqueInput | CricketTeamWhereUniqueInput[]
    delete?: CricketTeamWhereUniqueInput | CricketTeamWhereUniqueInput[]
    connect?: CricketTeamWhereUniqueInput | CricketTeamWhereUniqueInput[]
    update?: CricketTeamUpdateWithWhereUniqueWithoutPlayersInput | CricketTeamUpdateWithWhereUniqueWithoutPlayersInput[]
    updateMany?: CricketTeamUpdateManyWithWhereWithoutPlayersInput | CricketTeamUpdateManyWithWhereWithoutPlayersInput[]
    deleteMany?: CricketTeamScalarWhereInput | CricketTeamScalarWhereInput[]
  }

  export type CricketMatchPlayerBattingScoreUpdateManyWithoutPlayerNestedInput = {
    create?: XOR<CricketMatchPlayerBattingScoreCreateWithoutPlayerInput, CricketMatchPlayerBattingScoreUncheckedCreateWithoutPlayerInput> | CricketMatchPlayerBattingScoreCreateWithoutPlayerInput[] | CricketMatchPlayerBattingScoreUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: CricketMatchPlayerBattingScoreCreateOrConnectWithoutPlayerInput | CricketMatchPlayerBattingScoreCreateOrConnectWithoutPlayerInput[]
    upsert?: CricketMatchPlayerBattingScoreUpsertWithWhereUniqueWithoutPlayerInput | CricketMatchPlayerBattingScoreUpsertWithWhereUniqueWithoutPlayerInput[]
    createMany?: CricketMatchPlayerBattingScoreCreateManyPlayerInputEnvelope
    set?: CricketMatchPlayerBattingScoreWhereUniqueInput | CricketMatchPlayerBattingScoreWhereUniqueInput[]
    disconnect?: CricketMatchPlayerBattingScoreWhereUniqueInput | CricketMatchPlayerBattingScoreWhereUniqueInput[]
    delete?: CricketMatchPlayerBattingScoreWhereUniqueInput | CricketMatchPlayerBattingScoreWhereUniqueInput[]
    connect?: CricketMatchPlayerBattingScoreWhereUniqueInput | CricketMatchPlayerBattingScoreWhereUniqueInput[]
    update?: CricketMatchPlayerBattingScoreUpdateWithWhereUniqueWithoutPlayerInput | CricketMatchPlayerBattingScoreUpdateWithWhereUniqueWithoutPlayerInput[]
    updateMany?: CricketMatchPlayerBattingScoreUpdateManyWithWhereWithoutPlayerInput | CricketMatchPlayerBattingScoreUpdateManyWithWhereWithoutPlayerInput[]
    deleteMany?: CricketMatchPlayerBattingScoreScalarWhereInput | CricketMatchPlayerBattingScoreScalarWhereInput[]
  }

  export type CricketMatchPlayerBowlingScoreUpdateManyWithoutPlayerNestedInput = {
    create?: XOR<CricketMatchPlayerBowlingScoreCreateWithoutPlayerInput, CricketMatchPlayerBowlingScoreUncheckedCreateWithoutPlayerInput> | CricketMatchPlayerBowlingScoreCreateWithoutPlayerInput[] | CricketMatchPlayerBowlingScoreUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: CricketMatchPlayerBowlingScoreCreateOrConnectWithoutPlayerInput | CricketMatchPlayerBowlingScoreCreateOrConnectWithoutPlayerInput[]
    upsert?: CricketMatchPlayerBowlingScoreUpsertWithWhereUniqueWithoutPlayerInput | CricketMatchPlayerBowlingScoreUpsertWithWhereUniqueWithoutPlayerInput[]
    createMany?: CricketMatchPlayerBowlingScoreCreateManyPlayerInputEnvelope
    set?: CricketMatchPlayerBowlingScoreWhereUniqueInput | CricketMatchPlayerBowlingScoreWhereUniqueInput[]
    disconnect?: CricketMatchPlayerBowlingScoreWhereUniqueInput | CricketMatchPlayerBowlingScoreWhereUniqueInput[]
    delete?: CricketMatchPlayerBowlingScoreWhereUniqueInput | CricketMatchPlayerBowlingScoreWhereUniqueInput[]
    connect?: CricketMatchPlayerBowlingScoreWhereUniqueInput | CricketMatchPlayerBowlingScoreWhereUniqueInput[]
    update?: CricketMatchPlayerBowlingScoreUpdateWithWhereUniqueWithoutPlayerInput | CricketMatchPlayerBowlingScoreUpdateWithWhereUniqueWithoutPlayerInput[]
    updateMany?: CricketMatchPlayerBowlingScoreUpdateManyWithWhereWithoutPlayerInput | CricketMatchPlayerBowlingScoreUpdateManyWithWhereWithoutPlayerInput[]
    deleteMany?: CricketMatchPlayerBowlingScoreScalarWhereInput | CricketMatchPlayerBowlingScoreScalarWhereInput[]
  }

  export type CricketMatchUncheckedUpdateManyWithoutPlayersNestedInput = {
    create?: XOR<CricketMatchCreateWithoutPlayersInput, CricketMatchUncheckedCreateWithoutPlayersInput> | CricketMatchCreateWithoutPlayersInput[] | CricketMatchUncheckedCreateWithoutPlayersInput[]
    connectOrCreate?: CricketMatchCreateOrConnectWithoutPlayersInput | CricketMatchCreateOrConnectWithoutPlayersInput[]
    upsert?: CricketMatchUpsertWithWhereUniqueWithoutPlayersInput | CricketMatchUpsertWithWhereUniqueWithoutPlayersInput[]
    set?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    disconnect?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    delete?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    connect?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    update?: CricketMatchUpdateWithWhereUniqueWithoutPlayersInput | CricketMatchUpdateWithWhereUniqueWithoutPlayersInput[]
    updateMany?: CricketMatchUpdateManyWithWhereWithoutPlayersInput | CricketMatchUpdateManyWithWhereWithoutPlayersInput[]
    deleteMany?: CricketMatchScalarWhereInput | CricketMatchScalarWhereInput[]
  }

  export type UsersUncheckedUpdateManyWithoutCricketPlayerNestedInput = {
    create?: XOR<UsersCreateWithoutCricketPlayerInput, UsersUncheckedCreateWithoutCricketPlayerInput> | UsersCreateWithoutCricketPlayerInput[] | UsersUncheckedCreateWithoutCricketPlayerInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutCricketPlayerInput | UsersCreateOrConnectWithoutCricketPlayerInput[]
    upsert?: UsersUpsertWithWhereUniqueWithoutCricketPlayerInput | UsersUpsertWithWhereUniqueWithoutCricketPlayerInput[]
    createMany?: UsersCreateManyCricketPlayerInputEnvelope
    set?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    disconnect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    delete?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    update?: UsersUpdateWithWhereUniqueWithoutCricketPlayerInput | UsersUpdateWithWhereUniqueWithoutCricketPlayerInput[]
    updateMany?: UsersUpdateManyWithWhereWithoutCricketPlayerInput | UsersUpdateManyWithWhereWithoutCricketPlayerInput[]
    deleteMany?: UsersScalarWhereInput | UsersScalarWhereInput[]
  }

  export type CricketTeamUncheckedUpdateManyWithoutPlayersNestedInput = {
    create?: XOR<CricketTeamCreateWithoutPlayersInput, CricketTeamUncheckedCreateWithoutPlayersInput> | CricketTeamCreateWithoutPlayersInput[] | CricketTeamUncheckedCreateWithoutPlayersInput[]
    connectOrCreate?: CricketTeamCreateOrConnectWithoutPlayersInput | CricketTeamCreateOrConnectWithoutPlayersInput[]
    upsert?: CricketTeamUpsertWithWhereUniqueWithoutPlayersInput | CricketTeamUpsertWithWhereUniqueWithoutPlayersInput[]
    set?: CricketTeamWhereUniqueInput | CricketTeamWhereUniqueInput[]
    disconnect?: CricketTeamWhereUniqueInput | CricketTeamWhereUniqueInput[]
    delete?: CricketTeamWhereUniqueInput | CricketTeamWhereUniqueInput[]
    connect?: CricketTeamWhereUniqueInput | CricketTeamWhereUniqueInput[]
    update?: CricketTeamUpdateWithWhereUniqueWithoutPlayersInput | CricketTeamUpdateWithWhereUniqueWithoutPlayersInput[]
    updateMany?: CricketTeamUpdateManyWithWhereWithoutPlayersInput | CricketTeamUpdateManyWithWhereWithoutPlayersInput[]
    deleteMany?: CricketTeamScalarWhereInput | CricketTeamScalarWhereInput[]
  }

  export type CricketMatchPlayerBattingScoreUncheckedUpdateManyWithoutPlayerNestedInput = {
    create?: XOR<CricketMatchPlayerBattingScoreCreateWithoutPlayerInput, CricketMatchPlayerBattingScoreUncheckedCreateWithoutPlayerInput> | CricketMatchPlayerBattingScoreCreateWithoutPlayerInput[] | CricketMatchPlayerBattingScoreUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: CricketMatchPlayerBattingScoreCreateOrConnectWithoutPlayerInput | CricketMatchPlayerBattingScoreCreateOrConnectWithoutPlayerInput[]
    upsert?: CricketMatchPlayerBattingScoreUpsertWithWhereUniqueWithoutPlayerInput | CricketMatchPlayerBattingScoreUpsertWithWhereUniqueWithoutPlayerInput[]
    createMany?: CricketMatchPlayerBattingScoreCreateManyPlayerInputEnvelope
    set?: CricketMatchPlayerBattingScoreWhereUniqueInput | CricketMatchPlayerBattingScoreWhereUniqueInput[]
    disconnect?: CricketMatchPlayerBattingScoreWhereUniqueInput | CricketMatchPlayerBattingScoreWhereUniqueInput[]
    delete?: CricketMatchPlayerBattingScoreWhereUniqueInput | CricketMatchPlayerBattingScoreWhereUniqueInput[]
    connect?: CricketMatchPlayerBattingScoreWhereUniqueInput | CricketMatchPlayerBattingScoreWhereUniqueInput[]
    update?: CricketMatchPlayerBattingScoreUpdateWithWhereUniqueWithoutPlayerInput | CricketMatchPlayerBattingScoreUpdateWithWhereUniqueWithoutPlayerInput[]
    updateMany?: CricketMatchPlayerBattingScoreUpdateManyWithWhereWithoutPlayerInput | CricketMatchPlayerBattingScoreUpdateManyWithWhereWithoutPlayerInput[]
    deleteMany?: CricketMatchPlayerBattingScoreScalarWhereInput | CricketMatchPlayerBattingScoreScalarWhereInput[]
  }

  export type CricketMatchPlayerBowlingScoreUncheckedUpdateManyWithoutPlayerNestedInput = {
    create?: XOR<CricketMatchPlayerBowlingScoreCreateWithoutPlayerInput, CricketMatchPlayerBowlingScoreUncheckedCreateWithoutPlayerInput> | CricketMatchPlayerBowlingScoreCreateWithoutPlayerInput[] | CricketMatchPlayerBowlingScoreUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: CricketMatchPlayerBowlingScoreCreateOrConnectWithoutPlayerInput | CricketMatchPlayerBowlingScoreCreateOrConnectWithoutPlayerInput[]
    upsert?: CricketMatchPlayerBowlingScoreUpsertWithWhereUniqueWithoutPlayerInput | CricketMatchPlayerBowlingScoreUpsertWithWhereUniqueWithoutPlayerInput[]
    createMany?: CricketMatchPlayerBowlingScoreCreateManyPlayerInputEnvelope
    set?: CricketMatchPlayerBowlingScoreWhereUniqueInput | CricketMatchPlayerBowlingScoreWhereUniqueInput[]
    disconnect?: CricketMatchPlayerBowlingScoreWhereUniqueInput | CricketMatchPlayerBowlingScoreWhereUniqueInput[]
    delete?: CricketMatchPlayerBowlingScoreWhereUniqueInput | CricketMatchPlayerBowlingScoreWhereUniqueInput[]
    connect?: CricketMatchPlayerBowlingScoreWhereUniqueInput | CricketMatchPlayerBowlingScoreWhereUniqueInput[]
    update?: CricketMatchPlayerBowlingScoreUpdateWithWhereUniqueWithoutPlayerInput | CricketMatchPlayerBowlingScoreUpdateWithWhereUniqueWithoutPlayerInput[]
    updateMany?: CricketMatchPlayerBowlingScoreUpdateManyWithWhereWithoutPlayerInput | CricketMatchPlayerBowlingScoreUpdateManyWithWhereWithoutPlayerInput[]
    deleteMany?: CricketMatchPlayerBowlingScoreScalarWhereInput | CricketMatchPlayerBowlingScoreScalarWhereInput[]
  }

  export type CricketTeamCreateNestedOneWithoutToss_winning_teamInput = {
    create?: XOR<CricketTeamCreateWithoutToss_winning_teamInput, CricketTeamUncheckedCreateWithoutToss_winning_teamInput>
    connectOrCreate?: CricketTeamCreateOrConnectWithoutToss_winning_teamInput
    connect?: CricketTeamWhereUniqueInput
  }

  export type CricketOverCreateNestedOneWithoutMatch_current_overInput = {
    create?: XOR<CricketOverCreateWithoutMatch_current_overInput, CricketOverUncheckedCreateWithoutMatch_current_overInput>
    connectOrCreate?: CricketOverCreateOrConnectWithoutMatch_current_overInput
    connect?: CricketOverWhereUniqueInput
  }

  export type CricketTeamCreateNestedOneWithoutWinning_teamInput = {
    create?: XOR<CricketTeamCreateWithoutWinning_teamInput, CricketTeamUncheckedCreateWithoutWinning_teamInput>
    connectOrCreate?: CricketTeamCreateOrConnectWithoutWinning_teamInput
    connect?: CricketTeamWhereUniqueInput
  }

  export type CricketTeamCreateNestedOneWithoutCricketMatchTeamAInput = {
    create?: XOR<CricketTeamCreateWithoutCricketMatchTeamAInput, CricketTeamUncheckedCreateWithoutCricketMatchTeamAInput>
    connectOrCreate?: CricketTeamCreateOrConnectWithoutCricketMatchTeamAInput
    connect?: CricketTeamWhereUniqueInput
  }

  export type CricketTeamCreateNestedOneWithoutCricketMatchTeamBInput = {
    create?: XOR<CricketTeamCreateWithoutCricketMatchTeamBInput, CricketTeamUncheckedCreateWithoutCricketMatchTeamBInput>
    connectOrCreate?: CricketTeamCreateOrConnectWithoutCricketMatchTeamBInput
    connect?: CricketTeamWhereUniqueInput
  }

  export type CricketTeamMatchDataCreateNestedOneWithoutCricketMatchTeamAInput = {
    create?: XOR<CricketTeamMatchDataCreateWithoutCricketMatchTeamAInput, CricketTeamMatchDataUncheckedCreateWithoutCricketMatchTeamAInput>
    connectOrCreate?: CricketTeamMatchDataCreateOrConnectWithoutCricketMatchTeamAInput
    connect?: CricketTeamMatchDataWhereUniqueInput
  }

  export type CricketTeamMatchDataCreateNestedOneWithoutCricketMatchTeamBInput = {
    create?: XOR<CricketTeamMatchDataCreateWithoutCricketMatchTeamBInput, CricketTeamMatchDataUncheckedCreateWithoutCricketMatchTeamBInput>
    connectOrCreate?: CricketTeamMatchDataCreateOrConnectWithoutCricketMatchTeamBInput
    connect?: CricketTeamMatchDataWhereUniqueInput
  }

  export type CricketTeamMatchDataCreateNestedOneWithoutMatchBttingTeamInput = {
    create?: XOR<CricketTeamMatchDataCreateWithoutMatchBttingTeamInput, CricketTeamMatchDataUncheckedCreateWithoutMatchBttingTeamInput>
    connectOrCreate?: CricketTeamMatchDataCreateOrConnectWithoutMatchBttingTeamInput
    connect?: CricketTeamMatchDataWhereUniqueInput
  }

  export type CricketTeamMatchDataCreateNestedOneWithoutMatchBowlingTeamInput = {
    create?: XOR<CricketTeamMatchDataCreateWithoutMatchBowlingTeamInput, CricketTeamMatchDataUncheckedCreateWithoutMatchBowlingTeamInput>
    connectOrCreate?: CricketTeamMatchDataCreateOrConnectWithoutMatchBowlingTeamInput
    connect?: CricketTeamMatchDataWhereUniqueInput
  }

  export type CricketPlayerCreateNestedManyWithoutMatchesInput = {
    create?: XOR<CricketPlayerCreateWithoutMatchesInput, CricketPlayerUncheckedCreateWithoutMatchesInput> | CricketPlayerCreateWithoutMatchesInput[] | CricketPlayerUncheckedCreateWithoutMatchesInput[]
    connectOrCreate?: CricketPlayerCreateOrConnectWithoutMatchesInput | CricketPlayerCreateOrConnectWithoutMatchesInput[]
    connect?: CricketPlayerWhereUniqueInput | CricketPlayerWhereUniqueInput[]
  }

  export type CricketOverCreateNestedManyWithoutMatchInput = {
    create?: XOR<CricketOverCreateWithoutMatchInput, CricketOverUncheckedCreateWithoutMatchInput> | CricketOverCreateWithoutMatchInput[] | CricketOverUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: CricketOverCreateOrConnectWithoutMatchInput | CricketOverCreateOrConnectWithoutMatchInput[]
    createMany?: CricketOverCreateManyMatchInputEnvelope
    connect?: CricketOverWhereUniqueInput | CricketOverWhereUniqueInput[]
  }

  export type CricketMatchPlayerBattingScoreCreateNestedManyWithoutMatchInput = {
    create?: XOR<CricketMatchPlayerBattingScoreCreateWithoutMatchInput, CricketMatchPlayerBattingScoreUncheckedCreateWithoutMatchInput> | CricketMatchPlayerBattingScoreCreateWithoutMatchInput[] | CricketMatchPlayerBattingScoreUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: CricketMatchPlayerBattingScoreCreateOrConnectWithoutMatchInput | CricketMatchPlayerBattingScoreCreateOrConnectWithoutMatchInput[]
    createMany?: CricketMatchPlayerBattingScoreCreateManyMatchInputEnvelope
    connect?: CricketMatchPlayerBattingScoreWhereUniqueInput | CricketMatchPlayerBattingScoreWhereUniqueInput[]
  }

  export type CricketMatchPlayerBowlingScoreCreateNestedManyWithoutMatchInput = {
    create?: XOR<CricketMatchPlayerBowlingScoreCreateWithoutMatchInput, CricketMatchPlayerBowlingScoreUncheckedCreateWithoutMatchInput> | CricketMatchPlayerBowlingScoreCreateWithoutMatchInput[] | CricketMatchPlayerBowlingScoreUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: CricketMatchPlayerBowlingScoreCreateOrConnectWithoutMatchInput | CricketMatchPlayerBowlingScoreCreateOrConnectWithoutMatchInput[]
    createMany?: CricketMatchPlayerBowlingScoreCreateManyMatchInputEnvelope
    connect?: CricketMatchPlayerBowlingScoreWhereUniqueInput | CricketMatchPlayerBowlingScoreWhereUniqueInput[]
  }

  export type CricketPlayerUncheckedCreateNestedManyWithoutMatchesInput = {
    create?: XOR<CricketPlayerCreateWithoutMatchesInput, CricketPlayerUncheckedCreateWithoutMatchesInput> | CricketPlayerCreateWithoutMatchesInput[] | CricketPlayerUncheckedCreateWithoutMatchesInput[]
    connectOrCreate?: CricketPlayerCreateOrConnectWithoutMatchesInput | CricketPlayerCreateOrConnectWithoutMatchesInput[]
    connect?: CricketPlayerWhereUniqueInput | CricketPlayerWhereUniqueInput[]
  }

  export type CricketOverUncheckedCreateNestedManyWithoutMatchInput = {
    create?: XOR<CricketOverCreateWithoutMatchInput, CricketOverUncheckedCreateWithoutMatchInput> | CricketOverCreateWithoutMatchInput[] | CricketOverUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: CricketOverCreateOrConnectWithoutMatchInput | CricketOverCreateOrConnectWithoutMatchInput[]
    createMany?: CricketOverCreateManyMatchInputEnvelope
    connect?: CricketOverWhereUniqueInput | CricketOverWhereUniqueInput[]
  }

  export type CricketMatchPlayerBattingScoreUncheckedCreateNestedManyWithoutMatchInput = {
    create?: XOR<CricketMatchPlayerBattingScoreCreateWithoutMatchInput, CricketMatchPlayerBattingScoreUncheckedCreateWithoutMatchInput> | CricketMatchPlayerBattingScoreCreateWithoutMatchInput[] | CricketMatchPlayerBattingScoreUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: CricketMatchPlayerBattingScoreCreateOrConnectWithoutMatchInput | CricketMatchPlayerBattingScoreCreateOrConnectWithoutMatchInput[]
    createMany?: CricketMatchPlayerBattingScoreCreateManyMatchInputEnvelope
    connect?: CricketMatchPlayerBattingScoreWhereUniqueInput | CricketMatchPlayerBattingScoreWhereUniqueInput[]
  }

  export type CricketMatchPlayerBowlingScoreUncheckedCreateNestedManyWithoutMatchInput = {
    create?: XOR<CricketMatchPlayerBowlingScoreCreateWithoutMatchInput, CricketMatchPlayerBowlingScoreUncheckedCreateWithoutMatchInput> | CricketMatchPlayerBowlingScoreCreateWithoutMatchInput[] | CricketMatchPlayerBowlingScoreUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: CricketMatchPlayerBowlingScoreCreateOrConnectWithoutMatchInput | CricketMatchPlayerBowlingScoreCreateOrConnectWithoutMatchInput[]
    createMany?: CricketMatchPlayerBowlingScoreCreateManyMatchInputEnvelope
    connect?: CricketMatchPlayerBowlingScoreWhereUniqueInput | CricketMatchPlayerBowlingScoreWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CricketTeamUpdateOneWithoutToss_winning_teamNestedInput = {
    create?: XOR<CricketTeamCreateWithoutToss_winning_teamInput, CricketTeamUncheckedCreateWithoutToss_winning_teamInput>
    connectOrCreate?: CricketTeamCreateOrConnectWithoutToss_winning_teamInput
    upsert?: CricketTeamUpsertWithoutToss_winning_teamInput
    disconnect?: CricketTeamWhereInput | boolean
    delete?: CricketTeamWhereInput | boolean
    connect?: CricketTeamWhereUniqueInput
    update?: XOR<XOR<CricketTeamUpdateToOneWithWhereWithoutToss_winning_teamInput, CricketTeamUpdateWithoutToss_winning_teamInput>, CricketTeamUncheckedUpdateWithoutToss_winning_teamInput>
  }

  export type CricketOverUpdateOneWithoutMatch_current_overNestedInput = {
    create?: XOR<CricketOverCreateWithoutMatch_current_overInput, CricketOverUncheckedCreateWithoutMatch_current_overInput>
    connectOrCreate?: CricketOverCreateOrConnectWithoutMatch_current_overInput
    upsert?: CricketOverUpsertWithoutMatch_current_overInput
    disconnect?: CricketOverWhereInput | boolean
    delete?: CricketOverWhereInput | boolean
    connect?: CricketOverWhereUniqueInput
    update?: XOR<XOR<CricketOverUpdateToOneWithWhereWithoutMatch_current_overInput, CricketOverUpdateWithoutMatch_current_overInput>, CricketOverUncheckedUpdateWithoutMatch_current_overInput>
  }

  export type CricketTeamUpdateOneWithoutWinning_teamNestedInput = {
    create?: XOR<CricketTeamCreateWithoutWinning_teamInput, CricketTeamUncheckedCreateWithoutWinning_teamInput>
    connectOrCreate?: CricketTeamCreateOrConnectWithoutWinning_teamInput
    upsert?: CricketTeamUpsertWithoutWinning_teamInput
    disconnect?: CricketTeamWhereInput | boolean
    delete?: CricketTeamWhereInput | boolean
    connect?: CricketTeamWhereUniqueInput
    update?: XOR<XOR<CricketTeamUpdateToOneWithWhereWithoutWinning_teamInput, CricketTeamUpdateWithoutWinning_teamInput>, CricketTeamUncheckedUpdateWithoutWinning_teamInput>
  }

  export type CricketTeamUpdateOneWithoutCricketMatchTeamANestedInput = {
    create?: XOR<CricketTeamCreateWithoutCricketMatchTeamAInput, CricketTeamUncheckedCreateWithoutCricketMatchTeamAInput>
    connectOrCreate?: CricketTeamCreateOrConnectWithoutCricketMatchTeamAInput
    upsert?: CricketTeamUpsertWithoutCricketMatchTeamAInput
    disconnect?: CricketTeamWhereInput | boolean
    delete?: CricketTeamWhereInput | boolean
    connect?: CricketTeamWhereUniqueInput
    update?: XOR<XOR<CricketTeamUpdateToOneWithWhereWithoutCricketMatchTeamAInput, CricketTeamUpdateWithoutCricketMatchTeamAInput>, CricketTeamUncheckedUpdateWithoutCricketMatchTeamAInput>
  }

  export type CricketTeamUpdateOneWithoutCricketMatchTeamBNestedInput = {
    create?: XOR<CricketTeamCreateWithoutCricketMatchTeamBInput, CricketTeamUncheckedCreateWithoutCricketMatchTeamBInput>
    connectOrCreate?: CricketTeamCreateOrConnectWithoutCricketMatchTeamBInput
    upsert?: CricketTeamUpsertWithoutCricketMatchTeamBInput
    disconnect?: CricketTeamWhereInput | boolean
    delete?: CricketTeamWhereInput | boolean
    connect?: CricketTeamWhereUniqueInput
    update?: XOR<XOR<CricketTeamUpdateToOneWithWhereWithoutCricketMatchTeamBInput, CricketTeamUpdateWithoutCricketMatchTeamBInput>, CricketTeamUncheckedUpdateWithoutCricketMatchTeamBInput>
  }

  export type CricketTeamMatchDataUpdateOneWithoutCricketMatchTeamANestedInput = {
    create?: XOR<CricketTeamMatchDataCreateWithoutCricketMatchTeamAInput, CricketTeamMatchDataUncheckedCreateWithoutCricketMatchTeamAInput>
    connectOrCreate?: CricketTeamMatchDataCreateOrConnectWithoutCricketMatchTeamAInput
    upsert?: CricketTeamMatchDataUpsertWithoutCricketMatchTeamAInput
    disconnect?: CricketTeamMatchDataWhereInput | boolean
    delete?: CricketTeamMatchDataWhereInput | boolean
    connect?: CricketTeamMatchDataWhereUniqueInput
    update?: XOR<XOR<CricketTeamMatchDataUpdateToOneWithWhereWithoutCricketMatchTeamAInput, CricketTeamMatchDataUpdateWithoutCricketMatchTeamAInput>, CricketTeamMatchDataUncheckedUpdateWithoutCricketMatchTeamAInput>
  }

  export type CricketTeamMatchDataUpdateOneWithoutCricketMatchTeamBNestedInput = {
    create?: XOR<CricketTeamMatchDataCreateWithoutCricketMatchTeamBInput, CricketTeamMatchDataUncheckedCreateWithoutCricketMatchTeamBInput>
    connectOrCreate?: CricketTeamMatchDataCreateOrConnectWithoutCricketMatchTeamBInput
    upsert?: CricketTeamMatchDataUpsertWithoutCricketMatchTeamBInput
    disconnect?: CricketTeamMatchDataWhereInput | boolean
    delete?: CricketTeamMatchDataWhereInput | boolean
    connect?: CricketTeamMatchDataWhereUniqueInput
    update?: XOR<XOR<CricketTeamMatchDataUpdateToOneWithWhereWithoutCricketMatchTeamBInput, CricketTeamMatchDataUpdateWithoutCricketMatchTeamBInput>, CricketTeamMatchDataUncheckedUpdateWithoutCricketMatchTeamBInput>
  }

  export type CricketTeamMatchDataUpdateOneWithoutMatchBttingTeamNestedInput = {
    create?: XOR<CricketTeamMatchDataCreateWithoutMatchBttingTeamInput, CricketTeamMatchDataUncheckedCreateWithoutMatchBttingTeamInput>
    connectOrCreate?: CricketTeamMatchDataCreateOrConnectWithoutMatchBttingTeamInput
    upsert?: CricketTeamMatchDataUpsertWithoutMatchBttingTeamInput
    disconnect?: CricketTeamMatchDataWhereInput | boolean
    delete?: CricketTeamMatchDataWhereInput | boolean
    connect?: CricketTeamMatchDataWhereUniqueInput
    update?: XOR<XOR<CricketTeamMatchDataUpdateToOneWithWhereWithoutMatchBttingTeamInput, CricketTeamMatchDataUpdateWithoutMatchBttingTeamInput>, CricketTeamMatchDataUncheckedUpdateWithoutMatchBttingTeamInput>
  }

  export type CricketTeamMatchDataUpdateOneWithoutMatchBowlingTeamNestedInput = {
    create?: XOR<CricketTeamMatchDataCreateWithoutMatchBowlingTeamInput, CricketTeamMatchDataUncheckedCreateWithoutMatchBowlingTeamInput>
    connectOrCreate?: CricketTeamMatchDataCreateOrConnectWithoutMatchBowlingTeamInput
    upsert?: CricketTeamMatchDataUpsertWithoutMatchBowlingTeamInput
    disconnect?: CricketTeamMatchDataWhereInput | boolean
    delete?: CricketTeamMatchDataWhereInput | boolean
    connect?: CricketTeamMatchDataWhereUniqueInput
    update?: XOR<XOR<CricketTeamMatchDataUpdateToOneWithWhereWithoutMatchBowlingTeamInput, CricketTeamMatchDataUpdateWithoutMatchBowlingTeamInput>, CricketTeamMatchDataUncheckedUpdateWithoutMatchBowlingTeamInput>
  }

  export type CricketPlayerUpdateManyWithoutMatchesNestedInput = {
    create?: XOR<CricketPlayerCreateWithoutMatchesInput, CricketPlayerUncheckedCreateWithoutMatchesInput> | CricketPlayerCreateWithoutMatchesInput[] | CricketPlayerUncheckedCreateWithoutMatchesInput[]
    connectOrCreate?: CricketPlayerCreateOrConnectWithoutMatchesInput | CricketPlayerCreateOrConnectWithoutMatchesInput[]
    upsert?: CricketPlayerUpsertWithWhereUniqueWithoutMatchesInput | CricketPlayerUpsertWithWhereUniqueWithoutMatchesInput[]
    set?: CricketPlayerWhereUniqueInput | CricketPlayerWhereUniqueInput[]
    disconnect?: CricketPlayerWhereUniqueInput | CricketPlayerWhereUniqueInput[]
    delete?: CricketPlayerWhereUniqueInput | CricketPlayerWhereUniqueInput[]
    connect?: CricketPlayerWhereUniqueInput | CricketPlayerWhereUniqueInput[]
    update?: CricketPlayerUpdateWithWhereUniqueWithoutMatchesInput | CricketPlayerUpdateWithWhereUniqueWithoutMatchesInput[]
    updateMany?: CricketPlayerUpdateManyWithWhereWithoutMatchesInput | CricketPlayerUpdateManyWithWhereWithoutMatchesInput[]
    deleteMany?: CricketPlayerScalarWhereInput | CricketPlayerScalarWhereInput[]
  }

  export type CricketOverUpdateManyWithoutMatchNestedInput = {
    create?: XOR<CricketOverCreateWithoutMatchInput, CricketOverUncheckedCreateWithoutMatchInput> | CricketOverCreateWithoutMatchInput[] | CricketOverUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: CricketOverCreateOrConnectWithoutMatchInput | CricketOverCreateOrConnectWithoutMatchInput[]
    upsert?: CricketOverUpsertWithWhereUniqueWithoutMatchInput | CricketOverUpsertWithWhereUniqueWithoutMatchInput[]
    createMany?: CricketOverCreateManyMatchInputEnvelope
    set?: CricketOverWhereUniqueInput | CricketOverWhereUniqueInput[]
    disconnect?: CricketOverWhereUniqueInput | CricketOverWhereUniqueInput[]
    delete?: CricketOverWhereUniqueInput | CricketOverWhereUniqueInput[]
    connect?: CricketOverWhereUniqueInput | CricketOverWhereUniqueInput[]
    update?: CricketOverUpdateWithWhereUniqueWithoutMatchInput | CricketOverUpdateWithWhereUniqueWithoutMatchInput[]
    updateMany?: CricketOverUpdateManyWithWhereWithoutMatchInput | CricketOverUpdateManyWithWhereWithoutMatchInput[]
    deleteMany?: CricketOverScalarWhereInput | CricketOverScalarWhereInput[]
  }

  export type CricketMatchPlayerBattingScoreUpdateManyWithoutMatchNestedInput = {
    create?: XOR<CricketMatchPlayerBattingScoreCreateWithoutMatchInput, CricketMatchPlayerBattingScoreUncheckedCreateWithoutMatchInput> | CricketMatchPlayerBattingScoreCreateWithoutMatchInput[] | CricketMatchPlayerBattingScoreUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: CricketMatchPlayerBattingScoreCreateOrConnectWithoutMatchInput | CricketMatchPlayerBattingScoreCreateOrConnectWithoutMatchInput[]
    upsert?: CricketMatchPlayerBattingScoreUpsertWithWhereUniqueWithoutMatchInput | CricketMatchPlayerBattingScoreUpsertWithWhereUniqueWithoutMatchInput[]
    createMany?: CricketMatchPlayerBattingScoreCreateManyMatchInputEnvelope
    set?: CricketMatchPlayerBattingScoreWhereUniqueInput | CricketMatchPlayerBattingScoreWhereUniqueInput[]
    disconnect?: CricketMatchPlayerBattingScoreWhereUniqueInput | CricketMatchPlayerBattingScoreWhereUniqueInput[]
    delete?: CricketMatchPlayerBattingScoreWhereUniqueInput | CricketMatchPlayerBattingScoreWhereUniqueInput[]
    connect?: CricketMatchPlayerBattingScoreWhereUniqueInput | CricketMatchPlayerBattingScoreWhereUniqueInput[]
    update?: CricketMatchPlayerBattingScoreUpdateWithWhereUniqueWithoutMatchInput | CricketMatchPlayerBattingScoreUpdateWithWhereUniqueWithoutMatchInput[]
    updateMany?: CricketMatchPlayerBattingScoreUpdateManyWithWhereWithoutMatchInput | CricketMatchPlayerBattingScoreUpdateManyWithWhereWithoutMatchInput[]
    deleteMany?: CricketMatchPlayerBattingScoreScalarWhereInput | CricketMatchPlayerBattingScoreScalarWhereInput[]
  }

  export type CricketMatchPlayerBowlingScoreUpdateManyWithoutMatchNestedInput = {
    create?: XOR<CricketMatchPlayerBowlingScoreCreateWithoutMatchInput, CricketMatchPlayerBowlingScoreUncheckedCreateWithoutMatchInput> | CricketMatchPlayerBowlingScoreCreateWithoutMatchInput[] | CricketMatchPlayerBowlingScoreUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: CricketMatchPlayerBowlingScoreCreateOrConnectWithoutMatchInput | CricketMatchPlayerBowlingScoreCreateOrConnectWithoutMatchInput[]
    upsert?: CricketMatchPlayerBowlingScoreUpsertWithWhereUniqueWithoutMatchInput | CricketMatchPlayerBowlingScoreUpsertWithWhereUniqueWithoutMatchInput[]
    createMany?: CricketMatchPlayerBowlingScoreCreateManyMatchInputEnvelope
    set?: CricketMatchPlayerBowlingScoreWhereUniqueInput | CricketMatchPlayerBowlingScoreWhereUniqueInput[]
    disconnect?: CricketMatchPlayerBowlingScoreWhereUniqueInput | CricketMatchPlayerBowlingScoreWhereUniqueInput[]
    delete?: CricketMatchPlayerBowlingScoreWhereUniqueInput | CricketMatchPlayerBowlingScoreWhereUniqueInput[]
    connect?: CricketMatchPlayerBowlingScoreWhereUniqueInput | CricketMatchPlayerBowlingScoreWhereUniqueInput[]
    update?: CricketMatchPlayerBowlingScoreUpdateWithWhereUniqueWithoutMatchInput | CricketMatchPlayerBowlingScoreUpdateWithWhereUniqueWithoutMatchInput[]
    updateMany?: CricketMatchPlayerBowlingScoreUpdateManyWithWhereWithoutMatchInput | CricketMatchPlayerBowlingScoreUpdateManyWithWhereWithoutMatchInput[]
    deleteMany?: CricketMatchPlayerBowlingScoreScalarWhereInput | CricketMatchPlayerBowlingScoreScalarWhereInput[]
  }

  export type CricketPlayerUncheckedUpdateManyWithoutMatchesNestedInput = {
    create?: XOR<CricketPlayerCreateWithoutMatchesInput, CricketPlayerUncheckedCreateWithoutMatchesInput> | CricketPlayerCreateWithoutMatchesInput[] | CricketPlayerUncheckedCreateWithoutMatchesInput[]
    connectOrCreate?: CricketPlayerCreateOrConnectWithoutMatchesInput | CricketPlayerCreateOrConnectWithoutMatchesInput[]
    upsert?: CricketPlayerUpsertWithWhereUniqueWithoutMatchesInput | CricketPlayerUpsertWithWhereUniqueWithoutMatchesInput[]
    set?: CricketPlayerWhereUniqueInput | CricketPlayerWhereUniqueInput[]
    disconnect?: CricketPlayerWhereUniqueInput | CricketPlayerWhereUniqueInput[]
    delete?: CricketPlayerWhereUniqueInput | CricketPlayerWhereUniqueInput[]
    connect?: CricketPlayerWhereUniqueInput | CricketPlayerWhereUniqueInput[]
    update?: CricketPlayerUpdateWithWhereUniqueWithoutMatchesInput | CricketPlayerUpdateWithWhereUniqueWithoutMatchesInput[]
    updateMany?: CricketPlayerUpdateManyWithWhereWithoutMatchesInput | CricketPlayerUpdateManyWithWhereWithoutMatchesInput[]
    deleteMany?: CricketPlayerScalarWhereInput | CricketPlayerScalarWhereInput[]
  }

  export type CricketOverUncheckedUpdateManyWithoutMatchNestedInput = {
    create?: XOR<CricketOverCreateWithoutMatchInput, CricketOverUncheckedCreateWithoutMatchInput> | CricketOverCreateWithoutMatchInput[] | CricketOverUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: CricketOverCreateOrConnectWithoutMatchInput | CricketOverCreateOrConnectWithoutMatchInput[]
    upsert?: CricketOverUpsertWithWhereUniqueWithoutMatchInput | CricketOverUpsertWithWhereUniqueWithoutMatchInput[]
    createMany?: CricketOverCreateManyMatchInputEnvelope
    set?: CricketOverWhereUniqueInput | CricketOverWhereUniqueInput[]
    disconnect?: CricketOverWhereUniqueInput | CricketOverWhereUniqueInput[]
    delete?: CricketOverWhereUniqueInput | CricketOverWhereUniqueInput[]
    connect?: CricketOverWhereUniqueInput | CricketOverWhereUniqueInput[]
    update?: CricketOverUpdateWithWhereUniqueWithoutMatchInput | CricketOverUpdateWithWhereUniqueWithoutMatchInput[]
    updateMany?: CricketOverUpdateManyWithWhereWithoutMatchInput | CricketOverUpdateManyWithWhereWithoutMatchInput[]
    deleteMany?: CricketOverScalarWhereInput | CricketOverScalarWhereInput[]
  }

  export type CricketMatchPlayerBattingScoreUncheckedUpdateManyWithoutMatchNestedInput = {
    create?: XOR<CricketMatchPlayerBattingScoreCreateWithoutMatchInput, CricketMatchPlayerBattingScoreUncheckedCreateWithoutMatchInput> | CricketMatchPlayerBattingScoreCreateWithoutMatchInput[] | CricketMatchPlayerBattingScoreUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: CricketMatchPlayerBattingScoreCreateOrConnectWithoutMatchInput | CricketMatchPlayerBattingScoreCreateOrConnectWithoutMatchInput[]
    upsert?: CricketMatchPlayerBattingScoreUpsertWithWhereUniqueWithoutMatchInput | CricketMatchPlayerBattingScoreUpsertWithWhereUniqueWithoutMatchInput[]
    createMany?: CricketMatchPlayerBattingScoreCreateManyMatchInputEnvelope
    set?: CricketMatchPlayerBattingScoreWhereUniqueInput | CricketMatchPlayerBattingScoreWhereUniqueInput[]
    disconnect?: CricketMatchPlayerBattingScoreWhereUniqueInput | CricketMatchPlayerBattingScoreWhereUniqueInput[]
    delete?: CricketMatchPlayerBattingScoreWhereUniqueInput | CricketMatchPlayerBattingScoreWhereUniqueInput[]
    connect?: CricketMatchPlayerBattingScoreWhereUniqueInput | CricketMatchPlayerBattingScoreWhereUniqueInput[]
    update?: CricketMatchPlayerBattingScoreUpdateWithWhereUniqueWithoutMatchInput | CricketMatchPlayerBattingScoreUpdateWithWhereUniqueWithoutMatchInput[]
    updateMany?: CricketMatchPlayerBattingScoreUpdateManyWithWhereWithoutMatchInput | CricketMatchPlayerBattingScoreUpdateManyWithWhereWithoutMatchInput[]
    deleteMany?: CricketMatchPlayerBattingScoreScalarWhereInput | CricketMatchPlayerBattingScoreScalarWhereInput[]
  }

  export type CricketMatchPlayerBowlingScoreUncheckedUpdateManyWithoutMatchNestedInput = {
    create?: XOR<CricketMatchPlayerBowlingScoreCreateWithoutMatchInput, CricketMatchPlayerBowlingScoreUncheckedCreateWithoutMatchInput> | CricketMatchPlayerBowlingScoreCreateWithoutMatchInput[] | CricketMatchPlayerBowlingScoreUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: CricketMatchPlayerBowlingScoreCreateOrConnectWithoutMatchInput | CricketMatchPlayerBowlingScoreCreateOrConnectWithoutMatchInput[]
    upsert?: CricketMatchPlayerBowlingScoreUpsertWithWhereUniqueWithoutMatchInput | CricketMatchPlayerBowlingScoreUpsertWithWhereUniqueWithoutMatchInput[]
    createMany?: CricketMatchPlayerBowlingScoreCreateManyMatchInputEnvelope
    set?: CricketMatchPlayerBowlingScoreWhereUniqueInput | CricketMatchPlayerBowlingScoreWhereUniqueInput[]
    disconnect?: CricketMatchPlayerBowlingScoreWhereUniqueInput | CricketMatchPlayerBowlingScoreWhereUniqueInput[]
    delete?: CricketMatchPlayerBowlingScoreWhereUniqueInput | CricketMatchPlayerBowlingScoreWhereUniqueInput[]
    connect?: CricketMatchPlayerBowlingScoreWhereUniqueInput | CricketMatchPlayerBowlingScoreWhereUniqueInput[]
    update?: CricketMatchPlayerBowlingScoreUpdateWithWhereUniqueWithoutMatchInput | CricketMatchPlayerBowlingScoreUpdateWithWhereUniqueWithoutMatchInput[]
    updateMany?: CricketMatchPlayerBowlingScoreUpdateManyWithWhereWithoutMatchInput | CricketMatchPlayerBowlingScoreUpdateManyWithWhereWithoutMatchInput[]
    deleteMany?: CricketMatchPlayerBowlingScoreScalarWhereInput | CricketMatchPlayerBowlingScoreScalarWhereInput[]
  }

  export type CricketMatchPlayerBattingScoreCreateNestedManyWithoutMatch_battersInput = {
    create?: XOR<CricketMatchPlayerBattingScoreCreateWithoutMatch_battersInput, CricketMatchPlayerBattingScoreUncheckedCreateWithoutMatch_battersInput> | CricketMatchPlayerBattingScoreCreateWithoutMatch_battersInput[] | CricketMatchPlayerBattingScoreUncheckedCreateWithoutMatch_battersInput[]
    connectOrCreate?: CricketMatchPlayerBattingScoreCreateOrConnectWithoutMatch_battersInput | CricketMatchPlayerBattingScoreCreateOrConnectWithoutMatch_battersInput[]
    connect?: CricketMatchPlayerBattingScoreWhereUniqueInput | CricketMatchPlayerBattingScoreWhereUniqueInput[]
  }

  export type CricketMatchPlayerBowlingScoreCreateNestedManyWithoutMatch_bowlersInput = {
    create?: XOR<CricketMatchPlayerBowlingScoreCreateWithoutMatch_bowlersInput, CricketMatchPlayerBowlingScoreUncheckedCreateWithoutMatch_bowlersInput> | CricketMatchPlayerBowlingScoreCreateWithoutMatch_bowlersInput[] | CricketMatchPlayerBowlingScoreUncheckedCreateWithoutMatch_bowlersInput[]
    connectOrCreate?: CricketMatchPlayerBowlingScoreCreateOrConnectWithoutMatch_bowlersInput | CricketMatchPlayerBowlingScoreCreateOrConnectWithoutMatch_bowlersInput[]
    connect?: CricketMatchPlayerBowlingScoreWhereUniqueInput | CricketMatchPlayerBowlingScoreWhereUniqueInput[]
  }

  export type CricketTeamCreateNestedOneWithoutCricket_match_teamDataInput = {
    create?: XOR<CricketTeamCreateWithoutCricket_match_teamDataInput, CricketTeamUncheckedCreateWithoutCricket_match_teamDataInput>
    connectOrCreate?: CricketTeamCreateOrConnectWithoutCricket_match_teamDataInput
    connect?: CricketTeamWhereUniqueInput
  }

  export type CricketMatchCreateNestedManyWithoutTeamAScoreInput = {
    create?: XOR<CricketMatchCreateWithoutTeamAScoreInput, CricketMatchUncheckedCreateWithoutTeamAScoreInput> | CricketMatchCreateWithoutTeamAScoreInput[] | CricketMatchUncheckedCreateWithoutTeamAScoreInput[]
    connectOrCreate?: CricketMatchCreateOrConnectWithoutTeamAScoreInput | CricketMatchCreateOrConnectWithoutTeamAScoreInput[]
    createMany?: CricketMatchCreateManyTeamAScoreInputEnvelope
    connect?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
  }

  export type CricketMatchCreateNestedManyWithoutTeamBScoreInput = {
    create?: XOR<CricketMatchCreateWithoutTeamBScoreInput, CricketMatchUncheckedCreateWithoutTeamBScoreInput> | CricketMatchCreateWithoutTeamBScoreInput[] | CricketMatchUncheckedCreateWithoutTeamBScoreInput[]
    connectOrCreate?: CricketMatchCreateOrConnectWithoutTeamBScoreInput | CricketMatchCreateOrConnectWithoutTeamBScoreInput[]
    createMany?: CricketMatchCreateManyTeamBScoreInputEnvelope
    connect?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
  }

  export type CricketMatchCreateNestedManyWithoutBattingTeamInput = {
    create?: XOR<CricketMatchCreateWithoutBattingTeamInput, CricketMatchUncheckedCreateWithoutBattingTeamInput> | CricketMatchCreateWithoutBattingTeamInput[] | CricketMatchUncheckedCreateWithoutBattingTeamInput[]
    connectOrCreate?: CricketMatchCreateOrConnectWithoutBattingTeamInput | CricketMatchCreateOrConnectWithoutBattingTeamInput[]
    createMany?: CricketMatchCreateManyBattingTeamInputEnvelope
    connect?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
  }

  export type CricketMatchCreateNestedManyWithoutBowlingTeamInput = {
    create?: XOR<CricketMatchCreateWithoutBowlingTeamInput, CricketMatchUncheckedCreateWithoutBowlingTeamInput> | CricketMatchCreateWithoutBowlingTeamInput[] | CricketMatchUncheckedCreateWithoutBowlingTeamInput[]
    connectOrCreate?: CricketMatchCreateOrConnectWithoutBowlingTeamInput | CricketMatchCreateOrConnectWithoutBowlingTeamInput[]
    createMany?: CricketMatchCreateManyBowlingTeamInputEnvelope
    connect?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
  }

  export type CricketMatchPlayerBattingScoreUncheckedCreateNestedManyWithoutMatch_battersInput = {
    create?: XOR<CricketMatchPlayerBattingScoreCreateWithoutMatch_battersInput, CricketMatchPlayerBattingScoreUncheckedCreateWithoutMatch_battersInput> | CricketMatchPlayerBattingScoreCreateWithoutMatch_battersInput[] | CricketMatchPlayerBattingScoreUncheckedCreateWithoutMatch_battersInput[]
    connectOrCreate?: CricketMatchPlayerBattingScoreCreateOrConnectWithoutMatch_battersInput | CricketMatchPlayerBattingScoreCreateOrConnectWithoutMatch_battersInput[]
    connect?: CricketMatchPlayerBattingScoreWhereUniqueInput | CricketMatchPlayerBattingScoreWhereUniqueInput[]
  }

  export type CricketMatchPlayerBowlingScoreUncheckedCreateNestedManyWithoutMatch_bowlersInput = {
    create?: XOR<CricketMatchPlayerBowlingScoreCreateWithoutMatch_bowlersInput, CricketMatchPlayerBowlingScoreUncheckedCreateWithoutMatch_bowlersInput> | CricketMatchPlayerBowlingScoreCreateWithoutMatch_bowlersInput[] | CricketMatchPlayerBowlingScoreUncheckedCreateWithoutMatch_bowlersInput[]
    connectOrCreate?: CricketMatchPlayerBowlingScoreCreateOrConnectWithoutMatch_bowlersInput | CricketMatchPlayerBowlingScoreCreateOrConnectWithoutMatch_bowlersInput[]
    connect?: CricketMatchPlayerBowlingScoreWhereUniqueInput | CricketMatchPlayerBowlingScoreWhereUniqueInput[]
  }

  export type CricketMatchUncheckedCreateNestedManyWithoutTeamAScoreInput = {
    create?: XOR<CricketMatchCreateWithoutTeamAScoreInput, CricketMatchUncheckedCreateWithoutTeamAScoreInput> | CricketMatchCreateWithoutTeamAScoreInput[] | CricketMatchUncheckedCreateWithoutTeamAScoreInput[]
    connectOrCreate?: CricketMatchCreateOrConnectWithoutTeamAScoreInput | CricketMatchCreateOrConnectWithoutTeamAScoreInput[]
    createMany?: CricketMatchCreateManyTeamAScoreInputEnvelope
    connect?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
  }

  export type CricketMatchUncheckedCreateNestedManyWithoutTeamBScoreInput = {
    create?: XOR<CricketMatchCreateWithoutTeamBScoreInput, CricketMatchUncheckedCreateWithoutTeamBScoreInput> | CricketMatchCreateWithoutTeamBScoreInput[] | CricketMatchUncheckedCreateWithoutTeamBScoreInput[]
    connectOrCreate?: CricketMatchCreateOrConnectWithoutTeamBScoreInput | CricketMatchCreateOrConnectWithoutTeamBScoreInput[]
    createMany?: CricketMatchCreateManyTeamBScoreInputEnvelope
    connect?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
  }

  export type CricketMatchUncheckedCreateNestedManyWithoutBattingTeamInput = {
    create?: XOR<CricketMatchCreateWithoutBattingTeamInput, CricketMatchUncheckedCreateWithoutBattingTeamInput> | CricketMatchCreateWithoutBattingTeamInput[] | CricketMatchUncheckedCreateWithoutBattingTeamInput[]
    connectOrCreate?: CricketMatchCreateOrConnectWithoutBattingTeamInput | CricketMatchCreateOrConnectWithoutBattingTeamInput[]
    createMany?: CricketMatchCreateManyBattingTeamInputEnvelope
    connect?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
  }

  export type CricketMatchUncheckedCreateNestedManyWithoutBowlingTeamInput = {
    create?: XOR<CricketMatchCreateWithoutBowlingTeamInput, CricketMatchUncheckedCreateWithoutBowlingTeamInput> | CricketMatchCreateWithoutBowlingTeamInput[] | CricketMatchUncheckedCreateWithoutBowlingTeamInput[]
    connectOrCreate?: CricketMatchCreateOrConnectWithoutBowlingTeamInput | CricketMatchCreateOrConnectWithoutBowlingTeamInput[]
    createMany?: CricketMatchCreateManyBowlingTeamInputEnvelope
    connect?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
  }

  export type CricketMatchPlayerBattingScoreUpdateManyWithoutMatch_battersNestedInput = {
    create?: XOR<CricketMatchPlayerBattingScoreCreateWithoutMatch_battersInput, CricketMatchPlayerBattingScoreUncheckedCreateWithoutMatch_battersInput> | CricketMatchPlayerBattingScoreCreateWithoutMatch_battersInput[] | CricketMatchPlayerBattingScoreUncheckedCreateWithoutMatch_battersInput[]
    connectOrCreate?: CricketMatchPlayerBattingScoreCreateOrConnectWithoutMatch_battersInput | CricketMatchPlayerBattingScoreCreateOrConnectWithoutMatch_battersInput[]
    upsert?: CricketMatchPlayerBattingScoreUpsertWithWhereUniqueWithoutMatch_battersInput | CricketMatchPlayerBattingScoreUpsertWithWhereUniqueWithoutMatch_battersInput[]
    set?: CricketMatchPlayerBattingScoreWhereUniqueInput | CricketMatchPlayerBattingScoreWhereUniqueInput[]
    disconnect?: CricketMatchPlayerBattingScoreWhereUniqueInput | CricketMatchPlayerBattingScoreWhereUniqueInput[]
    delete?: CricketMatchPlayerBattingScoreWhereUniqueInput | CricketMatchPlayerBattingScoreWhereUniqueInput[]
    connect?: CricketMatchPlayerBattingScoreWhereUniqueInput | CricketMatchPlayerBattingScoreWhereUniqueInput[]
    update?: CricketMatchPlayerBattingScoreUpdateWithWhereUniqueWithoutMatch_battersInput | CricketMatchPlayerBattingScoreUpdateWithWhereUniqueWithoutMatch_battersInput[]
    updateMany?: CricketMatchPlayerBattingScoreUpdateManyWithWhereWithoutMatch_battersInput | CricketMatchPlayerBattingScoreUpdateManyWithWhereWithoutMatch_battersInput[]
    deleteMany?: CricketMatchPlayerBattingScoreScalarWhereInput | CricketMatchPlayerBattingScoreScalarWhereInput[]
  }

  export type CricketMatchPlayerBowlingScoreUpdateManyWithoutMatch_bowlersNestedInput = {
    create?: XOR<CricketMatchPlayerBowlingScoreCreateWithoutMatch_bowlersInput, CricketMatchPlayerBowlingScoreUncheckedCreateWithoutMatch_bowlersInput> | CricketMatchPlayerBowlingScoreCreateWithoutMatch_bowlersInput[] | CricketMatchPlayerBowlingScoreUncheckedCreateWithoutMatch_bowlersInput[]
    connectOrCreate?: CricketMatchPlayerBowlingScoreCreateOrConnectWithoutMatch_bowlersInput | CricketMatchPlayerBowlingScoreCreateOrConnectWithoutMatch_bowlersInput[]
    upsert?: CricketMatchPlayerBowlingScoreUpsertWithWhereUniqueWithoutMatch_bowlersInput | CricketMatchPlayerBowlingScoreUpsertWithWhereUniqueWithoutMatch_bowlersInput[]
    set?: CricketMatchPlayerBowlingScoreWhereUniqueInput | CricketMatchPlayerBowlingScoreWhereUniqueInput[]
    disconnect?: CricketMatchPlayerBowlingScoreWhereUniqueInput | CricketMatchPlayerBowlingScoreWhereUniqueInput[]
    delete?: CricketMatchPlayerBowlingScoreWhereUniqueInput | CricketMatchPlayerBowlingScoreWhereUniqueInput[]
    connect?: CricketMatchPlayerBowlingScoreWhereUniqueInput | CricketMatchPlayerBowlingScoreWhereUniqueInput[]
    update?: CricketMatchPlayerBowlingScoreUpdateWithWhereUniqueWithoutMatch_bowlersInput | CricketMatchPlayerBowlingScoreUpdateWithWhereUniqueWithoutMatch_bowlersInput[]
    updateMany?: CricketMatchPlayerBowlingScoreUpdateManyWithWhereWithoutMatch_bowlersInput | CricketMatchPlayerBowlingScoreUpdateManyWithWhereWithoutMatch_bowlersInput[]
    deleteMany?: CricketMatchPlayerBowlingScoreScalarWhereInput | CricketMatchPlayerBowlingScoreScalarWhereInput[]
  }

  export type CricketTeamUpdateOneWithoutCricket_match_teamDataNestedInput = {
    create?: XOR<CricketTeamCreateWithoutCricket_match_teamDataInput, CricketTeamUncheckedCreateWithoutCricket_match_teamDataInput>
    connectOrCreate?: CricketTeamCreateOrConnectWithoutCricket_match_teamDataInput
    upsert?: CricketTeamUpsertWithoutCricket_match_teamDataInput
    disconnect?: CricketTeamWhereInput | boolean
    delete?: CricketTeamWhereInput | boolean
    connect?: CricketTeamWhereUniqueInput
    update?: XOR<XOR<CricketTeamUpdateToOneWithWhereWithoutCricket_match_teamDataInput, CricketTeamUpdateWithoutCricket_match_teamDataInput>, CricketTeamUncheckedUpdateWithoutCricket_match_teamDataInput>
  }

  export type CricketMatchUpdateManyWithoutTeamAScoreNestedInput = {
    create?: XOR<CricketMatchCreateWithoutTeamAScoreInput, CricketMatchUncheckedCreateWithoutTeamAScoreInput> | CricketMatchCreateWithoutTeamAScoreInput[] | CricketMatchUncheckedCreateWithoutTeamAScoreInput[]
    connectOrCreate?: CricketMatchCreateOrConnectWithoutTeamAScoreInput | CricketMatchCreateOrConnectWithoutTeamAScoreInput[]
    upsert?: CricketMatchUpsertWithWhereUniqueWithoutTeamAScoreInput | CricketMatchUpsertWithWhereUniqueWithoutTeamAScoreInput[]
    createMany?: CricketMatchCreateManyTeamAScoreInputEnvelope
    set?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    disconnect?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    delete?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    connect?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    update?: CricketMatchUpdateWithWhereUniqueWithoutTeamAScoreInput | CricketMatchUpdateWithWhereUniqueWithoutTeamAScoreInput[]
    updateMany?: CricketMatchUpdateManyWithWhereWithoutTeamAScoreInput | CricketMatchUpdateManyWithWhereWithoutTeamAScoreInput[]
    deleteMany?: CricketMatchScalarWhereInput | CricketMatchScalarWhereInput[]
  }

  export type CricketMatchUpdateManyWithoutTeamBScoreNestedInput = {
    create?: XOR<CricketMatchCreateWithoutTeamBScoreInput, CricketMatchUncheckedCreateWithoutTeamBScoreInput> | CricketMatchCreateWithoutTeamBScoreInput[] | CricketMatchUncheckedCreateWithoutTeamBScoreInput[]
    connectOrCreate?: CricketMatchCreateOrConnectWithoutTeamBScoreInput | CricketMatchCreateOrConnectWithoutTeamBScoreInput[]
    upsert?: CricketMatchUpsertWithWhereUniqueWithoutTeamBScoreInput | CricketMatchUpsertWithWhereUniqueWithoutTeamBScoreInput[]
    createMany?: CricketMatchCreateManyTeamBScoreInputEnvelope
    set?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    disconnect?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    delete?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    connect?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    update?: CricketMatchUpdateWithWhereUniqueWithoutTeamBScoreInput | CricketMatchUpdateWithWhereUniqueWithoutTeamBScoreInput[]
    updateMany?: CricketMatchUpdateManyWithWhereWithoutTeamBScoreInput | CricketMatchUpdateManyWithWhereWithoutTeamBScoreInput[]
    deleteMany?: CricketMatchScalarWhereInput | CricketMatchScalarWhereInput[]
  }

  export type CricketMatchUpdateManyWithoutBattingTeamNestedInput = {
    create?: XOR<CricketMatchCreateWithoutBattingTeamInput, CricketMatchUncheckedCreateWithoutBattingTeamInput> | CricketMatchCreateWithoutBattingTeamInput[] | CricketMatchUncheckedCreateWithoutBattingTeamInput[]
    connectOrCreate?: CricketMatchCreateOrConnectWithoutBattingTeamInput | CricketMatchCreateOrConnectWithoutBattingTeamInput[]
    upsert?: CricketMatchUpsertWithWhereUniqueWithoutBattingTeamInput | CricketMatchUpsertWithWhereUniqueWithoutBattingTeamInput[]
    createMany?: CricketMatchCreateManyBattingTeamInputEnvelope
    set?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    disconnect?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    delete?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    connect?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    update?: CricketMatchUpdateWithWhereUniqueWithoutBattingTeamInput | CricketMatchUpdateWithWhereUniqueWithoutBattingTeamInput[]
    updateMany?: CricketMatchUpdateManyWithWhereWithoutBattingTeamInput | CricketMatchUpdateManyWithWhereWithoutBattingTeamInput[]
    deleteMany?: CricketMatchScalarWhereInput | CricketMatchScalarWhereInput[]
  }

  export type CricketMatchUpdateManyWithoutBowlingTeamNestedInput = {
    create?: XOR<CricketMatchCreateWithoutBowlingTeamInput, CricketMatchUncheckedCreateWithoutBowlingTeamInput> | CricketMatchCreateWithoutBowlingTeamInput[] | CricketMatchUncheckedCreateWithoutBowlingTeamInput[]
    connectOrCreate?: CricketMatchCreateOrConnectWithoutBowlingTeamInput | CricketMatchCreateOrConnectWithoutBowlingTeamInput[]
    upsert?: CricketMatchUpsertWithWhereUniqueWithoutBowlingTeamInput | CricketMatchUpsertWithWhereUniqueWithoutBowlingTeamInput[]
    createMany?: CricketMatchCreateManyBowlingTeamInputEnvelope
    set?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    disconnect?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    delete?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    connect?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    update?: CricketMatchUpdateWithWhereUniqueWithoutBowlingTeamInput | CricketMatchUpdateWithWhereUniqueWithoutBowlingTeamInput[]
    updateMany?: CricketMatchUpdateManyWithWhereWithoutBowlingTeamInput | CricketMatchUpdateManyWithWhereWithoutBowlingTeamInput[]
    deleteMany?: CricketMatchScalarWhereInput | CricketMatchScalarWhereInput[]
  }

  export type CricketMatchPlayerBattingScoreUncheckedUpdateManyWithoutMatch_battersNestedInput = {
    create?: XOR<CricketMatchPlayerBattingScoreCreateWithoutMatch_battersInput, CricketMatchPlayerBattingScoreUncheckedCreateWithoutMatch_battersInput> | CricketMatchPlayerBattingScoreCreateWithoutMatch_battersInput[] | CricketMatchPlayerBattingScoreUncheckedCreateWithoutMatch_battersInput[]
    connectOrCreate?: CricketMatchPlayerBattingScoreCreateOrConnectWithoutMatch_battersInput | CricketMatchPlayerBattingScoreCreateOrConnectWithoutMatch_battersInput[]
    upsert?: CricketMatchPlayerBattingScoreUpsertWithWhereUniqueWithoutMatch_battersInput | CricketMatchPlayerBattingScoreUpsertWithWhereUniqueWithoutMatch_battersInput[]
    set?: CricketMatchPlayerBattingScoreWhereUniqueInput | CricketMatchPlayerBattingScoreWhereUniqueInput[]
    disconnect?: CricketMatchPlayerBattingScoreWhereUniqueInput | CricketMatchPlayerBattingScoreWhereUniqueInput[]
    delete?: CricketMatchPlayerBattingScoreWhereUniqueInput | CricketMatchPlayerBattingScoreWhereUniqueInput[]
    connect?: CricketMatchPlayerBattingScoreWhereUniqueInput | CricketMatchPlayerBattingScoreWhereUniqueInput[]
    update?: CricketMatchPlayerBattingScoreUpdateWithWhereUniqueWithoutMatch_battersInput | CricketMatchPlayerBattingScoreUpdateWithWhereUniqueWithoutMatch_battersInput[]
    updateMany?: CricketMatchPlayerBattingScoreUpdateManyWithWhereWithoutMatch_battersInput | CricketMatchPlayerBattingScoreUpdateManyWithWhereWithoutMatch_battersInput[]
    deleteMany?: CricketMatchPlayerBattingScoreScalarWhereInput | CricketMatchPlayerBattingScoreScalarWhereInput[]
  }

  export type CricketMatchPlayerBowlingScoreUncheckedUpdateManyWithoutMatch_bowlersNestedInput = {
    create?: XOR<CricketMatchPlayerBowlingScoreCreateWithoutMatch_bowlersInput, CricketMatchPlayerBowlingScoreUncheckedCreateWithoutMatch_bowlersInput> | CricketMatchPlayerBowlingScoreCreateWithoutMatch_bowlersInput[] | CricketMatchPlayerBowlingScoreUncheckedCreateWithoutMatch_bowlersInput[]
    connectOrCreate?: CricketMatchPlayerBowlingScoreCreateOrConnectWithoutMatch_bowlersInput | CricketMatchPlayerBowlingScoreCreateOrConnectWithoutMatch_bowlersInput[]
    upsert?: CricketMatchPlayerBowlingScoreUpsertWithWhereUniqueWithoutMatch_bowlersInput | CricketMatchPlayerBowlingScoreUpsertWithWhereUniqueWithoutMatch_bowlersInput[]
    set?: CricketMatchPlayerBowlingScoreWhereUniqueInput | CricketMatchPlayerBowlingScoreWhereUniqueInput[]
    disconnect?: CricketMatchPlayerBowlingScoreWhereUniqueInput | CricketMatchPlayerBowlingScoreWhereUniqueInput[]
    delete?: CricketMatchPlayerBowlingScoreWhereUniqueInput | CricketMatchPlayerBowlingScoreWhereUniqueInput[]
    connect?: CricketMatchPlayerBowlingScoreWhereUniqueInput | CricketMatchPlayerBowlingScoreWhereUniqueInput[]
    update?: CricketMatchPlayerBowlingScoreUpdateWithWhereUniqueWithoutMatch_bowlersInput | CricketMatchPlayerBowlingScoreUpdateWithWhereUniqueWithoutMatch_bowlersInput[]
    updateMany?: CricketMatchPlayerBowlingScoreUpdateManyWithWhereWithoutMatch_bowlersInput | CricketMatchPlayerBowlingScoreUpdateManyWithWhereWithoutMatch_bowlersInput[]
    deleteMany?: CricketMatchPlayerBowlingScoreScalarWhereInput | CricketMatchPlayerBowlingScoreScalarWhereInput[]
  }

  export type CricketMatchUncheckedUpdateManyWithoutTeamAScoreNestedInput = {
    create?: XOR<CricketMatchCreateWithoutTeamAScoreInput, CricketMatchUncheckedCreateWithoutTeamAScoreInput> | CricketMatchCreateWithoutTeamAScoreInput[] | CricketMatchUncheckedCreateWithoutTeamAScoreInput[]
    connectOrCreate?: CricketMatchCreateOrConnectWithoutTeamAScoreInput | CricketMatchCreateOrConnectWithoutTeamAScoreInput[]
    upsert?: CricketMatchUpsertWithWhereUniqueWithoutTeamAScoreInput | CricketMatchUpsertWithWhereUniqueWithoutTeamAScoreInput[]
    createMany?: CricketMatchCreateManyTeamAScoreInputEnvelope
    set?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    disconnect?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    delete?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    connect?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    update?: CricketMatchUpdateWithWhereUniqueWithoutTeamAScoreInput | CricketMatchUpdateWithWhereUniqueWithoutTeamAScoreInput[]
    updateMany?: CricketMatchUpdateManyWithWhereWithoutTeamAScoreInput | CricketMatchUpdateManyWithWhereWithoutTeamAScoreInput[]
    deleteMany?: CricketMatchScalarWhereInput | CricketMatchScalarWhereInput[]
  }

  export type CricketMatchUncheckedUpdateManyWithoutTeamBScoreNestedInput = {
    create?: XOR<CricketMatchCreateWithoutTeamBScoreInput, CricketMatchUncheckedCreateWithoutTeamBScoreInput> | CricketMatchCreateWithoutTeamBScoreInput[] | CricketMatchUncheckedCreateWithoutTeamBScoreInput[]
    connectOrCreate?: CricketMatchCreateOrConnectWithoutTeamBScoreInput | CricketMatchCreateOrConnectWithoutTeamBScoreInput[]
    upsert?: CricketMatchUpsertWithWhereUniqueWithoutTeamBScoreInput | CricketMatchUpsertWithWhereUniqueWithoutTeamBScoreInput[]
    createMany?: CricketMatchCreateManyTeamBScoreInputEnvelope
    set?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    disconnect?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    delete?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    connect?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    update?: CricketMatchUpdateWithWhereUniqueWithoutTeamBScoreInput | CricketMatchUpdateWithWhereUniqueWithoutTeamBScoreInput[]
    updateMany?: CricketMatchUpdateManyWithWhereWithoutTeamBScoreInput | CricketMatchUpdateManyWithWhereWithoutTeamBScoreInput[]
    deleteMany?: CricketMatchScalarWhereInput | CricketMatchScalarWhereInput[]
  }

  export type CricketMatchUncheckedUpdateManyWithoutBattingTeamNestedInput = {
    create?: XOR<CricketMatchCreateWithoutBattingTeamInput, CricketMatchUncheckedCreateWithoutBattingTeamInput> | CricketMatchCreateWithoutBattingTeamInput[] | CricketMatchUncheckedCreateWithoutBattingTeamInput[]
    connectOrCreate?: CricketMatchCreateOrConnectWithoutBattingTeamInput | CricketMatchCreateOrConnectWithoutBattingTeamInput[]
    upsert?: CricketMatchUpsertWithWhereUniqueWithoutBattingTeamInput | CricketMatchUpsertWithWhereUniqueWithoutBattingTeamInput[]
    createMany?: CricketMatchCreateManyBattingTeamInputEnvelope
    set?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    disconnect?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    delete?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    connect?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    update?: CricketMatchUpdateWithWhereUniqueWithoutBattingTeamInput | CricketMatchUpdateWithWhereUniqueWithoutBattingTeamInput[]
    updateMany?: CricketMatchUpdateManyWithWhereWithoutBattingTeamInput | CricketMatchUpdateManyWithWhereWithoutBattingTeamInput[]
    deleteMany?: CricketMatchScalarWhereInput | CricketMatchScalarWhereInput[]
  }

  export type CricketMatchUncheckedUpdateManyWithoutBowlingTeamNestedInput = {
    create?: XOR<CricketMatchCreateWithoutBowlingTeamInput, CricketMatchUncheckedCreateWithoutBowlingTeamInput> | CricketMatchCreateWithoutBowlingTeamInput[] | CricketMatchUncheckedCreateWithoutBowlingTeamInput[]
    connectOrCreate?: CricketMatchCreateOrConnectWithoutBowlingTeamInput | CricketMatchCreateOrConnectWithoutBowlingTeamInput[]
    upsert?: CricketMatchUpsertWithWhereUniqueWithoutBowlingTeamInput | CricketMatchUpsertWithWhereUniqueWithoutBowlingTeamInput[]
    createMany?: CricketMatchCreateManyBowlingTeamInputEnvelope
    set?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    disconnect?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    delete?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    connect?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    update?: CricketMatchUpdateWithWhereUniqueWithoutBowlingTeamInput | CricketMatchUpdateWithWhereUniqueWithoutBowlingTeamInput[]
    updateMany?: CricketMatchUpdateManyWithWhereWithoutBowlingTeamInput | CricketMatchUpdateManyWithWhereWithoutBowlingTeamInput[]
    deleteMany?: CricketMatchScalarWhereInput | CricketMatchScalarWhereInput[]
  }

  export type CricketMatchCreateNestedOneWithoutOver_matchInput = {
    create?: XOR<CricketMatchCreateWithoutOver_matchInput, CricketMatchUncheckedCreateWithoutOver_matchInput>
    connectOrCreate?: CricketMatchCreateOrConnectWithoutOver_matchInput
    connect?: CricketMatchWhereUniqueInput
  }

  export type CricketMatchPlayerBattingScoreCreateNestedOneWithoutOver_strikerInput = {
    create?: XOR<CricketMatchPlayerBattingScoreCreateWithoutOver_strikerInput, CricketMatchPlayerBattingScoreUncheckedCreateWithoutOver_strikerInput>
    connectOrCreate?: CricketMatchPlayerBattingScoreCreateOrConnectWithoutOver_strikerInput
    connect?: CricketMatchPlayerBattingScoreWhereUniqueInput
  }

  export type CricketMatchPlayerBattingScoreCreateNestedOneWithoutOver_non_strikerInput = {
    create?: XOR<CricketMatchPlayerBattingScoreCreateWithoutOver_non_strikerInput, CricketMatchPlayerBattingScoreUncheckedCreateWithoutOver_non_strikerInput>
    connectOrCreate?: CricketMatchPlayerBattingScoreCreateOrConnectWithoutOver_non_strikerInput
    connect?: CricketMatchPlayerBattingScoreWhereUniqueInput
  }

  export type CricketMatchPlayerBowlingScoreCreateNestedOneWithoutOver_bowlerInput = {
    create?: XOR<CricketMatchPlayerBowlingScoreCreateWithoutOver_bowlerInput, CricketMatchPlayerBowlingScoreUncheckedCreateWithoutOver_bowlerInput>
    connectOrCreate?: CricketMatchPlayerBowlingScoreCreateOrConnectWithoutOver_bowlerInput
    connect?: CricketMatchPlayerBowlingScoreWhereUniqueInput
  }

  export type CricketOverBallCreateNestedManyWithoutOverInput = {
    create?: XOR<CricketOverBallCreateWithoutOverInput, CricketOverBallUncheckedCreateWithoutOverInput> | CricketOverBallCreateWithoutOverInput[] | CricketOverBallUncheckedCreateWithoutOverInput[]
    connectOrCreate?: CricketOverBallCreateOrConnectWithoutOverInput | CricketOverBallCreateOrConnectWithoutOverInput[]
    createMany?: CricketOverBallCreateManyOverInputEnvelope
    connect?: CricketOverBallWhereUniqueInput | CricketOverBallWhereUniqueInput[]
  }

  export type CricketMatchCreateNestedManyWithoutCurrentOverInput = {
    create?: XOR<CricketMatchCreateWithoutCurrentOverInput, CricketMatchUncheckedCreateWithoutCurrentOverInput> | CricketMatchCreateWithoutCurrentOverInput[] | CricketMatchUncheckedCreateWithoutCurrentOverInput[]
    connectOrCreate?: CricketMatchCreateOrConnectWithoutCurrentOverInput | CricketMatchCreateOrConnectWithoutCurrentOverInput[]
    createMany?: CricketMatchCreateManyCurrentOverInputEnvelope
    connect?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
  }

  export type CricketOverBallUncheckedCreateNestedManyWithoutOverInput = {
    create?: XOR<CricketOverBallCreateWithoutOverInput, CricketOverBallUncheckedCreateWithoutOverInput> | CricketOverBallCreateWithoutOverInput[] | CricketOverBallUncheckedCreateWithoutOverInput[]
    connectOrCreate?: CricketOverBallCreateOrConnectWithoutOverInput | CricketOverBallCreateOrConnectWithoutOverInput[]
    createMany?: CricketOverBallCreateManyOverInputEnvelope
    connect?: CricketOverBallWhereUniqueInput | CricketOverBallWhereUniqueInput[]
  }

  export type CricketMatchUncheckedCreateNestedManyWithoutCurrentOverInput = {
    create?: XOR<CricketMatchCreateWithoutCurrentOverInput, CricketMatchUncheckedCreateWithoutCurrentOverInput> | CricketMatchCreateWithoutCurrentOverInput[] | CricketMatchUncheckedCreateWithoutCurrentOverInput[]
    connectOrCreate?: CricketMatchCreateOrConnectWithoutCurrentOverInput | CricketMatchCreateOrConnectWithoutCurrentOverInput[]
    createMany?: CricketMatchCreateManyCurrentOverInputEnvelope
    connect?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
  }

  export type CricketMatchUpdateOneRequiredWithoutOver_matchNestedInput = {
    create?: XOR<CricketMatchCreateWithoutOver_matchInput, CricketMatchUncheckedCreateWithoutOver_matchInput>
    connectOrCreate?: CricketMatchCreateOrConnectWithoutOver_matchInput
    upsert?: CricketMatchUpsertWithoutOver_matchInput
    connect?: CricketMatchWhereUniqueInput
    update?: XOR<XOR<CricketMatchUpdateToOneWithWhereWithoutOver_matchInput, CricketMatchUpdateWithoutOver_matchInput>, CricketMatchUncheckedUpdateWithoutOver_matchInput>
  }

  export type CricketMatchPlayerBattingScoreUpdateOneRequiredWithoutOver_strikerNestedInput = {
    create?: XOR<CricketMatchPlayerBattingScoreCreateWithoutOver_strikerInput, CricketMatchPlayerBattingScoreUncheckedCreateWithoutOver_strikerInput>
    connectOrCreate?: CricketMatchPlayerBattingScoreCreateOrConnectWithoutOver_strikerInput
    upsert?: CricketMatchPlayerBattingScoreUpsertWithoutOver_strikerInput
    connect?: CricketMatchPlayerBattingScoreWhereUniqueInput
    update?: XOR<XOR<CricketMatchPlayerBattingScoreUpdateToOneWithWhereWithoutOver_strikerInput, CricketMatchPlayerBattingScoreUpdateWithoutOver_strikerInput>, CricketMatchPlayerBattingScoreUncheckedUpdateWithoutOver_strikerInput>
  }

  export type CricketMatchPlayerBattingScoreUpdateOneRequiredWithoutOver_non_strikerNestedInput = {
    create?: XOR<CricketMatchPlayerBattingScoreCreateWithoutOver_non_strikerInput, CricketMatchPlayerBattingScoreUncheckedCreateWithoutOver_non_strikerInput>
    connectOrCreate?: CricketMatchPlayerBattingScoreCreateOrConnectWithoutOver_non_strikerInput
    upsert?: CricketMatchPlayerBattingScoreUpsertWithoutOver_non_strikerInput
    connect?: CricketMatchPlayerBattingScoreWhereUniqueInput
    update?: XOR<XOR<CricketMatchPlayerBattingScoreUpdateToOneWithWhereWithoutOver_non_strikerInput, CricketMatchPlayerBattingScoreUpdateWithoutOver_non_strikerInput>, CricketMatchPlayerBattingScoreUncheckedUpdateWithoutOver_non_strikerInput>
  }

  export type CricketMatchPlayerBowlingScoreUpdateOneRequiredWithoutOver_bowlerNestedInput = {
    create?: XOR<CricketMatchPlayerBowlingScoreCreateWithoutOver_bowlerInput, CricketMatchPlayerBowlingScoreUncheckedCreateWithoutOver_bowlerInput>
    connectOrCreate?: CricketMatchPlayerBowlingScoreCreateOrConnectWithoutOver_bowlerInput
    upsert?: CricketMatchPlayerBowlingScoreUpsertWithoutOver_bowlerInput
    connect?: CricketMatchPlayerBowlingScoreWhereUniqueInput
    update?: XOR<XOR<CricketMatchPlayerBowlingScoreUpdateToOneWithWhereWithoutOver_bowlerInput, CricketMatchPlayerBowlingScoreUpdateWithoutOver_bowlerInput>, CricketMatchPlayerBowlingScoreUncheckedUpdateWithoutOver_bowlerInput>
  }

  export type CricketOverBallUpdateManyWithoutOverNestedInput = {
    create?: XOR<CricketOverBallCreateWithoutOverInput, CricketOverBallUncheckedCreateWithoutOverInput> | CricketOverBallCreateWithoutOverInput[] | CricketOverBallUncheckedCreateWithoutOverInput[]
    connectOrCreate?: CricketOverBallCreateOrConnectWithoutOverInput | CricketOverBallCreateOrConnectWithoutOverInput[]
    upsert?: CricketOverBallUpsertWithWhereUniqueWithoutOverInput | CricketOverBallUpsertWithWhereUniqueWithoutOverInput[]
    createMany?: CricketOverBallCreateManyOverInputEnvelope
    set?: CricketOverBallWhereUniqueInput | CricketOverBallWhereUniqueInput[]
    disconnect?: CricketOverBallWhereUniqueInput | CricketOverBallWhereUniqueInput[]
    delete?: CricketOverBallWhereUniqueInput | CricketOverBallWhereUniqueInput[]
    connect?: CricketOverBallWhereUniqueInput | CricketOverBallWhereUniqueInput[]
    update?: CricketOverBallUpdateWithWhereUniqueWithoutOverInput | CricketOverBallUpdateWithWhereUniqueWithoutOverInput[]
    updateMany?: CricketOverBallUpdateManyWithWhereWithoutOverInput | CricketOverBallUpdateManyWithWhereWithoutOverInput[]
    deleteMany?: CricketOverBallScalarWhereInput | CricketOverBallScalarWhereInput[]
  }

  export type CricketMatchUpdateManyWithoutCurrentOverNestedInput = {
    create?: XOR<CricketMatchCreateWithoutCurrentOverInput, CricketMatchUncheckedCreateWithoutCurrentOverInput> | CricketMatchCreateWithoutCurrentOverInput[] | CricketMatchUncheckedCreateWithoutCurrentOverInput[]
    connectOrCreate?: CricketMatchCreateOrConnectWithoutCurrentOverInput | CricketMatchCreateOrConnectWithoutCurrentOverInput[]
    upsert?: CricketMatchUpsertWithWhereUniqueWithoutCurrentOverInput | CricketMatchUpsertWithWhereUniqueWithoutCurrentOverInput[]
    createMany?: CricketMatchCreateManyCurrentOverInputEnvelope
    set?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    disconnect?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    delete?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    connect?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    update?: CricketMatchUpdateWithWhereUniqueWithoutCurrentOverInput | CricketMatchUpdateWithWhereUniqueWithoutCurrentOverInput[]
    updateMany?: CricketMatchUpdateManyWithWhereWithoutCurrentOverInput | CricketMatchUpdateManyWithWhereWithoutCurrentOverInput[]
    deleteMany?: CricketMatchScalarWhereInput | CricketMatchScalarWhereInput[]
  }

  export type CricketOverBallUncheckedUpdateManyWithoutOverNestedInput = {
    create?: XOR<CricketOverBallCreateWithoutOverInput, CricketOverBallUncheckedCreateWithoutOverInput> | CricketOverBallCreateWithoutOverInput[] | CricketOverBallUncheckedCreateWithoutOverInput[]
    connectOrCreate?: CricketOverBallCreateOrConnectWithoutOverInput | CricketOverBallCreateOrConnectWithoutOverInput[]
    upsert?: CricketOverBallUpsertWithWhereUniqueWithoutOverInput | CricketOverBallUpsertWithWhereUniqueWithoutOverInput[]
    createMany?: CricketOverBallCreateManyOverInputEnvelope
    set?: CricketOverBallWhereUniqueInput | CricketOverBallWhereUniqueInput[]
    disconnect?: CricketOverBallWhereUniqueInput | CricketOverBallWhereUniqueInput[]
    delete?: CricketOverBallWhereUniqueInput | CricketOverBallWhereUniqueInput[]
    connect?: CricketOverBallWhereUniqueInput | CricketOverBallWhereUniqueInput[]
    update?: CricketOverBallUpdateWithWhereUniqueWithoutOverInput | CricketOverBallUpdateWithWhereUniqueWithoutOverInput[]
    updateMany?: CricketOverBallUpdateManyWithWhereWithoutOverInput | CricketOverBallUpdateManyWithWhereWithoutOverInput[]
    deleteMany?: CricketOverBallScalarWhereInput | CricketOverBallScalarWhereInput[]
  }

  export type CricketMatchUncheckedUpdateManyWithoutCurrentOverNestedInput = {
    create?: XOR<CricketMatchCreateWithoutCurrentOverInput, CricketMatchUncheckedCreateWithoutCurrentOverInput> | CricketMatchCreateWithoutCurrentOverInput[] | CricketMatchUncheckedCreateWithoutCurrentOverInput[]
    connectOrCreate?: CricketMatchCreateOrConnectWithoutCurrentOverInput | CricketMatchCreateOrConnectWithoutCurrentOverInput[]
    upsert?: CricketMatchUpsertWithWhereUniqueWithoutCurrentOverInput | CricketMatchUpsertWithWhereUniqueWithoutCurrentOverInput[]
    createMany?: CricketMatchCreateManyCurrentOverInputEnvelope
    set?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    disconnect?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    delete?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    connect?: CricketMatchWhereUniqueInput | CricketMatchWhereUniqueInput[]
    update?: CricketMatchUpdateWithWhereUniqueWithoutCurrentOverInput | CricketMatchUpdateWithWhereUniqueWithoutCurrentOverInput[]
    updateMany?: CricketMatchUpdateManyWithWhereWithoutCurrentOverInput | CricketMatchUpdateManyWithWhereWithoutCurrentOverInput[]
    deleteMany?: CricketMatchScalarWhereInput | CricketMatchScalarWhereInput[]
  }

  export type CricketOverCreateNestedOneWithoutBallsInput = {
    create?: XOR<CricketOverCreateWithoutBallsInput, CricketOverUncheckedCreateWithoutBallsInput>
    connectOrCreate?: CricketOverCreateOrConnectWithoutBallsInput
    connect?: CricketOverWhereUniqueInput
  }

  export type EnumBallTypeFieldUpdateOperationsInput = {
    set?: $Enums.BallType
  }

  export type CricketOverUpdateOneRequiredWithoutBallsNestedInput = {
    create?: XOR<CricketOverCreateWithoutBallsInput, CricketOverUncheckedCreateWithoutBallsInput>
    connectOrCreate?: CricketOverCreateOrConnectWithoutBallsInput
    upsert?: CricketOverUpsertWithoutBallsInput
    connect?: CricketOverWhereUniqueInput
    update?: XOR<XOR<CricketOverUpdateToOneWithWhereWithoutBallsInput, CricketOverUpdateWithoutBallsInput>, CricketOverUncheckedUpdateWithoutBallsInput>
  }

  export type CricketPlayerCreateNestedOneWithoutBatting_score_playerInput = {
    create?: XOR<CricketPlayerCreateWithoutBatting_score_playerInput, CricketPlayerUncheckedCreateWithoutBatting_score_playerInput>
    connectOrCreate?: CricketPlayerCreateOrConnectWithoutBatting_score_playerInput
    connect?: CricketPlayerWhereUniqueInput
  }

  export type CricketMatchCreateNestedOneWithoutTeam_batting_scoreInput = {
    create?: XOR<CricketMatchCreateWithoutTeam_batting_scoreInput, CricketMatchUncheckedCreateWithoutTeam_batting_scoreInput>
    connectOrCreate?: CricketMatchCreateOrConnectWithoutTeam_batting_scoreInput
    connect?: CricketMatchWhereUniqueInput
  }

  export type CricketTeamCreateNestedOneWithoutCricket_match_player_batting_scoreInput = {
    create?: XOR<CricketTeamCreateWithoutCricket_match_player_batting_scoreInput, CricketTeamUncheckedCreateWithoutCricket_match_player_batting_scoreInput>
    connectOrCreate?: CricketTeamCreateOrConnectWithoutCricket_match_player_batting_scoreInput
    connect?: CricketTeamWhereUniqueInput
  }

  export type CricketTeamMatchDataCreateNestedManyWithoutBattersInput = {
    create?: XOR<CricketTeamMatchDataCreateWithoutBattersInput, CricketTeamMatchDataUncheckedCreateWithoutBattersInput> | CricketTeamMatchDataCreateWithoutBattersInput[] | CricketTeamMatchDataUncheckedCreateWithoutBattersInput[]
    connectOrCreate?: CricketTeamMatchDataCreateOrConnectWithoutBattersInput | CricketTeamMatchDataCreateOrConnectWithoutBattersInput[]
    connect?: CricketTeamMatchDataWhereUniqueInput | CricketTeamMatchDataWhereUniqueInput[]
  }

  export type CricketOverCreateNestedManyWithoutStrikerScoreInput = {
    create?: XOR<CricketOverCreateWithoutStrikerScoreInput, CricketOverUncheckedCreateWithoutStrikerScoreInput> | CricketOverCreateWithoutStrikerScoreInput[] | CricketOverUncheckedCreateWithoutStrikerScoreInput[]
    connectOrCreate?: CricketOverCreateOrConnectWithoutStrikerScoreInput | CricketOverCreateOrConnectWithoutStrikerScoreInput[]
    createMany?: CricketOverCreateManyStrikerScoreInputEnvelope
    connect?: CricketOverWhereUniqueInput | CricketOverWhereUniqueInput[]
  }

  export type CricketOverCreateNestedManyWithoutNonStrikerScoreInput = {
    create?: XOR<CricketOverCreateWithoutNonStrikerScoreInput, CricketOverUncheckedCreateWithoutNonStrikerScoreInput> | CricketOverCreateWithoutNonStrikerScoreInput[] | CricketOverUncheckedCreateWithoutNonStrikerScoreInput[]
    connectOrCreate?: CricketOverCreateOrConnectWithoutNonStrikerScoreInput | CricketOverCreateOrConnectWithoutNonStrikerScoreInput[]
    createMany?: CricketOverCreateManyNonStrikerScoreInputEnvelope
    connect?: CricketOverWhereUniqueInput | CricketOverWhereUniqueInput[]
  }

  export type CricketTeamMatchDataUncheckedCreateNestedManyWithoutBattersInput = {
    create?: XOR<CricketTeamMatchDataCreateWithoutBattersInput, CricketTeamMatchDataUncheckedCreateWithoutBattersInput> | CricketTeamMatchDataCreateWithoutBattersInput[] | CricketTeamMatchDataUncheckedCreateWithoutBattersInput[]
    connectOrCreate?: CricketTeamMatchDataCreateOrConnectWithoutBattersInput | CricketTeamMatchDataCreateOrConnectWithoutBattersInput[]
    connect?: CricketTeamMatchDataWhereUniqueInput | CricketTeamMatchDataWhereUniqueInput[]
  }

  export type CricketOverUncheckedCreateNestedManyWithoutStrikerScoreInput = {
    create?: XOR<CricketOverCreateWithoutStrikerScoreInput, CricketOverUncheckedCreateWithoutStrikerScoreInput> | CricketOverCreateWithoutStrikerScoreInput[] | CricketOverUncheckedCreateWithoutStrikerScoreInput[]
    connectOrCreate?: CricketOverCreateOrConnectWithoutStrikerScoreInput | CricketOverCreateOrConnectWithoutStrikerScoreInput[]
    createMany?: CricketOverCreateManyStrikerScoreInputEnvelope
    connect?: CricketOverWhereUniqueInput | CricketOverWhereUniqueInput[]
  }

  export type CricketOverUncheckedCreateNestedManyWithoutNonStrikerScoreInput = {
    create?: XOR<CricketOverCreateWithoutNonStrikerScoreInput, CricketOverUncheckedCreateWithoutNonStrikerScoreInput> | CricketOverCreateWithoutNonStrikerScoreInput[] | CricketOverUncheckedCreateWithoutNonStrikerScoreInput[]
    connectOrCreate?: CricketOverCreateOrConnectWithoutNonStrikerScoreInput | CricketOverCreateOrConnectWithoutNonStrikerScoreInput[]
    createMany?: CricketOverCreateManyNonStrikerScoreInputEnvelope
    connect?: CricketOverWhereUniqueInput | CricketOverWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CricketPlayerUpdateOneWithoutBatting_score_playerNestedInput = {
    create?: XOR<CricketPlayerCreateWithoutBatting_score_playerInput, CricketPlayerUncheckedCreateWithoutBatting_score_playerInput>
    connectOrCreate?: CricketPlayerCreateOrConnectWithoutBatting_score_playerInput
    upsert?: CricketPlayerUpsertWithoutBatting_score_playerInput
    disconnect?: CricketPlayerWhereInput | boolean
    delete?: CricketPlayerWhereInput | boolean
    connect?: CricketPlayerWhereUniqueInput
    update?: XOR<XOR<CricketPlayerUpdateToOneWithWhereWithoutBatting_score_playerInput, CricketPlayerUpdateWithoutBatting_score_playerInput>, CricketPlayerUncheckedUpdateWithoutBatting_score_playerInput>
  }

  export type CricketMatchUpdateOneRequiredWithoutTeam_batting_scoreNestedInput = {
    create?: XOR<CricketMatchCreateWithoutTeam_batting_scoreInput, CricketMatchUncheckedCreateWithoutTeam_batting_scoreInput>
    connectOrCreate?: CricketMatchCreateOrConnectWithoutTeam_batting_scoreInput
    upsert?: CricketMatchUpsertWithoutTeam_batting_scoreInput
    connect?: CricketMatchWhereUniqueInput
    update?: XOR<XOR<CricketMatchUpdateToOneWithWhereWithoutTeam_batting_scoreInput, CricketMatchUpdateWithoutTeam_batting_scoreInput>, CricketMatchUncheckedUpdateWithoutTeam_batting_scoreInput>
  }

  export type CricketTeamUpdateOneRequiredWithoutCricket_match_player_batting_scoreNestedInput = {
    create?: XOR<CricketTeamCreateWithoutCricket_match_player_batting_scoreInput, CricketTeamUncheckedCreateWithoutCricket_match_player_batting_scoreInput>
    connectOrCreate?: CricketTeamCreateOrConnectWithoutCricket_match_player_batting_scoreInput
    upsert?: CricketTeamUpsertWithoutCricket_match_player_batting_scoreInput
    connect?: CricketTeamWhereUniqueInput
    update?: XOR<XOR<CricketTeamUpdateToOneWithWhereWithoutCricket_match_player_batting_scoreInput, CricketTeamUpdateWithoutCricket_match_player_batting_scoreInput>, CricketTeamUncheckedUpdateWithoutCricket_match_player_batting_scoreInput>
  }

  export type CricketTeamMatchDataUpdateManyWithoutBattersNestedInput = {
    create?: XOR<CricketTeamMatchDataCreateWithoutBattersInput, CricketTeamMatchDataUncheckedCreateWithoutBattersInput> | CricketTeamMatchDataCreateWithoutBattersInput[] | CricketTeamMatchDataUncheckedCreateWithoutBattersInput[]
    connectOrCreate?: CricketTeamMatchDataCreateOrConnectWithoutBattersInput | CricketTeamMatchDataCreateOrConnectWithoutBattersInput[]
    upsert?: CricketTeamMatchDataUpsertWithWhereUniqueWithoutBattersInput | CricketTeamMatchDataUpsertWithWhereUniqueWithoutBattersInput[]
    set?: CricketTeamMatchDataWhereUniqueInput | CricketTeamMatchDataWhereUniqueInput[]
    disconnect?: CricketTeamMatchDataWhereUniqueInput | CricketTeamMatchDataWhereUniqueInput[]
    delete?: CricketTeamMatchDataWhereUniqueInput | CricketTeamMatchDataWhereUniqueInput[]
    connect?: CricketTeamMatchDataWhereUniqueInput | CricketTeamMatchDataWhereUniqueInput[]
    update?: CricketTeamMatchDataUpdateWithWhereUniqueWithoutBattersInput | CricketTeamMatchDataUpdateWithWhereUniqueWithoutBattersInput[]
    updateMany?: CricketTeamMatchDataUpdateManyWithWhereWithoutBattersInput | CricketTeamMatchDataUpdateManyWithWhereWithoutBattersInput[]
    deleteMany?: CricketTeamMatchDataScalarWhereInput | CricketTeamMatchDataScalarWhereInput[]
  }

  export type CricketOverUpdateManyWithoutStrikerScoreNestedInput = {
    create?: XOR<CricketOverCreateWithoutStrikerScoreInput, CricketOverUncheckedCreateWithoutStrikerScoreInput> | CricketOverCreateWithoutStrikerScoreInput[] | CricketOverUncheckedCreateWithoutStrikerScoreInput[]
    connectOrCreate?: CricketOverCreateOrConnectWithoutStrikerScoreInput | CricketOverCreateOrConnectWithoutStrikerScoreInput[]
    upsert?: CricketOverUpsertWithWhereUniqueWithoutStrikerScoreInput | CricketOverUpsertWithWhereUniqueWithoutStrikerScoreInput[]
    createMany?: CricketOverCreateManyStrikerScoreInputEnvelope
    set?: CricketOverWhereUniqueInput | CricketOverWhereUniqueInput[]
    disconnect?: CricketOverWhereUniqueInput | CricketOverWhereUniqueInput[]
    delete?: CricketOverWhereUniqueInput | CricketOverWhereUniqueInput[]
    connect?: CricketOverWhereUniqueInput | CricketOverWhereUniqueInput[]
    update?: CricketOverUpdateWithWhereUniqueWithoutStrikerScoreInput | CricketOverUpdateWithWhereUniqueWithoutStrikerScoreInput[]
    updateMany?: CricketOverUpdateManyWithWhereWithoutStrikerScoreInput | CricketOverUpdateManyWithWhereWithoutStrikerScoreInput[]
    deleteMany?: CricketOverScalarWhereInput | CricketOverScalarWhereInput[]
  }

  export type CricketOverUpdateManyWithoutNonStrikerScoreNestedInput = {
    create?: XOR<CricketOverCreateWithoutNonStrikerScoreInput, CricketOverUncheckedCreateWithoutNonStrikerScoreInput> | CricketOverCreateWithoutNonStrikerScoreInput[] | CricketOverUncheckedCreateWithoutNonStrikerScoreInput[]
    connectOrCreate?: CricketOverCreateOrConnectWithoutNonStrikerScoreInput | CricketOverCreateOrConnectWithoutNonStrikerScoreInput[]
    upsert?: CricketOverUpsertWithWhereUniqueWithoutNonStrikerScoreInput | CricketOverUpsertWithWhereUniqueWithoutNonStrikerScoreInput[]
    createMany?: CricketOverCreateManyNonStrikerScoreInputEnvelope
    set?: CricketOverWhereUniqueInput | CricketOverWhereUniqueInput[]
    disconnect?: CricketOverWhereUniqueInput | CricketOverWhereUniqueInput[]
    delete?: CricketOverWhereUniqueInput | CricketOverWhereUniqueInput[]
    connect?: CricketOverWhereUniqueInput | CricketOverWhereUniqueInput[]
    update?: CricketOverUpdateWithWhereUniqueWithoutNonStrikerScoreInput | CricketOverUpdateWithWhereUniqueWithoutNonStrikerScoreInput[]
    updateMany?: CricketOverUpdateManyWithWhereWithoutNonStrikerScoreInput | CricketOverUpdateManyWithWhereWithoutNonStrikerScoreInput[]
    deleteMany?: CricketOverScalarWhereInput | CricketOverScalarWhereInput[]
  }

  export type CricketTeamMatchDataUncheckedUpdateManyWithoutBattersNestedInput = {
    create?: XOR<CricketTeamMatchDataCreateWithoutBattersInput, CricketTeamMatchDataUncheckedCreateWithoutBattersInput> | CricketTeamMatchDataCreateWithoutBattersInput[] | CricketTeamMatchDataUncheckedCreateWithoutBattersInput[]
    connectOrCreate?: CricketTeamMatchDataCreateOrConnectWithoutBattersInput | CricketTeamMatchDataCreateOrConnectWithoutBattersInput[]
    upsert?: CricketTeamMatchDataUpsertWithWhereUniqueWithoutBattersInput | CricketTeamMatchDataUpsertWithWhereUniqueWithoutBattersInput[]
    set?: CricketTeamMatchDataWhereUniqueInput | CricketTeamMatchDataWhereUniqueInput[]
    disconnect?: CricketTeamMatchDataWhereUniqueInput | CricketTeamMatchDataWhereUniqueInput[]
    delete?: CricketTeamMatchDataWhereUniqueInput | CricketTeamMatchDataWhereUniqueInput[]
    connect?: CricketTeamMatchDataWhereUniqueInput | CricketTeamMatchDataWhereUniqueInput[]
    update?: CricketTeamMatchDataUpdateWithWhereUniqueWithoutBattersInput | CricketTeamMatchDataUpdateWithWhereUniqueWithoutBattersInput[]
    updateMany?: CricketTeamMatchDataUpdateManyWithWhereWithoutBattersInput | CricketTeamMatchDataUpdateManyWithWhereWithoutBattersInput[]
    deleteMany?: CricketTeamMatchDataScalarWhereInput | CricketTeamMatchDataScalarWhereInput[]
  }

  export type CricketOverUncheckedUpdateManyWithoutStrikerScoreNestedInput = {
    create?: XOR<CricketOverCreateWithoutStrikerScoreInput, CricketOverUncheckedCreateWithoutStrikerScoreInput> | CricketOverCreateWithoutStrikerScoreInput[] | CricketOverUncheckedCreateWithoutStrikerScoreInput[]
    connectOrCreate?: CricketOverCreateOrConnectWithoutStrikerScoreInput | CricketOverCreateOrConnectWithoutStrikerScoreInput[]
    upsert?: CricketOverUpsertWithWhereUniqueWithoutStrikerScoreInput | CricketOverUpsertWithWhereUniqueWithoutStrikerScoreInput[]
    createMany?: CricketOverCreateManyStrikerScoreInputEnvelope
    set?: CricketOverWhereUniqueInput | CricketOverWhereUniqueInput[]
    disconnect?: CricketOverWhereUniqueInput | CricketOverWhereUniqueInput[]
    delete?: CricketOverWhereUniqueInput | CricketOverWhereUniqueInput[]
    connect?: CricketOverWhereUniqueInput | CricketOverWhereUniqueInput[]
    update?: CricketOverUpdateWithWhereUniqueWithoutStrikerScoreInput | CricketOverUpdateWithWhereUniqueWithoutStrikerScoreInput[]
    updateMany?: CricketOverUpdateManyWithWhereWithoutStrikerScoreInput | CricketOverUpdateManyWithWhereWithoutStrikerScoreInput[]
    deleteMany?: CricketOverScalarWhereInput | CricketOverScalarWhereInput[]
  }

  export type CricketOverUncheckedUpdateManyWithoutNonStrikerScoreNestedInput = {
    create?: XOR<CricketOverCreateWithoutNonStrikerScoreInput, CricketOverUncheckedCreateWithoutNonStrikerScoreInput> | CricketOverCreateWithoutNonStrikerScoreInput[] | CricketOverUncheckedCreateWithoutNonStrikerScoreInput[]
    connectOrCreate?: CricketOverCreateOrConnectWithoutNonStrikerScoreInput | CricketOverCreateOrConnectWithoutNonStrikerScoreInput[]
    upsert?: CricketOverUpsertWithWhereUniqueWithoutNonStrikerScoreInput | CricketOverUpsertWithWhereUniqueWithoutNonStrikerScoreInput[]
    createMany?: CricketOverCreateManyNonStrikerScoreInputEnvelope
    set?: CricketOverWhereUniqueInput | CricketOverWhereUniqueInput[]
    disconnect?: CricketOverWhereUniqueInput | CricketOverWhereUniqueInput[]
    delete?: CricketOverWhereUniqueInput | CricketOverWhereUniqueInput[]
    connect?: CricketOverWhereUniqueInput | CricketOverWhereUniqueInput[]
    update?: CricketOverUpdateWithWhereUniqueWithoutNonStrikerScoreInput | CricketOverUpdateWithWhereUniqueWithoutNonStrikerScoreInput[]
    updateMany?: CricketOverUpdateManyWithWhereWithoutNonStrikerScoreInput | CricketOverUpdateManyWithWhereWithoutNonStrikerScoreInput[]
    deleteMany?: CricketOverScalarWhereInput | CricketOverScalarWhereInput[]
  }

  export type CricketPlayerCreateNestedOneWithoutBowling_score_playerInput = {
    create?: XOR<CricketPlayerCreateWithoutBowling_score_playerInput, CricketPlayerUncheckedCreateWithoutBowling_score_playerInput>
    connectOrCreate?: CricketPlayerCreateOrConnectWithoutBowling_score_playerInput
    connect?: CricketPlayerWhereUniqueInput
  }

  export type CricketMatchCreateNestedOneWithoutTeam_bowling_scoreInput = {
    create?: XOR<CricketMatchCreateWithoutTeam_bowling_scoreInput, CricketMatchUncheckedCreateWithoutTeam_bowling_scoreInput>
    connectOrCreate?: CricketMatchCreateOrConnectWithoutTeam_bowling_scoreInput
    connect?: CricketMatchWhereUniqueInput
  }

  export type CricketTeamCreateNestedOneWithoutCricket_match_player_bowling_scoreInput = {
    create?: XOR<CricketTeamCreateWithoutCricket_match_player_bowling_scoreInput, CricketTeamUncheckedCreateWithoutCricket_match_player_bowling_scoreInput>
    connectOrCreate?: CricketTeamCreateOrConnectWithoutCricket_match_player_bowling_scoreInput
    connect?: CricketTeamWhereUniqueInput
  }

  export type CricketTeamMatchDataCreateNestedManyWithoutBowlersInput = {
    create?: XOR<CricketTeamMatchDataCreateWithoutBowlersInput, CricketTeamMatchDataUncheckedCreateWithoutBowlersInput> | CricketTeamMatchDataCreateWithoutBowlersInput[] | CricketTeamMatchDataUncheckedCreateWithoutBowlersInput[]
    connectOrCreate?: CricketTeamMatchDataCreateOrConnectWithoutBowlersInput | CricketTeamMatchDataCreateOrConnectWithoutBowlersInput[]
    connect?: CricketTeamMatchDataWhereUniqueInput | CricketTeamMatchDataWhereUniqueInput[]
  }

  export type CricketOverCreateNestedManyWithoutBowlerScoreInput = {
    create?: XOR<CricketOverCreateWithoutBowlerScoreInput, CricketOverUncheckedCreateWithoutBowlerScoreInput> | CricketOverCreateWithoutBowlerScoreInput[] | CricketOverUncheckedCreateWithoutBowlerScoreInput[]
    connectOrCreate?: CricketOverCreateOrConnectWithoutBowlerScoreInput | CricketOverCreateOrConnectWithoutBowlerScoreInput[]
    createMany?: CricketOverCreateManyBowlerScoreInputEnvelope
    connect?: CricketOverWhereUniqueInput | CricketOverWhereUniqueInput[]
  }

  export type CricketTeamMatchDataUncheckedCreateNestedManyWithoutBowlersInput = {
    create?: XOR<CricketTeamMatchDataCreateWithoutBowlersInput, CricketTeamMatchDataUncheckedCreateWithoutBowlersInput> | CricketTeamMatchDataCreateWithoutBowlersInput[] | CricketTeamMatchDataUncheckedCreateWithoutBowlersInput[]
    connectOrCreate?: CricketTeamMatchDataCreateOrConnectWithoutBowlersInput | CricketTeamMatchDataCreateOrConnectWithoutBowlersInput[]
    connect?: CricketTeamMatchDataWhereUniqueInput | CricketTeamMatchDataWhereUniqueInput[]
  }

  export type CricketOverUncheckedCreateNestedManyWithoutBowlerScoreInput = {
    create?: XOR<CricketOverCreateWithoutBowlerScoreInput, CricketOverUncheckedCreateWithoutBowlerScoreInput> | CricketOverCreateWithoutBowlerScoreInput[] | CricketOverUncheckedCreateWithoutBowlerScoreInput[]
    connectOrCreate?: CricketOverCreateOrConnectWithoutBowlerScoreInput | CricketOverCreateOrConnectWithoutBowlerScoreInput[]
    createMany?: CricketOverCreateManyBowlerScoreInputEnvelope
    connect?: CricketOverWhereUniqueInput | CricketOverWhereUniqueInput[]
  }

  export type CricketPlayerUpdateOneWithoutBowling_score_playerNestedInput = {
    create?: XOR<CricketPlayerCreateWithoutBowling_score_playerInput, CricketPlayerUncheckedCreateWithoutBowling_score_playerInput>
    connectOrCreate?: CricketPlayerCreateOrConnectWithoutBowling_score_playerInput
    upsert?: CricketPlayerUpsertWithoutBowling_score_playerInput
    disconnect?: CricketPlayerWhereInput | boolean
    delete?: CricketPlayerWhereInput | boolean
    connect?: CricketPlayerWhereUniqueInput
    update?: XOR<XOR<CricketPlayerUpdateToOneWithWhereWithoutBowling_score_playerInput, CricketPlayerUpdateWithoutBowling_score_playerInput>, CricketPlayerUncheckedUpdateWithoutBowling_score_playerInput>
  }

  export type CricketMatchUpdateOneRequiredWithoutTeam_bowling_scoreNestedInput = {
    create?: XOR<CricketMatchCreateWithoutTeam_bowling_scoreInput, CricketMatchUncheckedCreateWithoutTeam_bowling_scoreInput>
    connectOrCreate?: CricketMatchCreateOrConnectWithoutTeam_bowling_scoreInput
    upsert?: CricketMatchUpsertWithoutTeam_bowling_scoreInput
    connect?: CricketMatchWhereUniqueInput
    update?: XOR<XOR<CricketMatchUpdateToOneWithWhereWithoutTeam_bowling_scoreInput, CricketMatchUpdateWithoutTeam_bowling_scoreInput>, CricketMatchUncheckedUpdateWithoutTeam_bowling_scoreInput>
  }

  export type CricketTeamUpdateOneRequiredWithoutCricket_match_player_bowling_scoreNestedInput = {
    create?: XOR<CricketTeamCreateWithoutCricket_match_player_bowling_scoreInput, CricketTeamUncheckedCreateWithoutCricket_match_player_bowling_scoreInput>
    connectOrCreate?: CricketTeamCreateOrConnectWithoutCricket_match_player_bowling_scoreInput
    upsert?: CricketTeamUpsertWithoutCricket_match_player_bowling_scoreInput
    connect?: CricketTeamWhereUniqueInput
    update?: XOR<XOR<CricketTeamUpdateToOneWithWhereWithoutCricket_match_player_bowling_scoreInput, CricketTeamUpdateWithoutCricket_match_player_bowling_scoreInput>, CricketTeamUncheckedUpdateWithoutCricket_match_player_bowling_scoreInput>
  }

  export type CricketTeamMatchDataUpdateManyWithoutBowlersNestedInput = {
    create?: XOR<CricketTeamMatchDataCreateWithoutBowlersInput, CricketTeamMatchDataUncheckedCreateWithoutBowlersInput> | CricketTeamMatchDataCreateWithoutBowlersInput[] | CricketTeamMatchDataUncheckedCreateWithoutBowlersInput[]
    connectOrCreate?: CricketTeamMatchDataCreateOrConnectWithoutBowlersInput | CricketTeamMatchDataCreateOrConnectWithoutBowlersInput[]
    upsert?: CricketTeamMatchDataUpsertWithWhereUniqueWithoutBowlersInput | CricketTeamMatchDataUpsertWithWhereUniqueWithoutBowlersInput[]
    set?: CricketTeamMatchDataWhereUniqueInput | CricketTeamMatchDataWhereUniqueInput[]
    disconnect?: CricketTeamMatchDataWhereUniqueInput | CricketTeamMatchDataWhereUniqueInput[]
    delete?: CricketTeamMatchDataWhereUniqueInput | CricketTeamMatchDataWhereUniqueInput[]
    connect?: CricketTeamMatchDataWhereUniqueInput | CricketTeamMatchDataWhereUniqueInput[]
    update?: CricketTeamMatchDataUpdateWithWhereUniqueWithoutBowlersInput | CricketTeamMatchDataUpdateWithWhereUniqueWithoutBowlersInput[]
    updateMany?: CricketTeamMatchDataUpdateManyWithWhereWithoutBowlersInput | CricketTeamMatchDataUpdateManyWithWhereWithoutBowlersInput[]
    deleteMany?: CricketTeamMatchDataScalarWhereInput | CricketTeamMatchDataScalarWhereInput[]
  }

  export type CricketOverUpdateManyWithoutBowlerScoreNestedInput = {
    create?: XOR<CricketOverCreateWithoutBowlerScoreInput, CricketOverUncheckedCreateWithoutBowlerScoreInput> | CricketOverCreateWithoutBowlerScoreInput[] | CricketOverUncheckedCreateWithoutBowlerScoreInput[]
    connectOrCreate?: CricketOverCreateOrConnectWithoutBowlerScoreInput | CricketOverCreateOrConnectWithoutBowlerScoreInput[]
    upsert?: CricketOverUpsertWithWhereUniqueWithoutBowlerScoreInput | CricketOverUpsertWithWhereUniqueWithoutBowlerScoreInput[]
    createMany?: CricketOverCreateManyBowlerScoreInputEnvelope
    set?: CricketOverWhereUniqueInput | CricketOverWhereUniqueInput[]
    disconnect?: CricketOverWhereUniqueInput | CricketOverWhereUniqueInput[]
    delete?: CricketOverWhereUniqueInput | CricketOverWhereUniqueInput[]
    connect?: CricketOverWhereUniqueInput | CricketOverWhereUniqueInput[]
    update?: CricketOverUpdateWithWhereUniqueWithoutBowlerScoreInput | CricketOverUpdateWithWhereUniqueWithoutBowlerScoreInput[]
    updateMany?: CricketOverUpdateManyWithWhereWithoutBowlerScoreInput | CricketOverUpdateManyWithWhereWithoutBowlerScoreInput[]
    deleteMany?: CricketOverScalarWhereInput | CricketOverScalarWhereInput[]
  }

  export type CricketTeamMatchDataUncheckedUpdateManyWithoutBowlersNestedInput = {
    create?: XOR<CricketTeamMatchDataCreateWithoutBowlersInput, CricketTeamMatchDataUncheckedCreateWithoutBowlersInput> | CricketTeamMatchDataCreateWithoutBowlersInput[] | CricketTeamMatchDataUncheckedCreateWithoutBowlersInput[]
    connectOrCreate?: CricketTeamMatchDataCreateOrConnectWithoutBowlersInput | CricketTeamMatchDataCreateOrConnectWithoutBowlersInput[]
    upsert?: CricketTeamMatchDataUpsertWithWhereUniqueWithoutBowlersInput | CricketTeamMatchDataUpsertWithWhereUniqueWithoutBowlersInput[]
    set?: CricketTeamMatchDataWhereUniqueInput | CricketTeamMatchDataWhereUniqueInput[]
    disconnect?: CricketTeamMatchDataWhereUniqueInput | CricketTeamMatchDataWhereUniqueInput[]
    delete?: CricketTeamMatchDataWhereUniqueInput | CricketTeamMatchDataWhereUniqueInput[]
    connect?: CricketTeamMatchDataWhereUniqueInput | CricketTeamMatchDataWhereUniqueInput[]
    update?: CricketTeamMatchDataUpdateWithWhereUniqueWithoutBowlersInput | CricketTeamMatchDataUpdateWithWhereUniqueWithoutBowlersInput[]
    updateMany?: CricketTeamMatchDataUpdateManyWithWhereWithoutBowlersInput | CricketTeamMatchDataUpdateManyWithWhereWithoutBowlersInput[]
    deleteMany?: CricketTeamMatchDataScalarWhereInput | CricketTeamMatchDataScalarWhereInput[]
  }

  export type CricketOverUncheckedUpdateManyWithoutBowlerScoreNestedInput = {
    create?: XOR<CricketOverCreateWithoutBowlerScoreInput, CricketOverUncheckedCreateWithoutBowlerScoreInput> | CricketOverCreateWithoutBowlerScoreInput[] | CricketOverUncheckedCreateWithoutBowlerScoreInput[]
    connectOrCreate?: CricketOverCreateOrConnectWithoutBowlerScoreInput | CricketOverCreateOrConnectWithoutBowlerScoreInput[]
    upsert?: CricketOverUpsertWithWhereUniqueWithoutBowlerScoreInput | CricketOverUpsertWithWhereUniqueWithoutBowlerScoreInput[]
    createMany?: CricketOverCreateManyBowlerScoreInputEnvelope
    set?: CricketOverWhereUniqueInput | CricketOverWhereUniqueInput[]
    disconnect?: CricketOverWhereUniqueInput | CricketOverWhereUniqueInput[]
    delete?: CricketOverWhereUniqueInput | CricketOverWhereUniqueInput[]
    connect?: CricketOverWhereUniqueInput | CricketOverWhereUniqueInput[]
    update?: CricketOverUpdateWithWhereUniqueWithoutBowlerScoreInput | CricketOverUpdateWithWhereUniqueWithoutBowlerScoreInput[]
    updateMany?: CricketOverUpdateManyWithWhereWithoutBowlerScoreInput | CricketOverUpdateManyWithWhereWithoutBowlerScoreInput[]
    deleteMany?: CricketOverScalarWhereInput | CricketOverScalarWhereInput[]
  }

  export type UsersCreateNestedOneWithoutVerification_tokenInput = {
    create?: XOR<UsersCreateWithoutVerification_tokenInput, UsersUncheckedCreateWithoutVerification_tokenInput>
    connectOrCreate?: UsersCreateOrConnectWithoutVerification_tokenInput
    connect?: UsersWhereUniqueInput
  }

  export type UsersUpdateOneRequiredWithoutVerification_tokenNestedInput = {
    create?: XOR<UsersCreateWithoutVerification_tokenInput, UsersUncheckedCreateWithoutVerification_tokenInput>
    connectOrCreate?: UsersCreateOrConnectWithoutVerification_tokenInput
    upsert?: UsersUpsertWithoutVerification_tokenInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutVerification_tokenInput, UsersUpdateWithoutVerification_tokenInput>, UsersUncheckedUpdateWithoutVerification_tokenInput>
  }

  export type UsersCreateNestedOneWithoutUser_ticketsInput = {
    create?: XOR<UsersCreateWithoutUser_ticketsInput, UsersUncheckedCreateWithoutUser_ticketsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutUser_ticketsInput
    connect?: UsersWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UsersUpdateOneWithoutUser_ticketsNestedInput = {
    create?: XOR<UsersCreateWithoutUser_ticketsInput, UsersUncheckedCreateWithoutUser_ticketsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutUser_ticketsInput
    upsert?: UsersUpsertWithoutUser_ticketsInput
    disconnect?: UsersWhereInput | boolean
    delete?: UsersWhereInput | boolean
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutUser_ticketsInput, UsersUpdateWithoutUser_ticketsInput>, UsersUncheckedUpdateWithoutUser_ticketsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumBallTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.BallType | EnumBallTypeFieldRefInput<$PrismaModel>
    in?: $Enums.BallType[] | ListEnumBallTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.BallType[] | ListEnumBallTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumBallTypeFilter<$PrismaModel> | $Enums.BallType
  }

  export type NestedEnumBallTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BallType | EnumBallTypeFieldRefInput<$PrismaModel>
    in?: $Enums.BallType[] | ListEnumBallTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.BallType[] | ListEnumBallTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumBallTypeWithAggregatesFilter<$PrismaModel> | $Enums.BallType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBallTypeFilter<$PrismaModel>
    _max?: NestedEnumBallTypeFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type CricketPlayerCreateWithoutUser_cricket_playersInput = {
    sis_id?: string
    isSelected?: boolean
    isCaptain?: boolean
    isWicketKeeper?: boolean
    isAllRounder?: boolean
    isBatsman?: boolean
    isBowler?: boolean
    runs?: number
    noOfMatchesPlayed?: number
    noOfSixes?: number
    noOfFours?: number
    noOfWicketsTaken?: number
    noOfHalfCenturies?: number
    noOfCenturies?: number
    noOfWickets?: number
    user: UsersCreateNestedOneWithoutCricket_playersInput
    matches?: CricketMatchCreateNestedManyWithoutPlayersInput
    team?: CricketTeamCreateNestedOneWithoutPlayer_teamInput
    team_players?: CricketTeamCreateNestedManyWithoutPlayersInput
    batting_score_player?: CricketMatchPlayerBattingScoreCreateNestedManyWithoutPlayerInput
    bowling_score_player?: CricketMatchPlayerBowlingScoreCreateNestedManyWithoutPlayerInput
  }

  export type CricketPlayerUncheckedCreateWithoutUser_cricket_playersInput = {
    sis_id?: string
    userId: string
    teamId?: string | null
    isSelected?: boolean
    isCaptain?: boolean
    isWicketKeeper?: boolean
    isAllRounder?: boolean
    isBatsman?: boolean
    isBowler?: boolean
    runs?: number
    noOfMatchesPlayed?: number
    noOfSixes?: number
    noOfFours?: number
    noOfWicketsTaken?: number
    noOfHalfCenturies?: number
    noOfCenturies?: number
    noOfWickets?: number
    matches?: CricketMatchUncheckedCreateNestedManyWithoutPlayersInput
    team_players?: CricketTeamUncheckedCreateNestedManyWithoutPlayersInput
    batting_score_player?: CricketMatchPlayerBattingScoreUncheckedCreateNestedManyWithoutPlayerInput
    bowling_score_player?: CricketMatchPlayerBowlingScoreUncheckedCreateNestedManyWithoutPlayerInput
  }

  export type CricketPlayerCreateOrConnectWithoutUser_cricket_playersInput = {
    where: CricketPlayerWhereUniqueInput
    create: XOR<CricketPlayerCreateWithoutUser_cricket_playersInput, CricketPlayerUncheckedCreateWithoutUser_cricket_playersInput>
  }

  export type CricketPlayerCreateWithoutUserInput = {
    sis_id?: string
    isSelected?: boolean
    isCaptain?: boolean
    isWicketKeeper?: boolean
    isAllRounder?: boolean
    isBatsman?: boolean
    isBowler?: boolean
    runs?: number
    noOfMatchesPlayed?: number
    noOfSixes?: number
    noOfFours?: number
    noOfWicketsTaken?: number
    noOfHalfCenturies?: number
    noOfCenturies?: number
    noOfWickets?: number
    matches?: CricketMatchCreateNestedManyWithoutPlayersInput
    team?: CricketTeamCreateNestedOneWithoutPlayer_teamInput
    user_cricket_players?: UsersCreateNestedManyWithoutCricketPlayerInput
    team_players?: CricketTeamCreateNestedManyWithoutPlayersInput
    batting_score_player?: CricketMatchPlayerBattingScoreCreateNestedManyWithoutPlayerInput
    bowling_score_player?: CricketMatchPlayerBowlingScoreCreateNestedManyWithoutPlayerInput
  }

  export type CricketPlayerUncheckedCreateWithoutUserInput = {
    sis_id?: string
    teamId?: string | null
    isSelected?: boolean
    isCaptain?: boolean
    isWicketKeeper?: boolean
    isAllRounder?: boolean
    isBatsman?: boolean
    isBowler?: boolean
    runs?: number
    noOfMatchesPlayed?: number
    noOfSixes?: number
    noOfFours?: number
    noOfWicketsTaken?: number
    noOfHalfCenturies?: number
    noOfCenturies?: number
    noOfWickets?: number
    matches?: CricketMatchUncheckedCreateNestedManyWithoutPlayersInput
    user_cricket_players?: UsersUncheckedCreateNestedManyWithoutCricketPlayerInput
    team_players?: CricketTeamUncheckedCreateNestedManyWithoutPlayersInput
    batting_score_player?: CricketMatchPlayerBattingScoreUncheckedCreateNestedManyWithoutPlayerInput
    bowling_score_player?: CricketMatchPlayerBowlingScoreUncheckedCreateNestedManyWithoutPlayerInput
  }

  export type CricketPlayerCreateOrConnectWithoutUserInput = {
    where: CricketPlayerWhereUniqueInput
    create: XOR<CricketPlayerCreateWithoutUserInput, CricketPlayerUncheckedCreateWithoutUserInput>
  }

  export type CricketPlayerCreateManyUserInputEnvelope = {
    data: CricketPlayerCreateManyUserInput | CricketPlayerCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type VerificationTokenCreateWithoutUserInput = {
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
    expiration: Date | string
  }

  export type VerificationTokenUncheckedCreateWithoutUserInput = {
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
    expiration: Date | string
  }

  export type VerificationTokenCreateOrConnectWithoutUserInput = {
    where: VerificationTokenWhereUniqueInput
    create: XOR<VerificationTokenCreateWithoutUserInput, VerificationTokenUncheckedCreateWithoutUserInput>
  }

  export type VerificationTokenCreateManyUserInputEnvelope = {
    data: VerificationTokenCreateManyUserInput | VerificationTokenCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type TicketCreateWithoutUserInput = {
    sis_id?: string
    userEmail: string
    userName: string
    title: string
    description: string
    visited?: boolean
    status?: string
    createdAt?: Date | string
    closedAt?: Date | string | null
  }

  export type TicketUncheckedCreateWithoutUserInput = {
    sis_id?: string
    userEmail: string
    userName: string
    title: string
    description: string
    visited?: boolean
    status?: string
    createdAt?: Date | string
    closedAt?: Date | string | null
  }

  export type TicketCreateOrConnectWithoutUserInput = {
    where: TicketWhereUniqueInput
    create: XOR<TicketCreateWithoutUserInput, TicketUncheckedCreateWithoutUserInput>
  }

  export type TicketCreateManyUserInputEnvelope = {
    data: TicketCreateManyUserInput | TicketCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CricketPlayerUpsertWithoutUser_cricket_playersInput = {
    update: XOR<CricketPlayerUpdateWithoutUser_cricket_playersInput, CricketPlayerUncheckedUpdateWithoutUser_cricket_playersInput>
    create: XOR<CricketPlayerCreateWithoutUser_cricket_playersInput, CricketPlayerUncheckedCreateWithoutUser_cricket_playersInput>
    where?: CricketPlayerWhereInput
  }

  export type CricketPlayerUpdateToOneWithWhereWithoutUser_cricket_playersInput = {
    where?: CricketPlayerWhereInput
    data: XOR<CricketPlayerUpdateWithoutUser_cricket_playersInput, CricketPlayerUncheckedUpdateWithoutUser_cricket_playersInput>
  }

  export type CricketPlayerUpdateWithoutUser_cricket_playersInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    isSelected?: BoolFieldUpdateOperationsInput | boolean
    isCaptain?: BoolFieldUpdateOperationsInput | boolean
    isWicketKeeper?: BoolFieldUpdateOperationsInput | boolean
    isAllRounder?: BoolFieldUpdateOperationsInput | boolean
    isBatsman?: BoolFieldUpdateOperationsInput | boolean
    isBowler?: BoolFieldUpdateOperationsInput | boolean
    runs?: IntFieldUpdateOperationsInput | number
    noOfMatchesPlayed?: IntFieldUpdateOperationsInput | number
    noOfSixes?: IntFieldUpdateOperationsInput | number
    noOfFours?: IntFieldUpdateOperationsInput | number
    noOfWicketsTaken?: IntFieldUpdateOperationsInput | number
    noOfHalfCenturies?: IntFieldUpdateOperationsInput | number
    noOfCenturies?: IntFieldUpdateOperationsInput | number
    noOfWickets?: IntFieldUpdateOperationsInput | number
    user?: UsersUpdateOneRequiredWithoutCricket_playersNestedInput
    matches?: CricketMatchUpdateManyWithoutPlayersNestedInput
    team?: CricketTeamUpdateOneWithoutPlayer_teamNestedInput
    team_players?: CricketTeamUpdateManyWithoutPlayersNestedInput
    batting_score_player?: CricketMatchPlayerBattingScoreUpdateManyWithoutPlayerNestedInput
    bowling_score_player?: CricketMatchPlayerBowlingScoreUpdateManyWithoutPlayerNestedInput
  }

  export type CricketPlayerUncheckedUpdateWithoutUser_cricket_playersInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    isSelected?: BoolFieldUpdateOperationsInput | boolean
    isCaptain?: BoolFieldUpdateOperationsInput | boolean
    isWicketKeeper?: BoolFieldUpdateOperationsInput | boolean
    isAllRounder?: BoolFieldUpdateOperationsInput | boolean
    isBatsman?: BoolFieldUpdateOperationsInput | boolean
    isBowler?: BoolFieldUpdateOperationsInput | boolean
    runs?: IntFieldUpdateOperationsInput | number
    noOfMatchesPlayed?: IntFieldUpdateOperationsInput | number
    noOfSixes?: IntFieldUpdateOperationsInput | number
    noOfFours?: IntFieldUpdateOperationsInput | number
    noOfWicketsTaken?: IntFieldUpdateOperationsInput | number
    noOfHalfCenturies?: IntFieldUpdateOperationsInput | number
    noOfCenturies?: IntFieldUpdateOperationsInput | number
    noOfWickets?: IntFieldUpdateOperationsInput | number
    matches?: CricketMatchUncheckedUpdateManyWithoutPlayersNestedInput
    team_players?: CricketTeamUncheckedUpdateManyWithoutPlayersNestedInput
    batting_score_player?: CricketMatchPlayerBattingScoreUncheckedUpdateManyWithoutPlayerNestedInput
    bowling_score_player?: CricketMatchPlayerBowlingScoreUncheckedUpdateManyWithoutPlayerNestedInput
  }

  export type CricketPlayerUpsertWithWhereUniqueWithoutUserInput = {
    where: CricketPlayerWhereUniqueInput
    update: XOR<CricketPlayerUpdateWithoutUserInput, CricketPlayerUncheckedUpdateWithoutUserInput>
    create: XOR<CricketPlayerCreateWithoutUserInput, CricketPlayerUncheckedCreateWithoutUserInput>
  }

  export type CricketPlayerUpdateWithWhereUniqueWithoutUserInput = {
    where: CricketPlayerWhereUniqueInput
    data: XOR<CricketPlayerUpdateWithoutUserInput, CricketPlayerUncheckedUpdateWithoutUserInput>
  }

  export type CricketPlayerUpdateManyWithWhereWithoutUserInput = {
    where: CricketPlayerScalarWhereInput
    data: XOR<CricketPlayerUpdateManyMutationInput, CricketPlayerUncheckedUpdateManyWithoutUserInput>
  }

  export type CricketPlayerScalarWhereInput = {
    AND?: CricketPlayerScalarWhereInput | CricketPlayerScalarWhereInput[]
    OR?: CricketPlayerScalarWhereInput[]
    NOT?: CricketPlayerScalarWhereInput | CricketPlayerScalarWhereInput[]
    sis_id?: StringFilter<"CricketPlayer"> | string
    userId?: StringFilter<"CricketPlayer"> | string
    teamId?: StringNullableFilter<"CricketPlayer"> | string | null
    isSelected?: BoolFilter<"CricketPlayer"> | boolean
    isCaptain?: BoolFilter<"CricketPlayer"> | boolean
    isWicketKeeper?: BoolFilter<"CricketPlayer"> | boolean
    isAllRounder?: BoolFilter<"CricketPlayer"> | boolean
    isBatsman?: BoolFilter<"CricketPlayer"> | boolean
    isBowler?: BoolFilter<"CricketPlayer"> | boolean
    runs?: IntFilter<"CricketPlayer"> | number
    noOfMatchesPlayed?: IntFilter<"CricketPlayer"> | number
    noOfSixes?: IntFilter<"CricketPlayer"> | number
    noOfFours?: IntFilter<"CricketPlayer"> | number
    noOfWicketsTaken?: IntFilter<"CricketPlayer"> | number
    noOfHalfCenturies?: IntFilter<"CricketPlayer"> | number
    noOfCenturies?: IntFilter<"CricketPlayer"> | number
    noOfWickets?: IntFilter<"CricketPlayer"> | number
  }

  export type VerificationTokenUpsertWithWhereUniqueWithoutUserInput = {
    where: VerificationTokenWhereUniqueInput
    update: XOR<VerificationTokenUpdateWithoutUserInput, VerificationTokenUncheckedUpdateWithoutUserInput>
    create: XOR<VerificationTokenCreateWithoutUserInput, VerificationTokenUncheckedCreateWithoutUserInput>
  }

  export type VerificationTokenUpdateWithWhereUniqueWithoutUserInput = {
    where: VerificationTokenWhereUniqueInput
    data: XOR<VerificationTokenUpdateWithoutUserInput, VerificationTokenUncheckedUpdateWithoutUserInput>
  }

  export type VerificationTokenUpdateManyWithWhereWithoutUserInput = {
    where: VerificationTokenScalarWhereInput
    data: XOR<VerificationTokenUpdateManyMutationInput, VerificationTokenUncheckedUpdateManyWithoutUserInput>
  }

  export type VerificationTokenScalarWhereInput = {
    AND?: VerificationTokenScalarWhereInput | VerificationTokenScalarWhereInput[]
    OR?: VerificationTokenScalarWhereInput[]
    NOT?: VerificationTokenScalarWhereInput | VerificationTokenScalarWhereInput[]
    sis_id?: StringFilter<"VerificationToken"> | string
    token?: StringFilter<"VerificationToken"> | string
    createdAt?: DateTimeFilter<"VerificationToken"> | Date | string
    updatedAt?: DateTimeFilter<"VerificationToken"> | Date | string
    expiration?: DateTimeFilter<"VerificationToken"> | Date | string
  }

  export type TicketUpsertWithWhereUniqueWithoutUserInput = {
    where: TicketWhereUniqueInput
    update: XOR<TicketUpdateWithoutUserInput, TicketUncheckedUpdateWithoutUserInput>
    create: XOR<TicketCreateWithoutUserInput, TicketUncheckedCreateWithoutUserInput>
  }

  export type TicketUpdateWithWhereUniqueWithoutUserInput = {
    where: TicketWhereUniqueInput
    data: XOR<TicketUpdateWithoutUserInput, TicketUncheckedUpdateWithoutUserInput>
  }

  export type TicketUpdateManyWithWhereWithoutUserInput = {
    where: TicketScalarWhereInput
    data: XOR<TicketUpdateManyMutationInput, TicketUncheckedUpdateManyWithoutUserInput>
  }

  export type TicketScalarWhereInput = {
    AND?: TicketScalarWhereInput | TicketScalarWhereInput[]
    OR?: TicketScalarWhereInput[]
    NOT?: TicketScalarWhereInput | TicketScalarWhereInput[]
    sis_id?: StringFilter<"Ticket"> | string
    userEmail?: StringFilter<"Ticket"> | string
    userName?: StringFilter<"Ticket"> | string
    userId?: StringNullableFilter<"Ticket"> | string | null
    title?: StringFilter<"Ticket"> | string
    description?: StringFilter<"Ticket"> | string
    visited?: BoolFilter<"Ticket"> | boolean
    status?: StringFilter<"Ticket"> | string
    createdAt?: DateTimeFilter<"Ticket"> | Date | string
    closedAt?: DateTimeNullableFilter<"Ticket"> | Date | string | null
  }

  export type CricketPlayerCreateWithoutTeam_playersInput = {
    sis_id?: string
    isSelected?: boolean
    isCaptain?: boolean
    isWicketKeeper?: boolean
    isAllRounder?: boolean
    isBatsman?: boolean
    isBowler?: boolean
    runs?: number
    noOfMatchesPlayed?: number
    noOfSixes?: number
    noOfFours?: number
    noOfWicketsTaken?: number
    noOfHalfCenturies?: number
    noOfCenturies?: number
    noOfWickets?: number
    user: UsersCreateNestedOneWithoutCricket_playersInput
    matches?: CricketMatchCreateNestedManyWithoutPlayersInput
    team?: CricketTeamCreateNestedOneWithoutPlayer_teamInput
    user_cricket_players?: UsersCreateNestedManyWithoutCricketPlayerInput
    batting_score_player?: CricketMatchPlayerBattingScoreCreateNestedManyWithoutPlayerInput
    bowling_score_player?: CricketMatchPlayerBowlingScoreCreateNestedManyWithoutPlayerInput
  }

  export type CricketPlayerUncheckedCreateWithoutTeam_playersInput = {
    sis_id?: string
    userId: string
    teamId?: string | null
    isSelected?: boolean
    isCaptain?: boolean
    isWicketKeeper?: boolean
    isAllRounder?: boolean
    isBatsman?: boolean
    isBowler?: boolean
    runs?: number
    noOfMatchesPlayed?: number
    noOfSixes?: number
    noOfFours?: number
    noOfWicketsTaken?: number
    noOfHalfCenturies?: number
    noOfCenturies?: number
    noOfWickets?: number
    matches?: CricketMatchUncheckedCreateNestedManyWithoutPlayersInput
    user_cricket_players?: UsersUncheckedCreateNestedManyWithoutCricketPlayerInput
    batting_score_player?: CricketMatchPlayerBattingScoreUncheckedCreateNestedManyWithoutPlayerInput
    bowling_score_player?: CricketMatchPlayerBowlingScoreUncheckedCreateNestedManyWithoutPlayerInput
  }

  export type CricketPlayerCreateOrConnectWithoutTeam_playersInput = {
    where: CricketPlayerWhereUniqueInput
    create: XOR<CricketPlayerCreateWithoutTeam_playersInput, CricketPlayerUncheckedCreateWithoutTeam_playersInput>
  }

  export type CricketMatchCreateWithoutWonByTeamInput = {
    sis_id?: string
    played?: boolean
    tossDecision?: string | null
    date: Date | string
    venue?: string | null
    year: string
    dependency?: boolean
    dependentOn?: string | null
    team1Wickets?: number | null
    team2Wickets?: number | null
    team1Runs?: number | null
    team2Runs?: number | null
    team1Balls?: number | null
    team2Balls?: number | null
    overs?: number | null
    powerPlayOvers?: number | null
    overPerBowler?: number | null
    tossWonByTeam?: CricketTeamCreateNestedOneWithoutToss_winning_teamInput
    currentOver?: CricketOverCreateNestedOneWithoutMatch_current_overInput
    teamA?: CricketTeamCreateNestedOneWithoutCricketMatchTeamAInput
    teamB?: CricketTeamCreateNestedOneWithoutCricketMatchTeamBInput
    teamAScore?: CricketTeamMatchDataCreateNestedOneWithoutCricketMatchTeamAInput
    teamBScore?: CricketTeamMatchDataCreateNestedOneWithoutCricketMatchTeamBInput
    battingTeam?: CricketTeamMatchDataCreateNestedOneWithoutMatchBttingTeamInput
    bowlingTeam?: CricketTeamMatchDataCreateNestedOneWithoutMatchBowlingTeamInput
    players?: CricketPlayerCreateNestedManyWithoutMatchesInput
    over_match?: CricketOverCreateNestedManyWithoutMatchInput
    team_batting_score?: CricketMatchPlayerBattingScoreCreateNestedManyWithoutMatchInput
    team_bowling_score?: CricketMatchPlayerBowlingScoreCreateNestedManyWithoutMatchInput
  }

  export type CricketMatchUncheckedCreateWithoutWonByTeamInput = {
    sis_id?: string
    played?: boolean
    tossWonBy?: string | null
    tossDecision?: string | null
    date: Date | string
    venue?: string | null
    year: string
    dependency?: boolean
    dependentOn?: string | null
    team1Wickets?: number | null
    team2Wickets?: number | null
    team1Runs?: number | null
    team2Runs?: number | null
    team1Balls?: number | null
    team2Balls?: number | null
    overs?: number | null
    powerPlayOvers?: number | null
    overPerBowler?: number | null
    currentOverId?: string | null
    teamAId?: string | null
    teamBId?: string | null
    teamAScoreId?: string | null
    teamBScoreId?: string | null
    battingTeamScoreId?: string | null
    bowlingTeamScoreId?: string | null
    players?: CricketPlayerUncheckedCreateNestedManyWithoutMatchesInput
    over_match?: CricketOverUncheckedCreateNestedManyWithoutMatchInput
    team_batting_score?: CricketMatchPlayerBattingScoreUncheckedCreateNestedManyWithoutMatchInput
    team_bowling_score?: CricketMatchPlayerBowlingScoreUncheckedCreateNestedManyWithoutMatchInput
  }

  export type CricketMatchCreateOrConnectWithoutWonByTeamInput = {
    where: CricketMatchWhereUniqueInput
    create: XOR<CricketMatchCreateWithoutWonByTeamInput, CricketMatchUncheckedCreateWithoutWonByTeamInput>
  }

  export type CricketMatchCreateManyWonByTeamInputEnvelope = {
    data: CricketMatchCreateManyWonByTeamInput | CricketMatchCreateManyWonByTeamInput[]
    skipDuplicates?: boolean
  }

  export type CricketMatchCreateWithoutTossWonByTeamInput = {
    sis_id?: string
    played?: boolean
    tossDecision?: string | null
    date: Date | string
    venue?: string | null
    year: string
    dependency?: boolean
    dependentOn?: string | null
    team1Wickets?: number | null
    team2Wickets?: number | null
    team1Runs?: number | null
    team2Runs?: number | null
    team1Balls?: number | null
    team2Balls?: number | null
    overs?: number | null
    powerPlayOvers?: number | null
    overPerBowler?: number | null
    currentOver?: CricketOverCreateNestedOneWithoutMatch_current_overInput
    wonByTeam?: CricketTeamCreateNestedOneWithoutWinning_teamInput
    teamA?: CricketTeamCreateNestedOneWithoutCricketMatchTeamAInput
    teamB?: CricketTeamCreateNestedOneWithoutCricketMatchTeamBInput
    teamAScore?: CricketTeamMatchDataCreateNestedOneWithoutCricketMatchTeamAInput
    teamBScore?: CricketTeamMatchDataCreateNestedOneWithoutCricketMatchTeamBInput
    battingTeam?: CricketTeamMatchDataCreateNestedOneWithoutMatchBttingTeamInput
    bowlingTeam?: CricketTeamMatchDataCreateNestedOneWithoutMatchBowlingTeamInput
    players?: CricketPlayerCreateNestedManyWithoutMatchesInput
    over_match?: CricketOverCreateNestedManyWithoutMatchInput
    team_batting_score?: CricketMatchPlayerBattingScoreCreateNestedManyWithoutMatchInput
    team_bowling_score?: CricketMatchPlayerBowlingScoreCreateNestedManyWithoutMatchInput
  }

  export type CricketMatchUncheckedCreateWithoutTossWonByTeamInput = {
    sis_id?: string
    played?: boolean
    tossDecision?: string | null
    date: Date | string
    venue?: string | null
    year: string
    dependency?: boolean
    dependentOn?: string | null
    team1Wickets?: number | null
    team2Wickets?: number | null
    team1Runs?: number | null
    team2Runs?: number | null
    team1Balls?: number | null
    team2Balls?: number | null
    overs?: number | null
    powerPlayOvers?: number | null
    overPerBowler?: number | null
    currentOverId?: string | null
    wonBy?: string | null
    teamAId?: string | null
    teamBId?: string | null
    teamAScoreId?: string | null
    teamBScoreId?: string | null
    battingTeamScoreId?: string | null
    bowlingTeamScoreId?: string | null
    players?: CricketPlayerUncheckedCreateNestedManyWithoutMatchesInput
    over_match?: CricketOverUncheckedCreateNestedManyWithoutMatchInput
    team_batting_score?: CricketMatchPlayerBattingScoreUncheckedCreateNestedManyWithoutMatchInput
    team_bowling_score?: CricketMatchPlayerBowlingScoreUncheckedCreateNestedManyWithoutMatchInput
  }

  export type CricketMatchCreateOrConnectWithoutTossWonByTeamInput = {
    where: CricketMatchWhereUniqueInput
    create: XOR<CricketMatchCreateWithoutTossWonByTeamInput, CricketMatchUncheckedCreateWithoutTossWonByTeamInput>
  }

  export type CricketMatchCreateManyTossWonByTeamInputEnvelope = {
    data: CricketMatchCreateManyTossWonByTeamInput | CricketMatchCreateManyTossWonByTeamInput[]
    skipDuplicates?: boolean
  }

  export type CricketPlayerCreateWithoutTeamInput = {
    sis_id?: string
    isSelected?: boolean
    isCaptain?: boolean
    isWicketKeeper?: boolean
    isAllRounder?: boolean
    isBatsman?: boolean
    isBowler?: boolean
    runs?: number
    noOfMatchesPlayed?: number
    noOfSixes?: number
    noOfFours?: number
    noOfWicketsTaken?: number
    noOfHalfCenturies?: number
    noOfCenturies?: number
    noOfWickets?: number
    user: UsersCreateNestedOneWithoutCricket_playersInput
    matches?: CricketMatchCreateNestedManyWithoutPlayersInput
    user_cricket_players?: UsersCreateNestedManyWithoutCricketPlayerInput
    team_players?: CricketTeamCreateNestedManyWithoutPlayersInput
    batting_score_player?: CricketMatchPlayerBattingScoreCreateNestedManyWithoutPlayerInput
    bowling_score_player?: CricketMatchPlayerBowlingScoreCreateNestedManyWithoutPlayerInput
  }

  export type CricketPlayerUncheckedCreateWithoutTeamInput = {
    sis_id?: string
    userId: string
    isSelected?: boolean
    isCaptain?: boolean
    isWicketKeeper?: boolean
    isAllRounder?: boolean
    isBatsman?: boolean
    isBowler?: boolean
    runs?: number
    noOfMatchesPlayed?: number
    noOfSixes?: number
    noOfFours?: number
    noOfWicketsTaken?: number
    noOfHalfCenturies?: number
    noOfCenturies?: number
    noOfWickets?: number
    matches?: CricketMatchUncheckedCreateNestedManyWithoutPlayersInput
    user_cricket_players?: UsersUncheckedCreateNestedManyWithoutCricketPlayerInput
    team_players?: CricketTeamUncheckedCreateNestedManyWithoutPlayersInput
    batting_score_player?: CricketMatchPlayerBattingScoreUncheckedCreateNestedManyWithoutPlayerInput
    bowling_score_player?: CricketMatchPlayerBowlingScoreUncheckedCreateNestedManyWithoutPlayerInput
  }

  export type CricketPlayerCreateOrConnectWithoutTeamInput = {
    where: CricketPlayerWhereUniqueInput
    create: XOR<CricketPlayerCreateWithoutTeamInput, CricketPlayerUncheckedCreateWithoutTeamInput>
  }

  export type CricketPlayerCreateManyTeamInputEnvelope = {
    data: CricketPlayerCreateManyTeamInput | CricketPlayerCreateManyTeamInput[]
    skipDuplicates?: boolean
  }

  export type CricketTeamMatchDataCreateWithoutTeamInput = {
    sis_id?: string
    matchId?: string | null
    name?: string | null
    runs?: number
    wideRuns?: number
    nbRuns?: number
    byeRuns?: number
    lbRuns?: number
    wickets?: number
    balls?: number
    batters?: CricketMatchPlayerBattingScoreCreateNestedManyWithoutMatch_battersInput
    bowlers?: CricketMatchPlayerBowlingScoreCreateNestedManyWithoutMatch_bowlersInput
    cricketMatchTeamA?: CricketMatchCreateNestedManyWithoutTeamAScoreInput
    cricketMatchTeamB?: CricketMatchCreateNestedManyWithoutTeamBScoreInput
    matchBttingTeam?: CricketMatchCreateNestedManyWithoutBattingTeamInput
    matchBowlingTeam?: CricketMatchCreateNestedManyWithoutBowlingTeamInput
  }

  export type CricketTeamMatchDataUncheckedCreateWithoutTeamInput = {
    sis_id?: string
    matchId?: string | null
    name?: string | null
    runs?: number
    wideRuns?: number
    nbRuns?: number
    byeRuns?: number
    lbRuns?: number
    wickets?: number
    balls?: number
    batters?: CricketMatchPlayerBattingScoreUncheckedCreateNestedManyWithoutMatch_battersInput
    bowlers?: CricketMatchPlayerBowlingScoreUncheckedCreateNestedManyWithoutMatch_bowlersInput
    cricketMatchTeamA?: CricketMatchUncheckedCreateNestedManyWithoutTeamAScoreInput
    cricketMatchTeamB?: CricketMatchUncheckedCreateNestedManyWithoutTeamBScoreInput
    matchBttingTeam?: CricketMatchUncheckedCreateNestedManyWithoutBattingTeamInput
    matchBowlingTeam?: CricketMatchUncheckedCreateNestedManyWithoutBowlingTeamInput
  }

  export type CricketTeamMatchDataCreateOrConnectWithoutTeamInput = {
    where: CricketTeamMatchDataWhereUniqueInput
    create: XOR<CricketTeamMatchDataCreateWithoutTeamInput, CricketTeamMatchDataUncheckedCreateWithoutTeamInput>
  }

  export type CricketTeamMatchDataCreateManyTeamInputEnvelope = {
    data: CricketTeamMatchDataCreateManyTeamInput | CricketTeamMatchDataCreateManyTeamInput[]
    skipDuplicates?: boolean
  }

  export type CricketMatchPlayerBattingScoreCreateWithoutTeamInput = {
    sis_id?: string
    runs?: number
    balls?: number
    fours?: number
    sixes?: number
    strikeRate?: number
    out?: boolean
    played?: boolean
    wicketType?: string | null
    player?: CricketPlayerCreateNestedOneWithoutBatting_score_playerInput
    match: CricketMatchCreateNestedOneWithoutTeam_batting_scoreInput
    match_batters?: CricketTeamMatchDataCreateNestedManyWithoutBattersInput
    over_striker?: CricketOverCreateNestedManyWithoutStrikerScoreInput
    over_non_striker?: CricketOverCreateNestedManyWithoutNonStrikerScoreInput
  }

  export type CricketMatchPlayerBattingScoreUncheckedCreateWithoutTeamInput = {
    sis_id?: string
    runs?: number
    balls?: number
    fours?: number
    sixes?: number
    strikeRate?: number
    out?: boolean
    played?: boolean
    wicketType?: string | null
    playerId?: string | null
    matchId: string
    match_batters?: CricketTeamMatchDataUncheckedCreateNestedManyWithoutBattersInput
    over_striker?: CricketOverUncheckedCreateNestedManyWithoutStrikerScoreInput
    over_non_striker?: CricketOverUncheckedCreateNestedManyWithoutNonStrikerScoreInput
  }

  export type CricketMatchPlayerBattingScoreCreateOrConnectWithoutTeamInput = {
    where: CricketMatchPlayerBattingScoreWhereUniqueInput
    create: XOR<CricketMatchPlayerBattingScoreCreateWithoutTeamInput, CricketMatchPlayerBattingScoreUncheckedCreateWithoutTeamInput>
  }

  export type CricketMatchPlayerBattingScoreCreateManyTeamInputEnvelope = {
    data: CricketMatchPlayerBattingScoreCreateManyTeamInput | CricketMatchPlayerBattingScoreCreateManyTeamInput[]
    skipDuplicates?: boolean
  }

  export type CricketMatchPlayerBowlingScoreCreateWithoutTeamInput = {
    sis_id?: string
    runs?: number
    balls?: number
    fours?: number
    sixes?: number
    played?: boolean
    wickets?: number
    player?: CricketPlayerCreateNestedOneWithoutBowling_score_playerInput
    match: CricketMatchCreateNestedOneWithoutTeam_bowling_scoreInput
    match_bowlers?: CricketTeamMatchDataCreateNestedManyWithoutBowlersInput
    over_bowler?: CricketOverCreateNestedManyWithoutBowlerScoreInput
  }

  export type CricketMatchPlayerBowlingScoreUncheckedCreateWithoutTeamInput = {
    sis_id?: string
    runs?: number
    balls?: number
    fours?: number
    sixes?: number
    played?: boolean
    wickets?: number
    playerId?: string | null
    matchId: string
    match_bowlers?: CricketTeamMatchDataUncheckedCreateNestedManyWithoutBowlersInput
    over_bowler?: CricketOverUncheckedCreateNestedManyWithoutBowlerScoreInput
  }

  export type CricketMatchPlayerBowlingScoreCreateOrConnectWithoutTeamInput = {
    where: CricketMatchPlayerBowlingScoreWhereUniqueInput
    create: XOR<CricketMatchPlayerBowlingScoreCreateWithoutTeamInput, CricketMatchPlayerBowlingScoreUncheckedCreateWithoutTeamInput>
  }

  export type CricketMatchPlayerBowlingScoreCreateManyTeamInputEnvelope = {
    data: CricketMatchPlayerBowlingScoreCreateManyTeamInput | CricketMatchPlayerBowlingScoreCreateManyTeamInput[]
    skipDuplicates?: boolean
  }

  export type CricketMatchCreateWithoutTeamAInput = {
    sis_id?: string
    played?: boolean
    tossDecision?: string | null
    date: Date | string
    venue?: string | null
    year: string
    dependency?: boolean
    dependentOn?: string | null
    team1Wickets?: number | null
    team2Wickets?: number | null
    team1Runs?: number | null
    team2Runs?: number | null
    team1Balls?: number | null
    team2Balls?: number | null
    overs?: number | null
    powerPlayOvers?: number | null
    overPerBowler?: number | null
    tossWonByTeam?: CricketTeamCreateNestedOneWithoutToss_winning_teamInput
    currentOver?: CricketOverCreateNestedOneWithoutMatch_current_overInput
    wonByTeam?: CricketTeamCreateNestedOneWithoutWinning_teamInput
    teamB?: CricketTeamCreateNestedOneWithoutCricketMatchTeamBInput
    teamAScore?: CricketTeamMatchDataCreateNestedOneWithoutCricketMatchTeamAInput
    teamBScore?: CricketTeamMatchDataCreateNestedOneWithoutCricketMatchTeamBInput
    battingTeam?: CricketTeamMatchDataCreateNestedOneWithoutMatchBttingTeamInput
    bowlingTeam?: CricketTeamMatchDataCreateNestedOneWithoutMatchBowlingTeamInput
    players?: CricketPlayerCreateNestedManyWithoutMatchesInput
    over_match?: CricketOverCreateNestedManyWithoutMatchInput
    team_batting_score?: CricketMatchPlayerBattingScoreCreateNestedManyWithoutMatchInput
    team_bowling_score?: CricketMatchPlayerBowlingScoreCreateNestedManyWithoutMatchInput
  }

  export type CricketMatchUncheckedCreateWithoutTeamAInput = {
    sis_id?: string
    played?: boolean
    tossWonBy?: string | null
    tossDecision?: string | null
    date: Date | string
    venue?: string | null
    year: string
    dependency?: boolean
    dependentOn?: string | null
    team1Wickets?: number | null
    team2Wickets?: number | null
    team1Runs?: number | null
    team2Runs?: number | null
    team1Balls?: number | null
    team2Balls?: number | null
    overs?: number | null
    powerPlayOvers?: number | null
    overPerBowler?: number | null
    currentOverId?: string | null
    wonBy?: string | null
    teamBId?: string | null
    teamAScoreId?: string | null
    teamBScoreId?: string | null
    battingTeamScoreId?: string | null
    bowlingTeamScoreId?: string | null
    players?: CricketPlayerUncheckedCreateNestedManyWithoutMatchesInput
    over_match?: CricketOverUncheckedCreateNestedManyWithoutMatchInput
    team_batting_score?: CricketMatchPlayerBattingScoreUncheckedCreateNestedManyWithoutMatchInput
    team_bowling_score?: CricketMatchPlayerBowlingScoreUncheckedCreateNestedManyWithoutMatchInput
  }

  export type CricketMatchCreateOrConnectWithoutTeamAInput = {
    where: CricketMatchWhereUniqueInput
    create: XOR<CricketMatchCreateWithoutTeamAInput, CricketMatchUncheckedCreateWithoutTeamAInput>
  }

  export type CricketMatchCreateManyTeamAInputEnvelope = {
    data: CricketMatchCreateManyTeamAInput | CricketMatchCreateManyTeamAInput[]
    skipDuplicates?: boolean
  }

  export type CricketMatchCreateWithoutTeamBInput = {
    sis_id?: string
    played?: boolean
    tossDecision?: string | null
    date: Date | string
    venue?: string | null
    year: string
    dependency?: boolean
    dependentOn?: string | null
    team1Wickets?: number | null
    team2Wickets?: number | null
    team1Runs?: number | null
    team2Runs?: number | null
    team1Balls?: number | null
    team2Balls?: number | null
    overs?: number | null
    powerPlayOvers?: number | null
    overPerBowler?: number | null
    tossWonByTeam?: CricketTeamCreateNestedOneWithoutToss_winning_teamInput
    currentOver?: CricketOverCreateNestedOneWithoutMatch_current_overInput
    wonByTeam?: CricketTeamCreateNestedOneWithoutWinning_teamInput
    teamA?: CricketTeamCreateNestedOneWithoutCricketMatchTeamAInput
    teamAScore?: CricketTeamMatchDataCreateNestedOneWithoutCricketMatchTeamAInput
    teamBScore?: CricketTeamMatchDataCreateNestedOneWithoutCricketMatchTeamBInput
    battingTeam?: CricketTeamMatchDataCreateNestedOneWithoutMatchBttingTeamInput
    bowlingTeam?: CricketTeamMatchDataCreateNestedOneWithoutMatchBowlingTeamInput
    players?: CricketPlayerCreateNestedManyWithoutMatchesInput
    over_match?: CricketOverCreateNestedManyWithoutMatchInput
    team_batting_score?: CricketMatchPlayerBattingScoreCreateNestedManyWithoutMatchInput
    team_bowling_score?: CricketMatchPlayerBowlingScoreCreateNestedManyWithoutMatchInput
  }

  export type CricketMatchUncheckedCreateWithoutTeamBInput = {
    sis_id?: string
    played?: boolean
    tossWonBy?: string | null
    tossDecision?: string | null
    date: Date | string
    venue?: string | null
    year: string
    dependency?: boolean
    dependentOn?: string | null
    team1Wickets?: number | null
    team2Wickets?: number | null
    team1Runs?: number | null
    team2Runs?: number | null
    team1Balls?: number | null
    team2Balls?: number | null
    overs?: number | null
    powerPlayOvers?: number | null
    overPerBowler?: number | null
    currentOverId?: string | null
    wonBy?: string | null
    teamAId?: string | null
    teamAScoreId?: string | null
    teamBScoreId?: string | null
    battingTeamScoreId?: string | null
    bowlingTeamScoreId?: string | null
    players?: CricketPlayerUncheckedCreateNestedManyWithoutMatchesInput
    over_match?: CricketOverUncheckedCreateNestedManyWithoutMatchInput
    team_batting_score?: CricketMatchPlayerBattingScoreUncheckedCreateNestedManyWithoutMatchInput
    team_bowling_score?: CricketMatchPlayerBowlingScoreUncheckedCreateNestedManyWithoutMatchInput
  }

  export type CricketMatchCreateOrConnectWithoutTeamBInput = {
    where: CricketMatchWhereUniqueInput
    create: XOR<CricketMatchCreateWithoutTeamBInput, CricketMatchUncheckedCreateWithoutTeamBInput>
  }

  export type CricketMatchCreateManyTeamBInputEnvelope = {
    data: CricketMatchCreateManyTeamBInput | CricketMatchCreateManyTeamBInput[]
    skipDuplicates?: boolean
  }

  export type CricketPlayerUpsertWithWhereUniqueWithoutTeam_playersInput = {
    where: CricketPlayerWhereUniqueInput
    update: XOR<CricketPlayerUpdateWithoutTeam_playersInput, CricketPlayerUncheckedUpdateWithoutTeam_playersInput>
    create: XOR<CricketPlayerCreateWithoutTeam_playersInput, CricketPlayerUncheckedCreateWithoutTeam_playersInput>
  }

  export type CricketPlayerUpdateWithWhereUniqueWithoutTeam_playersInput = {
    where: CricketPlayerWhereUniqueInput
    data: XOR<CricketPlayerUpdateWithoutTeam_playersInput, CricketPlayerUncheckedUpdateWithoutTeam_playersInput>
  }

  export type CricketPlayerUpdateManyWithWhereWithoutTeam_playersInput = {
    where: CricketPlayerScalarWhereInput
    data: XOR<CricketPlayerUpdateManyMutationInput, CricketPlayerUncheckedUpdateManyWithoutTeam_playersInput>
  }

  export type CricketMatchUpsertWithWhereUniqueWithoutWonByTeamInput = {
    where: CricketMatchWhereUniqueInput
    update: XOR<CricketMatchUpdateWithoutWonByTeamInput, CricketMatchUncheckedUpdateWithoutWonByTeamInput>
    create: XOR<CricketMatchCreateWithoutWonByTeamInput, CricketMatchUncheckedCreateWithoutWonByTeamInput>
  }

  export type CricketMatchUpdateWithWhereUniqueWithoutWonByTeamInput = {
    where: CricketMatchWhereUniqueInput
    data: XOR<CricketMatchUpdateWithoutWonByTeamInput, CricketMatchUncheckedUpdateWithoutWonByTeamInput>
  }

  export type CricketMatchUpdateManyWithWhereWithoutWonByTeamInput = {
    where: CricketMatchScalarWhereInput
    data: XOR<CricketMatchUpdateManyMutationInput, CricketMatchUncheckedUpdateManyWithoutWonByTeamInput>
  }

  export type CricketMatchScalarWhereInput = {
    AND?: CricketMatchScalarWhereInput | CricketMatchScalarWhereInput[]
    OR?: CricketMatchScalarWhereInput[]
    NOT?: CricketMatchScalarWhereInput | CricketMatchScalarWhereInput[]
    sis_id?: StringFilter<"CricketMatch"> | string
    played?: BoolFilter<"CricketMatch"> | boolean
    tossWonBy?: StringNullableFilter<"CricketMatch"> | string | null
    tossDecision?: StringNullableFilter<"CricketMatch"> | string | null
    date?: DateTimeFilter<"CricketMatch"> | Date | string
    venue?: StringNullableFilter<"CricketMatch"> | string | null
    year?: StringFilter<"CricketMatch"> | string
    dependency?: BoolFilter<"CricketMatch"> | boolean
    dependentOn?: StringNullableFilter<"CricketMatch"> | string | null
    team1Wickets?: IntNullableFilter<"CricketMatch"> | number | null
    team2Wickets?: IntNullableFilter<"CricketMatch"> | number | null
    team1Runs?: IntNullableFilter<"CricketMatch"> | number | null
    team2Runs?: IntNullableFilter<"CricketMatch"> | number | null
    team1Balls?: IntNullableFilter<"CricketMatch"> | number | null
    team2Balls?: IntNullableFilter<"CricketMatch"> | number | null
    overs?: IntNullableFilter<"CricketMatch"> | number | null
    powerPlayOvers?: IntNullableFilter<"CricketMatch"> | number | null
    overPerBowler?: IntNullableFilter<"CricketMatch"> | number | null
    currentOverId?: StringNullableFilter<"CricketMatch"> | string | null
    wonBy?: StringNullableFilter<"CricketMatch"> | string | null
    teamAId?: StringNullableFilter<"CricketMatch"> | string | null
    teamBId?: StringNullableFilter<"CricketMatch"> | string | null
    teamAScoreId?: StringNullableFilter<"CricketMatch"> | string | null
    teamBScoreId?: StringNullableFilter<"CricketMatch"> | string | null
    battingTeamScoreId?: StringNullableFilter<"CricketMatch"> | string | null
    bowlingTeamScoreId?: StringNullableFilter<"CricketMatch"> | string | null
  }

  export type CricketMatchUpsertWithWhereUniqueWithoutTossWonByTeamInput = {
    where: CricketMatchWhereUniqueInput
    update: XOR<CricketMatchUpdateWithoutTossWonByTeamInput, CricketMatchUncheckedUpdateWithoutTossWonByTeamInput>
    create: XOR<CricketMatchCreateWithoutTossWonByTeamInput, CricketMatchUncheckedCreateWithoutTossWonByTeamInput>
  }

  export type CricketMatchUpdateWithWhereUniqueWithoutTossWonByTeamInput = {
    where: CricketMatchWhereUniqueInput
    data: XOR<CricketMatchUpdateWithoutTossWonByTeamInput, CricketMatchUncheckedUpdateWithoutTossWonByTeamInput>
  }

  export type CricketMatchUpdateManyWithWhereWithoutTossWonByTeamInput = {
    where: CricketMatchScalarWhereInput
    data: XOR<CricketMatchUpdateManyMutationInput, CricketMatchUncheckedUpdateManyWithoutTossWonByTeamInput>
  }

  export type CricketPlayerUpsertWithWhereUniqueWithoutTeamInput = {
    where: CricketPlayerWhereUniqueInput
    update: XOR<CricketPlayerUpdateWithoutTeamInput, CricketPlayerUncheckedUpdateWithoutTeamInput>
    create: XOR<CricketPlayerCreateWithoutTeamInput, CricketPlayerUncheckedCreateWithoutTeamInput>
  }

  export type CricketPlayerUpdateWithWhereUniqueWithoutTeamInput = {
    where: CricketPlayerWhereUniqueInput
    data: XOR<CricketPlayerUpdateWithoutTeamInput, CricketPlayerUncheckedUpdateWithoutTeamInput>
  }

  export type CricketPlayerUpdateManyWithWhereWithoutTeamInput = {
    where: CricketPlayerScalarWhereInput
    data: XOR<CricketPlayerUpdateManyMutationInput, CricketPlayerUncheckedUpdateManyWithoutTeamInput>
  }

  export type CricketTeamMatchDataUpsertWithWhereUniqueWithoutTeamInput = {
    where: CricketTeamMatchDataWhereUniqueInput
    update: XOR<CricketTeamMatchDataUpdateWithoutTeamInput, CricketTeamMatchDataUncheckedUpdateWithoutTeamInput>
    create: XOR<CricketTeamMatchDataCreateWithoutTeamInput, CricketTeamMatchDataUncheckedCreateWithoutTeamInput>
  }

  export type CricketTeamMatchDataUpdateWithWhereUniqueWithoutTeamInput = {
    where: CricketTeamMatchDataWhereUniqueInput
    data: XOR<CricketTeamMatchDataUpdateWithoutTeamInput, CricketTeamMatchDataUncheckedUpdateWithoutTeamInput>
  }

  export type CricketTeamMatchDataUpdateManyWithWhereWithoutTeamInput = {
    where: CricketTeamMatchDataScalarWhereInput
    data: XOR<CricketTeamMatchDataUpdateManyMutationInput, CricketTeamMatchDataUncheckedUpdateManyWithoutTeamInput>
  }

  export type CricketTeamMatchDataScalarWhereInput = {
    AND?: CricketTeamMatchDataScalarWhereInput | CricketTeamMatchDataScalarWhereInput[]
    OR?: CricketTeamMatchDataScalarWhereInput[]
    NOT?: CricketTeamMatchDataScalarWhereInput | CricketTeamMatchDataScalarWhereInput[]
    sis_id?: StringFilter<"CricketTeamMatchData"> | string
    teamId?: StringNullableFilter<"CricketTeamMatchData"> | string | null
    matchId?: StringNullableFilter<"CricketTeamMatchData"> | string | null
    name?: StringNullableFilter<"CricketTeamMatchData"> | string | null
    runs?: IntFilter<"CricketTeamMatchData"> | number
    wideRuns?: IntFilter<"CricketTeamMatchData"> | number
    nbRuns?: IntFilter<"CricketTeamMatchData"> | number
    byeRuns?: IntFilter<"CricketTeamMatchData"> | number
    lbRuns?: IntFilter<"CricketTeamMatchData"> | number
    wickets?: IntFilter<"CricketTeamMatchData"> | number
    balls?: IntFilter<"CricketTeamMatchData"> | number
  }

  export type CricketMatchPlayerBattingScoreUpsertWithWhereUniqueWithoutTeamInput = {
    where: CricketMatchPlayerBattingScoreWhereUniqueInput
    update: XOR<CricketMatchPlayerBattingScoreUpdateWithoutTeamInput, CricketMatchPlayerBattingScoreUncheckedUpdateWithoutTeamInput>
    create: XOR<CricketMatchPlayerBattingScoreCreateWithoutTeamInput, CricketMatchPlayerBattingScoreUncheckedCreateWithoutTeamInput>
  }

  export type CricketMatchPlayerBattingScoreUpdateWithWhereUniqueWithoutTeamInput = {
    where: CricketMatchPlayerBattingScoreWhereUniqueInput
    data: XOR<CricketMatchPlayerBattingScoreUpdateWithoutTeamInput, CricketMatchPlayerBattingScoreUncheckedUpdateWithoutTeamInput>
  }

  export type CricketMatchPlayerBattingScoreUpdateManyWithWhereWithoutTeamInput = {
    where: CricketMatchPlayerBattingScoreScalarWhereInput
    data: XOR<CricketMatchPlayerBattingScoreUpdateManyMutationInput, CricketMatchPlayerBattingScoreUncheckedUpdateManyWithoutTeamInput>
  }

  export type CricketMatchPlayerBattingScoreScalarWhereInput = {
    AND?: CricketMatchPlayerBattingScoreScalarWhereInput | CricketMatchPlayerBattingScoreScalarWhereInput[]
    OR?: CricketMatchPlayerBattingScoreScalarWhereInput[]
    NOT?: CricketMatchPlayerBattingScoreScalarWhereInput | CricketMatchPlayerBattingScoreScalarWhereInput[]
    sis_id?: StringFilter<"CricketMatchPlayerBattingScore"> | string
    runs?: IntFilter<"CricketMatchPlayerBattingScore"> | number
    balls?: IntFilter<"CricketMatchPlayerBattingScore"> | number
    fours?: IntFilter<"CricketMatchPlayerBattingScore"> | number
    sixes?: IntFilter<"CricketMatchPlayerBattingScore"> | number
    strikeRate?: FloatFilter<"CricketMatchPlayerBattingScore"> | number
    out?: BoolFilter<"CricketMatchPlayerBattingScore"> | boolean
    played?: BoolFilter<"CricketMatchPlayerBattingScore"> | boolean
    wicketType?: StringNullableFilter<"CricketMatchPlayerBattingScore"> | string | null
    playerId?: StringNullableFilter<"CricketMatchPlayerBattingScore"> | string | null
    matchId?: StringFilter<"CricketMatchPlayerBattingScore"> | string
    teamId?: StringFilter<"CricketMatchPlayerBattingScore"> | string
  }

  export type CricketMatchPlayerBowlingScoreUpsertWithWhereUniqueWithoutTeamInput = {
    where: CricketMatchPlayerBowlingScoreWhereUniqueInput
    update: XOR<CricketMatchPlayerBowlingScoreUpdateWithoutTeamInput, CricketMatchPlayerBowlingScoreUncheckedUpdateWithoutTeamInput>
    create: XOR<CricketMatchPlayerBowlingScoreCreateWithoutTeamInput, CricketMatchPlayerBowlingScoreUncheckedCreateWithoutTeamInput>
  }

  export type CricketMatchPlayerBowlingScoreUpdateWithWhereUniqueWithoutTeamInput = {
    where: CricketMatchPlayerBowlingScoreWhereUniqueInput
    data: XOR<CricketMatchPlayerBowlingScoreUpdateWithoutTeamInput, CricketMatchPlayerBowlingScoreUncheckedUpdateWithoutTeamInput>
  }

  export type CricketMatchPlayerBowlingScoreUpdateManyWithWhereWithoutTeamInput = {
    where: CricketMatchPlayerBowlingScoreScalarWhereInput
    data: XOR<CricketMatchPlayerBowlingScoreUpdateManyMutationInput, CricketMatchPlayerBowlingScoreUncheckedUpdateManyWithoutTeamInput>
  }

  export type CricketMatchPlayerBowlingScoreScalarWhereInput = {
    AND?: CricketMatchPlayerBowlingScoreScalarWhereInput | CricketMatchPlayerBowlingScoreScalarWhereInput[]
    OR?: CricketMatchPlayerBowlingScoreScalarWhereInput[]
    NOT?: CricketMatchPlayerBowlingScoreScalarWhereInput | CricketMatchPlayerBowlingScoreScalarWhereInput[]
    sis_id?: StringFilter<"CricketMatchPlayerBowlingScore"> | string
    runs?: IntFilter<"CricketMatchPlayerBowlingScore"> | number
    balls?: IntFilter<"CricketMatchPlayerBowlingScore"> | number
    fours?: IntFilter<"CricketMatchPlayerBowlingScore"> | number
    sixes?: IntFilter<"CricketMatchPlayerBowlingScore"> | number
    played?: BoolFilter<"CricketMatchPlayerBowlingScore"> | boolean
    wickets?: IntFilter<"CricketMatchPlayerBowlingScore"> | number
    playerId?: StringNullableFilter<"CricketMatchPlayerBowlingScore"> | string | null
    matchId?: StringFilter<"CricketMatchPlayerBowlingScore"> | string
    teamId?: StringFilter<"CricketMatchPlayerBowlingScore"> | string
  }

  export type CricketMatchUpsertWithWhereUniqueWithoutTeamAInput = {
    where: CricketMatchWhereUniqueInput
    update: XOR<CricketMatchUpdateWithoutTeamAInput, CricketMatchUncheckedUpdateWithoutTeamAInput>
    create: XOR<CricketMatchCreateWithoutTeamAInput, CricketMatchUncheckedCreateWithoutTeamAInput>
  }

  export type CricketMatchUpdateWithWhereUniqueWithoutTeamAInput = {
    where: CricketMatchWhereUniqueInput
    data: XOR<CricketMatchUpdateWithoutTeamAInput, CricketMatchUncheckedUpdateWithoutTeamAInput>
  }

  export type CricketMatchUpdateManyWithWhereWithoutTeamAInput = {
    where: CricketMatchScalarWhereInput
    data: XOR<CricketMatchUpdateManyMutationInput, CricketMatchUncheckedUpdateManyWithoutTeamAInput>
  }

  export type CricketMatchUpsertWithWhereUniqueWithoutTeamBInput = {
    where: CricketMatchWhereUniqueInput
    update: XOR<CricketMatchUpdateWithoutTeamBInput, CricketMatchUncheckedUpdateWithoutTeamBInput>
    create: XOR<CricketMatchCreateWithoutTeamBInput, CricketMatchUncheckedCreateWithoutTeamBInput>
  }

  export type CricketMatchUpdateWithWhereUniqueWithoutTeamBInput = {
    where: CricketMatchWhereUniqueInput
    data: XOR<CricketMatchUpdateWithoutTeamBInput, CricketMatchUncheckedUpdateWithoutTeamBInput>
  }

  export type CricketMatchUpdateManyWithWhereWithoutTeamBInput = {
    where: CricketMatchScalarWhereInput
    data: XOR<CricketMatchUpdateManyMutationInput, CricketMatchUncheckedUpdateManyWithoutTeamBInput>
  }

  export type UsersCreateWithoutCricket_playersInput = {
    userId: string
    email: string
    name?: string | null
    password?: string | null
    token?: string | null
    roles?: UsersCreaterolesInput | $Enums.Role[]
    createdAt?: Date | string
    updatedAt?: Date | string
    rec_status?: boolean
    cricketPlayer?: CricketPlayerCreateNestedOneWithoutUser_cricket_playersInput
    verification_token?: VerificationTokenCreateNestedManyWithoutUserInput
    user_tickets?: TicketCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateWithoutCricket_playersInput = {
    userId: string
    email: string
    name?: string | null
    password?: string | null
    token?: string | null
    roles?: UsersCreaterolesInput | $Enums.Role[]
    createdAt?: Date | string
    updatedAt?: Date | string
    rec_status?: boolean
    cricketPlayerId?: string | null
    verification_token?: VerificationTokenUncheckedCreateNestedManyWithoutUserInput
    user_tickets?: TicketUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersCreateOrConnectWithoutCricket_playersInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutCricket_playersInput, UsersUncheckedCreateWithoutCricket_playersInput>
  }

  export type CricketMatchCreateWithoutPlayersInput = {
    sis_id?: string
    played?: boolean
    tossDecision?: string | null
    date: Date | string
    venue?: string | null
    year: string
    dependency?: boolean
    dependentOn?: string | null
    team1Wickets?: number | null
    team2Wickets?: number | null
    team1Runs?: number | null
    team2Runs?: number | null
    team1Balls?: number | null
    team2Balls?: number | null
    overs?: number | null
    powerPlayOvers?: number | null
    overPerBowler?: number | null
    tossWonByTeam?: CricketTeamCreateNestedOneWithoutToss_winning_teamInput
    currentOver?: CricketOverCreateNestedOneWithoutMatch_current_overInput
    wonByTeam?: CricketTeamCreateNestedOneWithoutWinning_teamInput
    teamA?: CricketTeamCreateNestedOneWithoutCricketMatchTeamAInput
    teamB?: CricketTeamCreateNestedOneWithoutCricketMatchTeamBInput
    teamAScore?: CricketTeamMatchDataCreateNestedOneWithoutCricketMatchTeamAInput
    teamBScore?: CricketTeamMatchDataCreateNestedOneWithoutCricketMatchTeamBInput
    battingTeam?: CricketTeamMatchDataCreateNestedOneWithoutMatchBttingTeamInput
    bowlingTeam?: CricketTeamMatchDataCreateNestedOneWithoutMatchBowlingTeamInput
    over_match?: CricketOverCreateNestedManyWithoutMatchInput
    team_batting_score?: CricketMatchPlayerBattingScoreCreateNestedManyWithoutMatchInput
    team_bowling_score?: CricketMatchPlayerBowlingScoreCreateNestedManyWithoutMatchInput
  }

  export type CricketMatchUncheckedCreateWithoutPlayersInput = {
    sis_id?: string
    played?: boolean
    tossWonBy?: string | null
    tossDecision?: string | null
    date: Date | string
    venue?: string | null
    year: string
    dependency?: boolean
    dependentOn?: string | null
    team1Wickets?: number | null
    team2Wickets?: number | null
    team1Runs?: number | null
    team2Runs?: number | null
    team1Balls?: number | null
    team2Balls?: number | null
    overs?: number | null
    powerPlayOvers?: number | null
    overPerBowler?: number | null
    currentOverId?: string | null
    wonBy?: string | null
    teamAId?: string | null
    teamBId?: string | null
    teamAScoreId?: string | null
    teamBScoreId?: string | null
    battingTeamScoreId?: string | null
    bowlingTeamScoreId?: string | null
    over_match?: CricketOverUncheckedCreateNestedManyWithoutMatchInput
    team_batting_score?: CricketMatchPlayerBattingScoreUncheckedCreateNestedManyWithoutMatchInput
    team_bowling_score?: CricketMatchPlayerBowlingScoreUncheckedCreateNestedManyWithoutMatchInput
  }

  export type CricketMatchCreateOrConnectWithoutPlayersInput = {
    where: CricketMatchWhereUniqueInput
    create: XOR<CricketMatchCreateWithoutPlayersInput, CricketMatchUncheckedCreateWithoutPlayersInput>
  }

  export type CricketTeamCreateWithoutPlayer_teamInput = {
    sis_id?: string
    name: string
    year: string
    players?: CricketPlayerCreateNestedManyWithoutTeam_playersInput
    winning_team?: CricketMatchCreateNestedManyWithoutWonByTeamInput
    toss_winning_team?: CricketMatchCreateNestedManyWithoutTossWonByTeamInput
    cricket_match_teamData?: CricketTeamMatchDataCreateNestedManyWithoutTeamInput
    cricket_match_player_batting_score?: CricketMatchPlayerBattingScoreCreateNestedManyWithoutTeamInput
    cricket_match_player_bowling_score?: CricketMatchPlayerBowlingScoreCreateNestedManyWithoutTeamInput
    CricketMatchTeamA?: CricketMatchCreateNestedManyWithoutTeamAInput
    CricketMatchTeamB?: CricketMatchCreateNestedManyWithoutTeamBInput
  }

  export type CricketTeamUncheckedCreateWithoutPlayer_teamInput = {
    sis_id?: string
    name: string
    year: string
    players?: CricketPlayerUncheckedCreateNestedManyWithoutTeam_playersInput
    winning_team?: CricketMatchUncheckedCreateNestedManyWithoutWonByTeamInput
    toss_winning_team?: CricketMatchUncheckedCreateNestedManyWithoutTossWonByTeamInput
    cricket_match_teamData?: CricketTeamMatchDataUncheckedCreateNestedManyWithoutTeamInput
    cricket_match_player_batting_score?: CricketMatchPlayerBattingScoreUncheckedCreateNestedManyWithoutTeamInput
    cricket_match_player_bowling_score?: CricketMatchPlayerBowlingScoreUncheckedCreateNestedManyWithoutTeamInput
    CricketMatchTeamA?: CricketMatchUncheckedCreateNestedManyWithoutTeamAInput
    CricketMatchTeamB?: CricketMatchUncheckedCreateNestedManyWithoutTeamBInput
  }

  export type CricketTeamCreateOrConnectWithoutPlayer_teamInput = {
    where: CricketTeamWhereUniqueInput
    create: XOR<CricketTeamCreateWithoutPlayer_teamInput, CricketTeamUncheckedCreateWithoutPlayer_teamInput>
  }

  export type UsersCreateWithoutCricketPlayerInput = {
    userId: string
    email: string
    name?: string | null
    password?: string | null
    token?: string | null
    roles?: UsersCreaterolesInput | $Enums.Role[]
    createdAt?: Date | string
    updatedAt?: Date | string
    rec_status?: boolean
    cricket_players?: CricketPlayerCreateNestedManyWithoutUserInput
    verification_token?: VerificationTokenCreateNestedManyWithoutUserInput
    user_tickets?: TicketCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateWithoutCricketPlayerInput = {
    userId: string
    email: string
    name?: string | null
    password?: string | null
    token?: string | null
    roles?: UsersCreaterolesInput | $Enums.Role[]
    createdAt?: Date | string
    updatedAt?: Date | string
    rec_status?: boolean
    cricket_players?: CricketPlayerUncheckedCreateNestedManyWithoutUserInput
    verification_token?: VerificationTokenUncheckedCreateNestedManyWithoutUserInput
    user_tickets?: TicketUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersCreateOrConnectWithoutCricketPlayerInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutCricketPlayerInput, UsersUncheckedCreateWithoutCricketPlayerInput>
  }

  export type UsersCreateManyCricketPlayerInputEnvelope = {
    data: UsersCreateManyCricketPlayerInput | UsersCreateManyCricketPlayerInput[]
    skipDuplicates?: boolean
  }

  export type CricketTeamCreateWithoutPlayersInput = {
    sis_id?: string
    name: string
    year: string
    winning_team?: CricketMatchCreateNestedManyWithoutWonByTeamInput
    toss_winning_team?: CricketMatchCreateNestedManyWithoutTossWonByTeamInput
    player_team?: CricketPlayerCreateNestedManyWithoutTeamInput
    cricket_match_teamData?: CricketTeamMatchDataCreateNestedManyWithoutTeamInput
    cricket_match_player_batting_score?: CricketMatchPlayerBattingScoreCreateNestedManyWithoutTeamInput
    cricket_match_player_bowling_score?: CricketMatchPlayerBowlingScoreCreateNestedManyWithoutTeamInput
    CricketMatchTeamA?: CricketMatchCreateNestedManyWithoutTeamAInput
    CricketMatchTeamB?: CricketMatchCreateNestedManyWithoutTeamBInput
  }

  export type CricketTeamUncheckedCreateWithoutPlayersInput = {
    sis_id?: string
    name: string
    year: string
    winning_team?: CricketMatchUncheckedCreateNestedManyWithoutWonByTeamInput
    toss_winning_team?: CricketMatchUncheckedCreateNestedManyWithoutTossWonByTeamInput
    player_team?: CricketPlayerUncheckedCreateNestedManyWithoutTeamInput
    cricket_match_teamData?: CricketTeamMatchDataUncheckedCreateNestedManyWithoutTeamInput
    cricket_match_player_batting_score?: CricketMatchPlayerBattingScoreUncheckedCreateNestedManyWithoutTeamInput
    cricket_match_player_bowling_score?: CricketMatchPlayerBowlingScoreUncheckedCreateNestedManyWithoutTeamInput
    CricketMatchTeamA?: CricketMatchUncheckedCreateNestedManyWithoutTeamAInput
    CricketMatchTeamB?: CricketMatchUncheckedCreateNestedManyWithoutTeamBInput
  }

  export type CricketTeamCreateOrConnectWithoutPlayersInput = {
    where: CricketTeamWhereUniqueInput
    create: XOR<CricketTeamCreateWithoutPlayersInput, CricketTeamUncheckedCreateWithoutPlayersInput>
  }

  export type CricketMatchPlayerBattingScoreCreateWithoutPlayerInput = {
    sis_id?: string
    runs?: number
    balls?: number
    fours?: number
    sixes?: number
    strikeRate?: number
    out?: boolean
    played?: boolean
    wicketType?: string | null
    match: CricketMatchCreateNestedOneWithoutTeam_batting_scoreInput
    team: CricketTeamCreateNestedOneWithoutCricket_match_player_batting_scoreInput
    match_batters?: CricketTeamMatchDataCreateNestedManyWithoutBattersInput
    over_striker?: CricketOverCreateNestedManyWithoutStrikerScoreInput
    over_non_striker?: CricketOverCreateNestedManyWithoutNonStrikerScoreInput
  }

  export type CricketMatchPlayerBattingScoreUncheckedCreateWithoutPlayerInput = {
    sis_id?: string
    runs?: number
    balls?: number
    fours?: number
    sixes?: number
    strikeRate?: number
    out?: boolean
    played?: boolean
    wicketType?: string | null
    matchId: string
    teamId: string
    match_batters?: CricketTeamMatchDataUncheckedCreateNestedManyWithoutBattersInput
    over_striker?: CricketOverUncheckedCreateNestedManyWithoutStrikerScoreInput
    over_non_striker?: CricketOverUncheckedCreateNestedManyWithoutNonStrikerScoreInput
  }

  export type CricketMatchPlayerBattingScoreCreateOrConnectWithoutPlayerInput = {
    where: CricketMatchPlayerBattingScoreWhereUniqueInput
    create: XOR<CricketMatchPlayerBattingScoreCreateWithoutPlayerInput, CricketMatchPlayerBattingScoreUncheckedCreateWithoutPlayerInput>
  }

  export type CricketMatchPlayerBattingScoreCreateManyPlayerInputEnvelope = {
    data: CricketMatchPlayerBattingScoreCreateManyPlayerInput | CricketMatchPlayerBattingScoreCreateManyPlayerInput[]
    skipDuplicates?: boolean
  }

  export type CricketMatchPlayerBowlingScoreCreateWithoutPlayerInput = {
    sis_id?: string
    runs?: number
    balls?: number
    fours?: number
    sixes?: number
    played?: boolean
    wickets?: number
    match: CricketMatchCreateNestedOneWithoutTeam_bowling_scoreInput
    team: CricketTeamCreateNestedOneWithoutCricket_match_player_bowling_scoreInput
    match_bowlers?: CricketTeamMatchDataCreateNestedManyWithoutBowlersInput
    over_bowler?: CricketOverCreateNestedManyWithoutBowlerScoreInput
  }

  export type CricketMatchPlayerBowlingScoreUncheckedCreateWithoutPlayerInput = {
    sis_id?: string
    runs?: number
    balls?: number
    fours?: number
    sixes?: number
    played?: boolean
    wickets?: number
    matchId: string
    teamId: string
    match_bowlers?: CricketTeamMatchDataUncheckedCreateNestedManyWithoutBowlersInput
    over_bowler?: CricketOverUncheckedCreateNestedManyWithoutBowlerScoreInput
  }

  export type CricketMatchPlayerBowlingScoreCreateOrConnectWithoutPlayerInput = {
    where: CricketMatchPlayerBowlingScoreWhereUniqueInput
    create: XOR<CricketMatchPlayerBowlingScoreCreateWithoutPlayerInput, CricketMatchPlayerBowlingScoreUncheckedCreateWithoutPlayerInput>
  }

  export type CricketMatchPlayerBowlingScoreCreateManyPlayerInputEnvelope = {
    data: CricketMatchPlayerBowlingScoreCreateManyPlayerInput | CricketMatchPlayerBowlingScoreCreateManyPlayerInput[]
    skipDuplicates?: boolean
  }

  export type UsersUpsertWithoutCricket_playersInput = {
    update: XOR<UsersUpdateWithoutCricket_playersInput, UsersUncheckedUpdateWithoutCricket_playersInput>
    create: XOR<UsersCreateWithoutCricket_playersInput, UsersUncheckedCreateWithoutCricket_playersInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutCricket_playersInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutCricket_playersInput, UsersUncheckedUpdateWithoutCricket_playersInput>
  }

  export type UsersUpdateWithoutCricket_playersInput = {
    userId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: UsersUpdaterolesInput | $Enums.Role[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rec_status?: BoolFieldUpdateOperationsInput | boolean
    cricketPlayer?: CricketPlayerUpdateOneWithoutUser_cricket_playersNestedInput
    verification_token?: VerificationTokenUpdateManyWithoutUserNestedInput
    user_tickets?: TicketUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutCricket_playersInput = {
    userId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: UsersUpdaterolesInput | $Enums.Role[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rec_status?: BoolFieldUpdateOperationsInput | boolean
    cricketPlayerId?: NullableStringFieldUpdateOperationsInput | string | null
    verification_token?: VerificationTokenUncheckedUpdateManyWithoutUserNestedInput
    user_tickets?: TicketUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CricketMatchUpsertWithWhereUniqueWithoutPlayersInput = {
    where: CricketMatchWhereUniqueInput
    update: XOR<CricketMatchUpdateWithoutPlayersInput, CricketMatchUncheckedUpdateWithoutPlayersInput>
    create: XOR<CricketMatchCreateWithoutPlayersInput, CricketMatchUncheckedCreateWithoutPlayersInput>
  }

  export type CricketMatchUpdateWithWhereUniqueWithoutPlayersInput = {
    where: CricketMatchWhereUniqueInput
    data: XOR<CricketMatchUpdateWithoutPlayersInput, CricketMatchUncheckedUpdateWithoutPlayersInput>
  }

  export type CricketMatchUpdateManyWithWhereWithoutPlayersInput = {
    where: CricketMatchScalarWhereInput
    data: XOR<CricketMatchUpdateManyMutationInput, CricketMatchUncheckedUpdateManyWithoutPlayersInput>
  }

  export type CricketTeamUpsertWithoutPlayer_teamInput = {
    update: XOR<CricketTeamUpdateWithoutPlayer_teamInput, CricketTeamUncheckedUpdateWithoutPlayer_teamInput>
    create: XOR<CricketTeamCreateWithoutPlayer_teamInput, CricketTeamUncheckedCreateWithoutPlayer_teamInput>
    where?: CricketTeamWhereInput
  }

  export type CricketTeamUpdateToOneWithWhereWithoutPlayer_teamInput = {
    where?: CricketTeamWhereInput
    data: XOR<CricketTeamUpdateWithoutPlayer_teamInput, CricketTeamUncheckedUpdateWithoutPlayer_teamInput>
  }

  export type CricketTeamUpdateWithoutPlayer_teamInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    players?: CricketPlayerUpdateManyWithoutTeam_playersNestedInput
    winning_team?: CricketMatchUpdateManyWithoutWonByTeamNestedInput
    toss_winning_team?: CricketMatchUpdateManyWithoutTossWonByTeamNestedInput
    cricket_match_teamData?: CricketTeamMatchDataUpdateManyWithoutTeamNestedInput
    cricket_match_player_batting_score?: CricketMatchPlayerBattingScoreUpdateManyWithoutTeamNestedInput
    cricket_match_player_bowling_score?: CricketMatchPlayerBowlingScoreUpdateManyWithoutTeamNestedInput
    CricketMatchTeamA?: CricketMatchUpdateManyWithoutTeamANestedInput
    CricketMatchTeamB?: CricketMatchUpdateManyWithoutTeamBNestedInput
  }

  export type CricketTeamUncheckedUpdateWithoutPlayer_teamInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    players?: CricketPlayerUncheckedUpdateManyWithoutTeam_playersNestedInput
    winning_team?: CricketMatchUncheckedUpdateManyWithoutWonByTeamNestedInput
    toss_winning_team?: CricketMatchUncheckedUpdateManyWithoutTossWonByTeamNestedInput
    cricket_match_teamData?: CricketTeamMatchDataUncheckedUpdateManyWithoutTeamNestedInput
    cricket_match_player_batting_score?: CricketMatchPlayerBattingScoreUncheckedUpdateManyWithoutTeamNestedInput
    cricket_match_player_bowling_score?: CricketMatchPlayerBowlingScoreUncheckedUpdateManyWithoutTeamNestedInput
    CricketMatchTeamA?: CricketMatchUncheckedUpdateManyWithoutTeamANestedInput
    CricketMatchTeamB?: CricketMatchUncheckedUpdateManyWithoutTeamBNestedInput
  }

  export type UsersUpsertWithWhereUniqueWithoutCricketPlayerInput = {
    where: UsersWhereUniqueInput
    update: XOR<UsersUpdateWithoutCricketPlayerInput, UsersUncheckedUpdateWithoutCricketPlayerInput>
    create: XOR<UsersCreateWithoutCricketPlayerInput, UsersUncheckedCreateWithoutCricketPlayerInput>
  }

  export type UsersUpdateWithWhereUniqueWithoutCricketPlayerInput = {
    where: UsersWhereUniqueInput
    data: XOR<UsersUpdateWithoutCricketPlayerInput, UsersUncheckedUpdateWithoutCricketPlayerInput>
  }

  export type UsersUpdateManyWithWhereWithoutCricketPlayerInput = {
    where: UsersScalarWhereInput
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyWithoutCricketPlayerInput>
  }

  export type UsersScalarWhereInput = {
    AND?: UsersScalarWhereInput | UsersScalarWhereInput[]
    OR?: UsersScalarWhereInput[]
    NOT?: UsersScalarWhereInput | UsersScalarWhereInput[]
    userId?: StringFilter<"Users"> | string
    email?: StringFilter<"Users"> | string
    name?: StringNullableFilter<"Users"> | string | null
    password?: StringNullableFilter<"Users"> | string | null
    token?: StringNullableFilter<"Users"> | string | null
    roles?: EnumRoleNullableListFilter<"Users">
    createdAt?: DateTimeFilter<"Users"> | Date | string
    updatedAt?: DateTimeFilter<"Users"> | Date | string
    rec_status?: BoolFilter<"Users"> | boolean
    cricketPlayerId?: StringNullableFilter<"Users"> | string | null
  }

  export type CricketTeamUpsertWithWhereUniqueWithoutPlayersInput = {
    where: CricketTeamWhereUniqueInput
    update: XOR<CricketTeamUpdateWithoutPlayersInput, CricketTeamUncheckedUpdateWithoutPlayersInput>
    create: XOR<CricketTeamCreateWithoutPlayersInput, CricketTeamUncheckedCreateWithoutPlayersInput>
  }

  export type CricketTeamUpdateWithWhereUniqueWithoutPlayersInput = {
    where: CricketTeamWhereUniqueInput
    data: XOR<CricketTeamUpdateWithoutPlayersInput, CricketTeamUncheckedUpdateWithoutPlayersInput>
  }

  export type CricketTeamUpdateManyWithWhereWithoutPlayersInput = {
    where: CricketTeamScalarWhereInput
    data: XOR<CricketTeamUpdateManyMutationInput, CricketTeamUncheckedUpdateManyWithoutPlayersInput>
  }

  export type CricketTeamScalarWhereInput = {
    AND?: CricketTeamScalarWhereInput | CricketTeamScalarWhereInput[]
    OR?: CricketTeamScalarWhereInput[]
    NOT?: CricketTeamScalarWhereInput | CricketTeamScalarWhereInput[]
    sis_id?: StringFilter<"CricketTeam"> | string
    name?: StringFilter<"CricketTeam"> | string
    year?: StringFilter<"CricketTeam"> | string
  }

  export type CricketMatchPlayerBattingScoreUpsertWithWhereUniqueWithoutPlayerInput = {
    where: CricketMatchPlayerBattingScoreWhereUniqueInput
    update: XOR<CricketMatchPlayerBattingScoreUpdateWithoutPlayerInput, CricketMatchPlayerBattingScoreUncheckedUpdateWithoutPlayerInput>
    create: XOR<CricketMatchPlayerBattingScoreCreateWithoutPlayerInput, CricketMatchPlayerBattingScoreUncheckedCreateWithoutPlayerInput>
  }

  export type CricketMatchPlayerBattingScoreUpdateWithWhereUniqueWithoutPlayerInput = {
    where: CricketMatchPlayerBattingScoreWhereUniqueInput
    data: XOR<CricketMatchPlayerBattingScoreUpdateWithoutPlayerInput, CricketMatchPlayerBattingScoreUncheckedUpdateWithoutPlayerInput>
  }

  export type CricketMatchPlayerBattingScoreUpdateManyWithWhereWithoutPlayerInput = {
    where: CricketMatchPlayerBattingScoreScalarWhereInput
    data: XOR<CricketMatchPlayerBattingScoreUpdateManyMutationInput, CricketMatchPlayerBattingScoreUncheckedUpdateManyWithoutPlayerInput>
  }

  export type CricketMatchPlayerBowlingScoreUpsertWithWhereUniqueWithoutPlayerInput = {
    where: CricketMatchPlayerBowlingScoreWhereUniqueInput
    update: XOR<CricketMatchPlayerBowlingScoreUpdateWithoutPlayerInput, CricketMatchPlayerBowlingScoreUncheckedUpdateWithoutPlayerInput>
    create: XOR<CricketMatchPlayerBowlingScoreCreateWithoutPlayerInput, CricketMatchPlayerBowlingScoreUncheckedCreateWithoutPlayerInput>
  }

  export type CricketMatchPlayerBowlingScoreUpdateWithWhereUniqueWithoutPlayerInput = {
    where: CricketMatchPlayerBowlingScoreWhereUniqueInput
    data: XOR<CricketMatchPlayerBowlingScoreUpdateWithoutPlayerInput, CricketMatchPlayerBowlingScoreUncheckedUpdateWithoutPlayerInput>
  }

  export type CricketMatchPlayerBowlingScoreUpdateManyWithWhereWithoutPlayerInput = {
    where: CricketMatchPlayerBowlingScoreScalarWhereInput
    data: XOR<CricketMatchPlayerBowlingScoreUpdateManyMutationInput, CricketMatchPlayerBowlingScoreUncheckedUpdateManyWithoutPlayerInput>
  }

  export type CricketTeamCreateWithoutToss_winning_teamInput = {
    sis_id?: string
    name: string
    year: string
    players?: CricketPlayerCreateNestedManyWithoutTeam_playersInput
    winning_team?: CricketMatchCreateNestedManyWithoutWonByTeamInput
    player_team?: CricketPlayerCreateNestedManyWithoutTeamInput
    cricket_match_teamData?: CricketTeamMatchDataCreateNestedManyWithoutTeamInput
    cricket_match_player_batting_score?: CricketMatchPlayerBattingScoreCreateNestedManyWithoutTeamInput
    cricket_match_player_bowling_score?: CricketMatchPlayerBowlingScoreCreateNestedManyWithoutTeamInput
    CricketMatchTeamA?: CricketMatchCreateNestedManyWithoutTeamAInput
    CricketMatchTeamB?: CricketMatchCreateNestedManyWithoutTeamBInput
  }

  export type CricketTeamUncheckedCreateWithoutToss_winning_teamInput = {
    sis_id?: string
    name: string
    year: string
    players?: CricketPlayerUncheckedCreateNestedManyWithoutTeam_playersInput
    winning_team?: CricketMatchUncheckedCreateNestedManyWithoutWonByTeamInput
    player_team?: CricketPlayerUncheckedCreateNestedManyWithoutTeamInput
    cricket_match_teamData?: CricketTeamMatchDataUncheckedCreateNestedManyWithoutTeamInput
    cricket_match_player_batting_score?: CricketMatchPlayerBattingScoreUncheckedCreateNestedManyWithoutTeamInput
    cricket_match_player_bowling_score?: CricketMatchPlayerBowlingScoreUncheckedCreateNestedManyWithoutTeamInput
    CricketMatchTeamA?: CricketMatchUncheckedCreateNestedManyWithoutTeamAInput
    CricketMatchTeamB?: CricketMatchUncheckedCreateNestedManyWithoutTeamBInput
  }

  export type CricketTeamCreateOrConnectWithoutToss_winning_teamInput = {
    where: CricketTeamWhereUniqueInput
    create: XOR<CricketTeamCreateWithoutToss_winning_teamInput, CricketTeamUncheckedCreateWithoutToss_winning_teamInput>
  }

  export type CricketOverCreateWithoutMatch_current_overInput = {
    sis_id?: string
    runs?: number
    wickets?: number
    totalBalls?: number
    validBalls?: number
    match: CricketMatchCreateNestedOneWithoutOver_matchInput
    strikerScore: CricketMatchPlayerBattingScoreCreateNestedOneWithoutOver_strikerInput
    nonStrikerScore: CricketMatchPlayerBattingScoreCreateNestedOneWithoutOver_non_strikerInput
    bowlerScore: CricketMatchPlayerBowlingScoreCreateNestedOneWithoutOver_bowlerInput
    balls?: CricketOverBallCreateNestedManyWithoutOverInput
  }

  export type CricketOverUncheckedCreateWithoutMatch_current_overInput = {
    sis_id?: string
    matchId: string
    runs?: number
    wickets?: number
    totalBalls?: number
    validBalls?: number
    strikerScoreId: string
    nonStrikerScoreId: string
    bowlerScoreId: string
    balls?: CricketOverBallUncheckedCreateNestedManyWithoutOverInput
  }

  export type CricketOverCreateOrConnectWithoutMatch_current_overInput = {
    where: CricketOverWhereUniqueInput
    create: XOR<CricketOverCreateWithoutMatch_current_overInput, CricketOverUncheckedCreateWithoutMatch_current_overInput>
  }

  export type CricketTeamCreateWithoutWinning_teamInput = {
    sis_id?: string
    name: string
    year: string
    players?: CricketPlayerCreateNestedManyWithoutTeam_playersInput
    toss_winning_team?: CricketMatchCreateNestedManyWithoutTossWonByTeamInput
    player_team?: CricketPlayerCreateNestedManyWithoutTeamInput
    cricket_match_teamData?: CricketTeamMatchDataCreateNestedManyWithoutTeamInput
    cricket_match_player_batting_score?: CricketMatchPlayerBattingScoreCreateNestedManyWithoutTeamInput
    cricket_match_player_bowling_score?: CricketMatchPlayerBowlingScoreCreateNestedManyWithoutTeamInput
    CricketMatchTeamA?: CricketMatchCreateNestedManyWithoutTeamAInput
    CricketMatchTeamB?: CricketMatchCreateNestedManyWithoutTeamBInput
  }

  export type CricketTeamUncheckedCreateWithoutWinning_teamInput = {
    sis_id?: string
    name: string
    year: string
    players?: CricketPlayerUncheckedCreateNestedManyWithoutTeam_playersInput
    toss_winning_team?: CricketMatchUncheckedCreateNestedManyWithoutTossWonByTeamInput
    player_team?: CricketPlayerUncheckedCreateNestedManyWithoutTeamInput
    cricket_match_teamData?: CricketTeamMatchDataUncheckedCreateNestedManyWithoutTeamInput
    cricket_match_player_batting_score?: CricketMatchPlayerBattingScoreUncheckedCreateNestedManyWithoutTeamInput
    cricket_match_player_bowling_score?: CricketMatchPlayerBowlingScoreUncheckedCreateNestedManyWithoutTeamInput
    CricketMatchTeamA?: CricketMatchUncheckedCreateNestedManyWithoutTeamAInput
    CricketMatchTeamB?: CricketMatchUncheckedCreateNestedManyWithoutTeamBInput
  }

  export type CricketTeamCreateOrConnectWithoutWinning_teamInput = {
    where: CricketTeamWhereUniqueInput
    create: XOR<CricketTeamCreateWithoutWinning_teamInput, CricketTeamUncheckedCreateWithoutWinning_teamInput>
  }

  export type CricketTeamCreateWithoutCricketMatchTeamAInput = {
    sis_id?: string
    name: string
    year: string
    players?: CricketPlayerCreateNestedManyWithoutTeam_playersInput
    winning_team?: CricketMatchCreateNestedManyWithoutWonByTeamInput
    toss_winning_team?: CricketMatchCreateNestedManyWithoutTossWonByTeamInput
    player_team?: CricketPlayerCreateNestedManyWithoutTeamInput
    cricket_match_teamData?: CricketTeamMatchDataCreateNestedManyWithoutTeamInput
    cricket_match_player_batting_score?: CricketMatchPlayerBattingScoreCreateNestedManyWithoutTeamInput
    cricket_match_player_bowling_score?: CricketMatchPlayerBowlingScoreCreateNestedManyWithoutTeamInput
    CricketMatchTeamB?: CricketMatchCreateNestedManyWithoutTeamBInput
  }

  export type CricketTeamUncheckedCreateWithoutCricketMatchTeamAInput = {
    sis_id?: string
    name: string
    year: string
    players?: CricketPlayerUncheckedCreateNestedManyWithoutTeam_playersInput
    winning_team?: CricketMatchUncheckedCreateNestedManyWithoutWonByTeamInput
    toss_winning_team?: CricketMatchUncheckedCreateNestedManyWithoutTossWonByTeamInput
    player_team?: CricketPlayerUncheckedCreateNestedManyWithoutTeamInput
    cricket_match_teamData?: CricketTeamMatchDataUncheckedCreateNestedManyWithoutTeamInput
    cricket_match_player_batting_score?: CricketMatchPlayerBattingScoreUncheckedCreateNestedManyWithoutTeamInput
    cricket_match_player_bowling_score?: CricketMatchPlayerBowlingScoreUncheckedCreateNestedManyWithoutTeamInput
    CricketMatchTeamB?: CricketMatchUncheckedCreateNestedManyWithoutTeamBInput
  }

  export type CricketTeamCreateOrConnectWithoutCricketMatchTeamAInput = {
    where: CricketTeamWhereUniqueInput
    create: XOR<CricketTeamCreateWithoutCricketMatchTeamAInput, CricketTeamUncheckedCreateWithoutCricketMatchTeamAInput>
  }

  export type CricketTeamCreateWithoutCricketMatchTeamBInput = {
    sis_id?: string
    name: string
    year: string
    players?: CricketPlayerCreateNestedManyWithoutTeam_playersInput
    winning_team?: CricketMatchCreateNestedManyWithoutWonByTeamInput
    toss_winning_team?: CricketMatchCreateNestedManyWithoutTossWonByTeamInput
    player_team?: CricketPlayerCreateNestedManyWithoutTeamInput
    cricket_match_teamData?: CricketTeamMatchDataCreateNestedManyWithoutTeamInput
    cricket_match_player_batting_score?: CricketMatchPlayerBattingScoreCreateNestedManyWithoutTeamInput
    cricket_match_player_bowling_score?: CricketMatchPlayerBowlingScoreCreateNestedManyWithoutTeamInput
    CricketMatchTeamA?: CricketMatchCreateNestedManyWithoutTeamAInput
  }

  export type CricketTeamUncheckedCreateWithoutCricketMatchTeamBInput = {
    sis_id?: string
    name: string
    year: string
    players?: CricketPlayerUncheckedCreateNestedManyWithoutTeam_playersInput
    winning_team?: CricketMatchUncheckedCreateNestedManyWithoutWonByTeamInput
    toss_winning_team?: CricketMatchUncheckedCreateNestedManyWithoutTossWonByTeamInput
    player_team?: CricketPlayerUncheckedCreateNestedManyWithoutTeamInput
    cricket_match_teamData?: CricketTeamMatchDataUncheckedCreateNestedManyWithoutTeamInput
    cricket_match_player_batting_score?: CricketMatchPlayerBattingScoreUncheckedCreateNestedManyWithoutTeamInput
    cricket_match_player_bowling_score?: CricketMatchPlayerBowlingScoreUncheckedCreateNestedManyWithoutTeamInput
    CricketMatchTeamA?: CricketMatchUncheckedCreateNestedManyWithoutTeamAInput
  }

  export type CricketTeamCreateOrConnectWithoutCricketMatchTeamBInput = {
    where: CricketTeamWhereUniqueInput
    create: XOR<CricketTeamCreateWithoutCricketMatchTeamBInput, CricketTeamUncheckedCreateWithoutCricketMatchTeamBInput>
  }

  export type CricketTeamMatchDataCreateWithoutCricketMatchTeamAInput = {
    sis_id?: string
    matchId?: string | null
    name?: string | null
    runs?: number
    wideRuns?: number
    nbRuns?: number
    byeRuns?: number
    lbRuns?: number
    wickets?: number
    balls?: number
    batters?: CricketMatchPlayerBattingScoreCreateNestedManyWithoutMatch_battersInput
    bowlers?: CricketMatchPlayerBowlingScoreCreateNestedManyWithoutMatch_bowlersInput
    team?: CricketTeamCreateNestedOneWithoutCricket_match_teamDataInput
    cricketMatchTeamB?: CricketMatchCreateNestedManyWithoutTeamBScoreInput
    matchBttingTeam?: CricketMatchCreateNestedManyWithoutBattingTeamInput
    matchBowlingTeam?: CricketMatchCreateNestedManyWithoutBowlingTeamInput
  }

  export type CricketTeamMatchDataUncheckedCreateWithoutCricketMatchTeamAInput = {
    sis_id?: string
    teamId?: string | null
    matchId?: string | null
    name?: string | null
    runs?: number
    wideRuns?: number
    nbRuns?: number
    byeRuns?: number
    lbRuns?: number
    wickets?: number
    balls?: number
    batters?: CricketMatchPlayerBattingScoreUncheckedCreateNestedManyWithoutMatch_battersInput
    bowlers?: CricketMatchPlayerBowlingScoreUncheckedCreateNestedManyWithoutMatch_bowlersInput
    cricketMatchTeamB?: CricketMatchUncheckedCreateNestedManyWithoutTeamBScoreInput
    matchBttingTeam?: CricketMatchUncheckedCreateNestedManyWithoutBattingTeamInput
    matchBowlingTeam?: CricketMatchUncheckedCreateNestedManyWithoutBowlingTeamInput
  }

  export type CricketTeamMatchDataCreateOrConnectWithoutCricketMatchTeamAInput = {
    where: CricketTeamMatchDataWhereUniqueInput
    create: XOR<CricketTeamMatchDataCreateWithoutCricketMatchTeamAInput, CricketTeamMatchDataUncheckedCreateWithoutCricketMatchTeamAInput>
  }

  export type CricketTeamMatchDataCreateWithoutCricketMatchTeamBInput = {
    sis_id?: string
    matchId?: string | null
    name?: string | null
    runs?: number
    wideRuns?: number
    nbRuns?: number
    byeRuns?: number
    lbRuns?: number
    wickets?: number
    balls?: number
    batters?: CricketMatchPlayerBattingScoreCreateNestedManyWithoutMatch_battersInput
    bowlers?: CricketMatchPlayerBowlingScoreCreateNestedManyWithoutMatch_bowlersInput
    team?: CricketTeamCreateNestedOneWithoutCricket_match_teamDataInput
    cricketMatchTeamA?: CricketMatchCreateNestedManyWithoutTeamAScoreInput
    matchBttingTeam?: CricketMatchCreateNestedManyWithoutBattingTeamInput
    matchBowlingTeam?: CricketMatchCreateNestedManyWithoutBowlingTeamInput
  }

  export type CricketTeamMatchDataUncheckedCreateWithoutCricketMatchTeamBInput = {
    sis_id?: string
    teamId?: string | null
    matchId?: string | null
    name?: string | null
    runs?: number
    wideRuns?: number
    nbRuns?: number
    byeRuns?: number
    lbRuns?: number
    wickets?: number
    balls?: number
    batters?: CricketMatchPlayerBattingScoreUncheckedCreateNestedManyWithoutMatch_battersInput
    bowlers?: CricketMatchPlayerBowlingScoreUncheckedCreateNestedManyWithoutMatch_bowlersInput
    cricketMatchTeamA?: CricketMatchUncheckedCreateNestedManyWithoutTeamAScoreInput
    matchBttingTeam?: CricketMatchUncheckedCreateNestedManyWithoutBattingTeamInput
    matchBowlingTeam?: CricketMatchUncheckedCreateNestedManyWithoutBowlingTeamInput
  }

  export type CricketTeamMatchDataCreateOrConnectWithoutCricketMatchTeamBInput = {
    where: CricketTeamMatchDataWhereUniqueInput
    create: XOR<CricketTeamMatchDataCreateWithoutCricketMatchTeamBInput, CricketTeamMatchDataUncheckedCreateWithoutCricketMatchTeamBInput>
  }

  export type CricketTeamMatchDataCreateWithoutMatchBttingTeamInput = {
    sis_id?: string
    matchId?: string | null
    name?: string | null
    runs?: number
    wideRuns?: number
    nbRuns?: number
    byeRuns?: number
    lbRuns?: number
    wickets?: number
    balls?: number
    batters?: CricketMatchPlayerBattingScoreCreateNestedManyWithoutMatch_battersInput
    bowlers?: CricketMatchPlayerBowlingScoreCreateNestedManyWithoutMatch_bowlersInput
    team?: CricketTeamCreateNestedOneWithoutCricket_match_teamDataInput
    cricketMatchTeamA?: CricketMatchCreateNestedManyWithoutTeamAScoreInput
    cricketMatchTeamB?: CricketMatchCreateNestedManyWithoutTeamBScoreInput
    matchBowlingTeam?: CricketMatchCreateNestedManyWithoutBowlingTeamInput
  }

  export type CricketTeamMatchDataUncheckedCreateWithoutMatchBttingTeamInput = {
    sis_id?: string
    teamId?: string | null
    matchId?: string | null
    name?: string | null
    runs?: number
    wideRuns?: number
    nbRuns?: number
    byeRuns?: number
    lbRuns?: number
    wickets?: number
    balls?: number
    batters?: CricketMatchPlayerBattingScoreUncheckedCreateNestedManyWithoutMatch_battersInput
    bowlers?: CricketMatchPlayerBowlingScoreUncheckedCreateNestedManyWithoutMatch_bowlersInput
    cricketMatchTeamA?: CricketMatchUncheckedCreateNestedManyWithoutTeamAScoreInput
    cricketMatchTeamB?: CricketMatchUncheckedCreateNestedManyWithoutTeamBScoreInput
    matchBowlingTeam?: CricketMatchUncheckedCreateNestedManyWithoutBowlingTeamInput
  }

  export type CricketTeamMatchDataCreateOrConnectWithoutMatchBttingTeamInput = {
    where: CricketTeamMatchDataWhereUniqueInput
    create: XOR<CricketTeamMatchDataCreateWithoutMatchBttingTeamInput, CricketTeamMatchDataUncheckedCreateWithoutMatchBttingTeamInput>
  }

  export type CricketTeamMatchDataCreateWithoutMatchBowlingTeamInput = {
    sis_id?: string
    matchId?: string | null
    name?: string | null
    runs?: number
    wideRuns?: number
    nbRuns?: number
    byeRuns?: number
    lbRuns?: number
    wickets?: number
    balls?: number
    batters?: CricketMatchPlayerBattingScoreCreateNestedManyWithoutMatch_battersInput
    bowlers?: CricketMatchPlayerBowlingScoreCreateNestedManyWithoutMatch_bowlersInput
    team?: CricketTeamCreateNestedOneWithoutCricket_match_teamDataInput
    cricketMatchTeamA?: CricketMatchCreateNestedManyWithoutTeamAScoreInput
    cricketMatchTeamB?: CricketMatchCreateNestedManyWithoutTeamBScoreInput
    matchBttingTeam?: CricketMatchCreateNestedManyWithoutBattingTeamInput
  }

  export type CricketTeamMatchDataUncheckedCreateWithoutMatchBowlingTeamInput = {
    sis_id?: string
    teamId?: string | null
    matchId?: string | null
    name?: string | null
    runs?: number
    wideRuns?: number
    nbRuns?: number
    byeRuns?: number
    lbRuns?: number
    wickets?: number
    balls?: number
    batters?: CricketMatchPlayerBattingScoreUncheckedCreateNestedManyWithoutMatch_battersInput
    bowlers?: CricketMatchPlayerBowlingScoreUncheckedCreateNestedManyWithoutMatch_bowlersInput
    cricketMatchTeamA?: CricketMatchUncheckedCreateNestedManyWithoutTeamAScoreInput
    cricketMatchTeamB?: CricketMatchUncheckedCreateNestedManyWithoutTeamBScoreInput
    matchBttingTeam?: CricketMatchUncheckedCreateNestedManyWithoutBattingTeamInput
  }

  export type CricketTeamMatchDataCreateOrConnectWithoutMatchBowlingTeamInput = {
    where: CricketTeamMatchDataWhereUniqueInput
    create: XOR<CricketTeamMatchDataCreateWithoutMatchBowlingTeamInput, CricketTeamMatchDataUncheckedCreateWithoutMatchBowlingTeamInput>
  }

  export type CricketPlayerCreateWithoutMatchesInput = {
    sis_id?: string
    isSelected?: boolean
    isCaptain?: boolean
    isWicketKeeper?: boolean
    isAllRounder?: boolean
    isBatsman?: boolean
    isBowler?: boolean
    runs?: number
    noOfMatchesPlayed?: number
    noOfSixes?: number
    noOfFours?: number
    noOfWicketsTaken?: number
    noOfHalfCenturies?: number
    noOfCenturies?: number
    noOfWickets?: number
    user: UsersCreateNestedOneWithoutCricket_playersInput
    team?: CricketTeamCreateNestedOneWithoutPlayer_teamInput
    user_cricket_players?: UsersCreateNestedManyWithoutCricketPlayerInput
    team_players?: CricketTeamCreateNestedManyWithoutPlayersInput
    batting_score_player?: CricketMatchPlayerBattingScoreCreateNestedManyWithoutPlayerInput
    bowling_score_player?: CricketMatchPlayerBowlingScoreCreateNestedManyWithoutPlayerInput
  }

  export type CricketPlayerUncheckedCreateWithoutMatchesInput = {
    sis_id?: string
    userId: string
    teamId?: string | null
    isSelected?: boolean
    isCaptain?: boolean
    isWicketKeeper?: boolean
    isAllRounder?: boolean
    isBatsman?: boolean
    isBowler?: boolean
    runs?: number
    noOfMatchesPlayed?: number
    noOfSixes?: number
    noOfFours?: number
    noOfWicketsTaken?: number
    noOfHalfCenturies?: number
    noOfCenturies?: number
    noOfWickets?: number
    user_cricket_players?: UsersUncheckedCreateNestedManyWithoutCricketPlayerInput
    team_players?: CricketTeamUncheckedCreateNestedManyWithoutPlayersInput
    batting_score_player?: CricketMatchPlayerBattingScoreUncheckedCreateNestedManyWithoutPlayerInput
    bowling_score_player?: CricketMatchPlayerBowlingScoreUncheckedCreateNestedManyWithoutPlayerInput
  }

  export type CricketPlayerCreateOrConnectWithoutMatchesInput = {
    where: CricketPlayerWhereUniqueInput
    create: XOR<CricketPlayerCreateWithoutMatchesInput, CricketPlayerUncheckedCreateWithoutMatchesInput>
  }

  export type CricketOverCreateWithoutMatchInput = {
    sis_id?: string
    runs?: number
    wickets?: number
    totalBalls?: number
    validBalls?: number
    strikerScore: CricketMatchPlayerBattingScoreCreateNestedOneWithoutOver_strikerInput
    nonStrikerScore: CricketMatchPlayerBattingScoreCreateNestedOneWithoutOver_non_strikerInput
    bowlerScore: CricketMatchPlayerBowlingScoreCreateNestedOneWithoutOver_bowlerInput
    balls?: CricketOverBallCreateNestedManyWithoutOverInput
    match_current_over?: CricketMatchCreateNestedManyWithoutCurrentOverInput
  }

  export type CricketOverUncheckedCreateWithoutMatchInput = {
    sis_id?: string
    runs?: number
    wickets?: number
    totalBalls?: number
    validBalls?: number
    strikerScoreId: string
    nonStrikerScoreId: string
    bowlerScoreId: string
    balls?: CricketOverBallUncheckedCreateNestedManyWithoutOverInput
    match_current_over?: CricketMatchUncheckedCreateNestedManyWithoutCurrentOverInput
  }

  export type CricketOverCreateOrConnectWithoutMatchInput = {
    where: CricketOverWhereUniqueInput
    create: XOR<CricketOverCreateWithoutMatchInput, CricketOverUncheckedCreateWithoutMatchInput>
  }

  export type CricketOverCreateManyMatchInputEnvelope = {
    data: CricketOverCreateManyMatchInput | CricketOverCreateManyMatchInput[]
    skipDuplicates?: boolean
  }

  export type CricketMatchPlayerBattingScoreCreateWithoutMatchInput = {
    sis_id?: string
    runs?: number
    balls?: number
    fours?: number
    sixes?: number
    strikeRate?: number
    out?: boolean
    played?: boolean
    wicketType?: string | null
    player?: CricketPlayerCreateNestedOneWithoutBatting_score_playerInput
    team: CricketTeamCreateNestedOneWithoutCricket_match_player_batting_scoreInput
    match_batters?: CricketTeamMatchDataCreateNestedManyWithoutBattersInput
    over_striker?: CricketOverCreateNestedManyWithoutStrikerScoreInput
    over_non_striker?: CricketOverCreateNestedManyWithoutNonStrikerScoreInput
  }

  export type CricketMatchPlayerBattingScoreUncheckedCreateWithoutMatchInput = {
    sis_id?: string
    runs?: number
    balls?: number
    fours?: number
    sixes?: number
    strikeRate?: number
    out?: boolean
    played?: boolean
    wicketType?: string | null
    playerId?: string | null
    teamId: string
    match_batters?: CricketTeamMatchDataUncheckedCreateNestedManyWithoutBattersInput
    over_striker?: CricketOverUncheckedCreateNestedManyWithoutStrikerScoreInput
    over_non_striker?: CricketOverUncheckedCreateNestedManyWithoutNonStrikerScoreInput
  }

  export type CricketMatchPlayerBattingScoreCreateOrConnectWithoutMatchInput = {
    where: CricketMatchPlayerBattingScoreWhereUniqueInput
    create: XOR<CricketMatchPlayerBattingScoreCreateWithoutMatchInput, CricketMatchPlayerBattingScoreUncheckedCreateWithoutMatchInput>
  }

  export type CricketMatchPlayerBattingScoreCreateManyMatchInputEnvelope = {
    data: CricketMatchPlayerBattingScoreCreateManyMatchInput | CricketMatchPlayerBattingScoreCreateManyMatchInput[]
    skipDuplicates?: boolean
  }

  export type CricketMatchPlayerBowlingScoreCreateWithoutMatchInput = {
    sis_id?: string
    runs?: number
    balls?: number
    fours?: number
    sixes?: number
    played?: boolean
    wickets?: number
    player?: CricketPlayerCreateNestedOneWithoutBowling_score_playerInput
    team: CricketTeamCreateNestedOneWithoutCricket_match_player_bowling_scoreInput
    match_bowlers?: CricketTeamMatchDataCreateNestedManyWithoutBowlersInput
    over_bowler?: CricketOverCreateNestedManyWithoutBowlerScoreInput
  }

  export type CricketMatchPlayerBowlingScoreUncheckedCreateWithoutMatchInput = {
    sis_id?: string
    runs?: number
    balls?: number
    fours?: number
    sixes?: number
    played?: boolean
    wickets?: number
    playerId?: string | null
    teamId: string
    match_bowlers?: CricketTeamMatchDataUncheckedCreateNestedManyWithoutBowlersInput
    over_bowler?: CricketOverUncheckedCreateNestedManyWithoutBowlerScoreInput
  }

  export type CricketMatchPlayerBowlingScoreCreateOrConnectWithoutMatchInput = {
    where: CricketMatchPlayerBowlingScoreWhereUniqueInput
    create: XOR<CricketMatchPlayerBowlingScoreCreateWithoutMatchInput, CricketMatchPlayerBowlingScoreUncheckedCreateWithoutMatchInput>
  }

  export type CricketMatchPlayerBowlingScoreCreateManyMatchInputEnvelope = {
    data: CricketMatchPlayerBowlingScoreCreateManyMatchInput | CricketMatchPlayerBowlingScoreCreateManyMatchInput[]
    skipDuplicates?: boolean
  }

  export type CricketTeamUpsertWithoutToss_winning_teamInput = {
    update: XOR<CricketTeamUpdateWithoutToss_winning_teamInput, CricketTeamUncheckedUpdateWithoutToss_winning_teamInput>
    create: XOR<CricketTeamCreateWithoutToss_winning_teamInput, CricketTeamUncheckedCreateWithoutToss_winning_teamInput>
    where?: CricketTeamWhereInput
  }

  export type CricketTeamUpdateToOneWithWhereWithoutToss_winning_teamInput = {
    where?: CricketTeamWhereInput
    data: XOR<CricketTeamUpdateWithoutToss_winning_teamInput, CricketTeamUncheckedUpdateWithoutToss_winning_teamInput>
  }

  export type CricketTeamUpdateWithoutToss_winning_teamInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    players?: CricketPlayerUpdateManyWithoutTeam_playersNestedInput
    winning_team?: CricketMatchUpdateManyWithoutWonByTeamNestedInput
    player_team?: CricketPlayerUpdateManyWithoutTeamNestedInput
    cricket_match_teamData?: CricketTeamMatchDataUpdateManyWithoutTeamNestedInput
    cricket_match_player_batting_score?: CricketMatchPlayerBattingScoreUpdateManyWithoutTeamNestedInput
    cricket_match_player_bowling_score?: CricketMatchPlayerBowlingScoreUpdateManyWithoutTeamNestedInput
    CricketMatchTeamA?: CricketMatchUpdateManyWithoutTeamANestedInput
    CricketMatchTeamB?: CricketMatchUpdateManyWithoutTeamBNestedInput
  }

  export type CricketTeamUncheckedUpdateWithoutToss_winning_teamInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    players?: CricketPlayerUncheckedUpdateManyWithoutTeam_playersNestedInput
    winning_team?: CricketMatchUncheckedUpdateManyWithoutWonByTeamNestedInput
    player_team?: CricketPlayerUncheckedUpdateManyWithoutTeamNestedInput
    cricket_match_teamData?: CricketTeamMatchDataUncheckedUpdateManyWithoutTeamNestedInput
    cricket_match_player_batting_score?: CricketMatchPlayerBattingScoreUncheckedUpdateManyWithoutTeamNestedInput
    cricket_match_player_bowling_score?: CricketMatchPlayerBowlingScoreUncheckedUpdateManyWithoutTeamNestedInput
    CricketMatchTeamA?: CricketMatchUncheckedUpdateManyWithoutTeamANestedInput
    CricketMatchTeamB?: CricketMatchUncheckedUpdateManyWithoutTeamBNestedInput
  }

  export type CricketOverUpsertWithoutMatch_current_overInput = {
    update: XOR<CricketOverUpdateWithoutMatch_current_overInput, CricketOverUncheckedUpdateWithoutMatch_current_overInput>
    create: XOR<CricketOverCreateWithoutMatch_current_overInput, CricketOverUncheckedCreateWithoutMatch_current_overInput>
    where?: CricketOverWhereInput
  }

  export type CricketOverUpdateToOneWithWhereWithoutMatch_current_overInput = {
    where?: CricketOverWhereInput
    data: XOR<CricketOverUpdateWithoutMatch_current_overInput, CricketOverUncheckedUpdateWithoutMatch_current_overInput>
  }

  export type CricketOverUpdateWithoutMatch_current_overInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    runs?: IntFieldUpdateOperationsInput | number
    wickets?: IntFieldUpdateOperationsInput | number
    totalBalls?: IntFieldUpdateOperationsInput | number
    validBalls?: IntFieldUpdateOperationsInput | number
    match?: CricketMatchUpdateOneRequiredWithoutOver_matchNestedInput
    strikerScore?: CricketMatchPlayerBattingScoreUpdateOneRequiredWithoutOver_strikerNestedInput
    nonStrikerScore?: CricketMatchPlayerBattingScoreUpdateOneRequiredWithoutOver_non_strikerNestedInput
    bowlerScore?: CricketMatchPlayerBowlingScoreUpdateOneRequiredWithoutOver_bowlerNestedInput
    balls?: CricketOverBallUpdateManyWithoutOverNestedInput
  }

  export type CricketOverUncheckedUpdateWithoutMatch_current_overInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    matchId?: StringFieldUpdateOperationsInput | string
    runs?: IntFieldUpdateOperationsInput | number
    wickets?: IntFieldUpdateOperationsInput | number
    totalBalls?: IntFieldUpdateOperationsInput | number
    validBalls?: IntFieldUpdateOperationsInput | number
    strikerScoreId?: StringFieldUpdateOperationsInput | string
    nonStrikerScoreId?: StringFieldUpdateOperationsInput | string
    bowlerScoreId?: StringFieldUpdateOperationsInput | string
    balls?: CricketOverBallUncheckedUpdateManyWithoutOverNestedInput
  }

  export type CricketTeamUpsertWithoutWinning_teamInput = {
    update: XOR<CricketTeamUpdateWithoutWinning_teamInput, CricketTeamUncheckedUpdateWithoutWinning_teamInput>
    create: XOR<CricketTeamCreateWithoutWinning_teamInput, CricketTeamUncheckedCreateWithoutWinning_teamInput>
    where?: CricketTeamWhereInput
  }

  export type CricketTeamUpdateToOneWithWhereWithoutWinning_teamInput = {
    where?: CricketTeamWhereInput
    data: XOR<CricketTeamUpdateWithoutWinning_teamInput, CricketTeamUncheckedUpdateWithoutWinning_teamInput>
  }

  export type CricketTeamUpdateWithoutWinning_teamInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    players?: CricketPlayerUpdateManyWithoutTeam_playersNestedInput
    toss_winning_team?: CricketMatchUpdateManyWithoutTossWonByTeamNestedInput
    player_team?: CricketPlayerUpdateManyWithoutTeamNestedInput
    cricket_match_teamData?: CricketTeamMatchDataUpdateManyWithoutTeamNestedInput
    cricket_match_player_batting_score?: CricketMatchPlayerBattingScoreUpdateManyWithoutTeamNestedInput
    cricket_match_player_bowling_score?: CricketMatchPlayerBowlingScoreUpdateManyWithoutTeamNestedInput
    CricketMatchTeamA?: CricketMatchUpdateManyWithoutTeamANestedInput
    CricketMatchTeamB?: CricketMatchUpdateManyWithoutTeamBNestedInput
  }

  export type CricketTeamUncheckedUpdateWithoutWinning_teamInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    players?: CricketPlayerUncheckedUpdateManyWithoutTeam_playersNestedInput
    toss_winning_team?: CricketMatchUncheckedUpdateManyWithoutTossWonByTeamNestedInput
    player_team?: CricketPlayerUncheckedUpdateManyWithoutTeamNestedInput
    cricket_match_teamData?: CricketTeamMatchDataUncheckedUpdateManyWithoutTeamNestedInput
    cricket_match_player_batting_score?: CricketMatchPlayerBattingScoreUncheckedUpdateManyWithoutTeamNestedInput
    cricket_match_player_bowling_score?: CricketMatchPlayerBowlingScoreUncheckedUpdateManyWithoutTeamNestedInput
    CricketMatchTeamA?: CricketMatchUncheckedUpdateManyWithoutTeamANestedInput
    CricketMatchTeamB?: CricketMatchUncheckedUpdateManyWithoutTeamBNestedInput
  }

  export type CricketTeamUpsertWithoutCricketMatchTeamAInput = {
    update: XOR<CricketTeamUpdateWithoutCricketMatchTeamAInput, CricketTeamUncheckedUpdateWithoutCricketMatchTeamAInput>
    create: XOR<CricketTeamCreateWithoutCricketMatchTeamAInput, CricketTeamUncheckedCreateWithoutCricketMatchTeamAInput>
    where?: CricketTeamWhereInput
  }

  export type CricketTeamUpdateToOneWithWhereWithoutCricketMatchTeamAInput = {
    where?: CricketTeamWhereInput
    data: XOR<CricketTeamUpdateWithoutCricketMatchTeamAInput, CricketTeamUncheckedUpdateWithoutCricketMatchTeamAInput>
  }

  export type CricketTeamUpdateWithoutCricketMatchTeamAInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    players?: CricketPlayerUpdateManyWithoutTeam_playersNestedInput
    winning_team?: CricketMatchUpdateManyWithoutWonByTeamNestedInput
    toss_winning_team?: CricketMatchUpdateManyWithoutTossWonByTeamNestedInput
    player_team?: CricketPlayerUpdateManyWithoutTeamNestedInput
    cricket_match_teamData?: CricketTeamMatchDataUpdateManyWithoutTeamNestedInput
    cricket_match_player_batting_score?: CricketMatchPlayerBattingScoreUpdateManyWithoutTeamNestedInput
    cricket_match_player_bowling_score?: CricketMatchPlayerBowlingScoreUpdateManyWithoutTeamNestedInput
    CricketMatchTeamB?: CricketMatchUpdateManyWithoutTeamBNestedInput
  }

  export type CricketTeamUncheckedUpdateWithoutCricketMatchTeamAInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    players?: CricketPlayerUncheckedUpdateManyWithoutTeam_playersNestedInput
    winning_team?: CricketMatchUncheckedUpdateManyWithoutWonByTeamNestedInput
    toss_winning_team?: CricketMatchUncheckedUpdateManyWithoutTossWonByTeamNestedInput
    player_team?: CricketPlayerUncheckedUpdateManyWithoutTeamNestedInput
    cricket_match_teamData?: CricketTeamMatchDataUncheckedUpdateManyWithoutTeamNestedInput
    cricket_match_player_batting_score?: CricketMatchPlayerBattingScoreUncheckedUpdateManyWithoutTeamNestedInput
    cricket_match_player_bowling_score?: CricketMatchPlayerBowlingScoreUncheckedUpdateManyWithoutTeamNestedInput
    CricketMatchTeamB?: CricketMatchUncheckedUpdateManyWithoutTeamBNestedInput
  }

  export type CricketTeamUpsertWithoutCricketMatchTeamBInput = {
    update: XOR<CricketTeamUpdateWithoutCricketMatchTeamBInput, CricketTeamUncheckedUpdateWithoutCricketMatchTeamBInput>
    create: XOR<CricketTeamCreateWithoutCricketMatchTeamBInput, CricketTeamUncheckedCreateWithoutCricketMatchTeamBInput>
    where?: CricketTeamWhereInput
  }

  export type CricketTeamUpdateToOneWithWhereWithoutCricketMatchTeamBInput = {
    where?: CricketTeamWhereInput
    data: XOR<CricketTeamUpdateWithoutCricketMatchTeamBInput, CricketTeamUncheckedUpdateWithoutCricketMatchTeamBInput>
  }

  export type CricketTeamUpdateWithoutCricketMatchTeamBInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    players?: CricketPlayerUpdateManyWithoutTeam_playersNestedInput
    winning_team?: CricketMatchUpdateManyWithoutWonByTeamNestedInput
    toss_winning_team?: CricketMatchUpdateManyWithoutTossWonByTeamNestedInput
    player_team?: CricketPlayerUpdateManyWithoutTeamNestedInput
    cricket_match_teamData?: CricketTeamMatchDataUpdateManyWithoutTeamNestedInput
    cricket_match_player_batting_score?: CricketMatchPlayerBattingScoreUpdateManyWithoutTeamNestedInput
    cricket_match_player_bowling_score?: CricketMatchPlayerBowlingScoreUpdateManyWithoutTeamNestedInput
    CricketMatchTeamA?: CricketMatchUpdateManyWithoutTeamANestedInput
  }

  export type CricketTeamUncheckedUpdateWithoutCricketMatchTeamBInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    players?: CricketPlayerUncheckedUpdateManyWithoutTeam_playersNestedInput
    winning_team?: CricketMatchUncheckedUpdateManyWithoutWonByTeamNestedInput
    toss_winning_team?: CricketMatchUncheckedUpdateManyWithoutTossWonByTeamNestedInput
    player_team?: CricketPlayerUncheckedUpdateManyWithoutTeamNestedInput
    cricket_match_teamData?: CricketTeamMatchDataUncheckedUpdateManyWithoutTeamNestedInput
    cricket_match_player_batting_score?: CricketMatchPlayerBattingScoreUncheckedUpdateManyWithoutTeamNestedInput
    cricket_match_player_bowling_score?: CricketMatchPlayerBowlingScoreUncheckedUpdateManyWithoutTeamNestedInput
    CricketMatchTeamA?: CricketMatchUncheckedUpdateManyWithoutTeamANestedInput
  }

  export type CricketTeamMatchDataUpsertWithoutCricketMatchTeamAInput = {
    update: XOR<CricketTeamMatchDataUpdateWithoutCricketMatchTeamAInput, CricketTeamMatchDataUncheckedUpdateWithoutCricketMatchTeamAInput>
    create: XOR<CricketTeamMatchDataCreateWithoutCricketMatchTeamAInput, CricketTeamMatchDataUncheckedCreateWithoutCricketMatchTeamAInput>
    where?: CricketTeamMatchDataWhereInput
  }

  export type CricketTeamMatchDataUpdateToOneWithWhereWithoutCricketMatchTeamAInput = {
    where?: CricketTeamMatchDataWhereInput
    data: XOR<CricketTeamMatchDataUpdateWithoutCricketMatchTeamAInput, CricketTeamMatchDataUncheckedUpdateWithoutCricketMatchTeamAInput>
  }

  export type CricketTeamMatchDataUpdateWithoutCricketMatchTeamAInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    matchId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    runs?: IntFieldUpdateOperationsInput | number
    wideRuns?: IntFieldUpdateOperationsInput | number
    nbRuns?: IntFieldUpdateOperationsInput | number
    byeRuns?: IntFieldUpdateOperationsInput | number
    lbRuns?: IntFieldUpdateOperationsInput | number
    wickets?: IntFieldUpdateOperationsInput | number
    balls?: IntFieldUpdateOperationsInput | number
    batters?: CricketMatchPlayerBattingScoreUpdateManyWithoutMatch_battersNestedInput
    bowlers?: CricketMatchPlayerBowlingScoreUpdateManyWithoutMatch_bowlersNestedInput
    team?: CricketTeamUpdateOneWithoutCricket_match_teamDataNestedInput
    cricketMatchTeamB?: CricketMatchUpdateManyWithoutTeamBScoreNestedInput
    matchBttingTeam?: CricketMatchUpdateManyWithoutBattingTeamNestedInput
    matchBowlingTeam?: CricketMatchUpdateManyWithoutBowlingTeamNestedInput
  }

  export type CricketTeamMatchDataUncheckedUpdateWithoutCricketMatchTeamAInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    matchId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    runs?: IntFieldUpdateOperationsInput | number
    wideRuns?: IntFieldUpdateOperationsInput | number
    nbRuns?: IntFieldUpdateOperationsInput | number
    byeRuns?: IntFieldUpdateOperationsInput | number
    lbRuns?: IntFieldUpdateOperationsInput | number
    wickets?: IntFieldUpdateOperationsInput | number
    balls?: IntFieldUpdateOperationsInput | number
    batters?: CricketMatchPlayerBattingScoreUncheckedUpdateManyWithoutMatch_battersNestedInput
    bowlers?: CricketMatchPlayerBowlingScoreUncheckedUpdateManyWithoutMatch_bowlersNestedInput
    cricketMatchTeamB?: CricketMatchUncheckedUpdateManyWithoutTeamBScoreNestedInput
    matchBttingTeam?: CricketMatchUncheckedUpdateManyWithoutBattingTeamNestedInput
    matchBowlingTeam?: CricketMatchUncheckedUpdateManyWithoutBowlingTeamNestedInput
  }

  export type CricketTeamMatchDataUpsertWithoutCricketMatchTeamBInput = {
    update: XOR<CricketTeamMatchDataUpdateWithoutCricketMatchTeamBInput, CricketTeamMatchDataUncheckedUpdateWithoutCricketMatchTeamBInput>
    create: XOR<CricketTeamMatchDataCreateWithoutCricketMatchTeamBInput, CricketTeamMatchDataUncheckedCreateWithoutCricketMatchTeamBInput>
    where?: CricketTeamMatchDataWhereInput
  }

  export type CricketTeamMatchDataUpdateToOneWithWhereWithoutCricketMatchTeamBInput = {
    where?: CricketTeamMatchDataWhereInput
    data: XOR<CricketTeamMatchDataUpdateWithoutCricketMatchTeamBInput, CricketTeamMatchDataUncheckedUpdateWithoutCricketMatchTeamBInput>
  }

  export type CricketTeamMatchDataUpdateWithoutCricketMatchTeamBInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    matchId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    runs?: IntFieldUpdateOperationsInput | number
    wideRuns?: IntFieldUpdateOperationsInput | number
    nbRuns?: IntFieldUpdateOperationsInput | number
    byeRuns?: IntFieldUpdateOperationsInput | number
    lbRuns?: IntFieldUpdateOperationsInput | number
    wickets?: IntFieldUpdateOperationsInput | number
    balls?: IntFieldUpdateOperationsInput | number
    batters?: CricketMatchPlayerBattingScoreUpdateManyWithoutMatch_battersNestedInput
    bowlers?: CricketMatchPlayerBowlingScoreUpdateManyWithoutMatch_bowlersNestedInput
    team?: CricketTeamUpdateOneWithoutCricket_match_teamDataNestedInput
    cricketMatchTeamA?: CricketMatchUpdateManyWithoutTeamAScoreNestedInput
    matchBttingTeam?: CricketMatchUpdateManyWithoutBattingTeamNestedInput
    matchBowlingTeam?: CricketMatchUpdateManyWithoutBowlingTeamNestedInput
  }

  export type CricketTeamMatchDataUncheckedUpdateWithoutCricketMatchTeamBInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    matchId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    runs?: IntFieldUpdateOperationsInput | number
    wideRuns?: IntFieldUpdateOperationsInput | number
    nbRuns?: IntFieldUpdateOperationsInput | number
    byeRuns?: IntFieldUpdateOperationsInput | number
    lbRuns?: IntFieldUpdateOperationsInput | number
    wickets?: IntFieldUpdateOperationsInput | number
    balls?: IntFieldUpdateOperationsInput | number
    batters?: CricketMatchPlayerBattingScoreUncheckedUpdateManyWithoutMatch_battersNestedInput
    bowlers?: CricketMatchPlayerBowlingScoreUncheckedUpdateManyWithoutMatch_bowlersNestedInput
    cricketMatchTeamA?: CricketMatchUncheckedUpdateManyWithoutTeamAScoreNestedInput
    matchBttingTeam?: CricketMatchUncheckedUpdateManyWithoutBattingTeamNestedInput
    matchBowlingTeam?: CricketMatchUncheckedUpdateManyWithoutBowlingTeamNestedInput
  }

  export type CricketTeamMatchDataUpsertWithoutMatchBttingTeamInput = {
    update: XOR<CricketTeamMatchDataUpdateWithoutMatchBttingTeamInput, CricketTeamMatchDataUncheckedUpdateWithoutMatchBttingTeamInput>
    create: XOR<CricketTeamMatchDataCreateWithoutMatchBttingTeamInput, CricketTeamMatchDataUncheckedCreateWithoutMatchBttingTeamInput>
    where?: CricketTeamMatchDataWhereInput
  }

  export type CricketTeamMatchDataUpdateToOneWithWhereWithoutMatchBttingTeamInput = {
    where?: CricketTeamMatchDataWhereInput
    data: XOR<CricketTeamMatchDataUpdateWithoutMatchBttingTeamInput, CricketTeamMatchDataUncheckedUpdateWithoutMatchBttingTeamInput>
  }

  export type CricketTeamMatchDataUpdateWithoutMatchBttingTeamInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    matchId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    runs?: IntFieldUpdateOperationsInput | number
    wideRuns?: IntFieldUpdateOperationsInput | number
    nbRuns?: IntFieldUpdateOperationsInput | number
    byeRuns?: IntFieldUpdateOperationsInput | number
    lbRuns?: IntFieldUpdateOperationsInput | number
    wickets?: IntFieldUpdateOperationsInput | number
    balls?: IntFieldUpdateOperationsInput | number
    batters?: CricketMatchPlayerBattingScoreUpdateManyWithoutMatch_battersNestedInput
    bowlers?: CricketMatchPlayerBowlingScoreUpdateManyWithoutMatch_bowlersNestedInput
    team?: CricketTeamUpdateOneWithoutCricket_match_teamDataNestedInput
    cricketMatchTeamA?: CricketMatchUpdateManyWithoutTeamAScoreNestedInput
    cricketMatchTeamB?: CricketMatchUpdateManyWithoutTeamBScoreNestedInput
    matchBowlingTeam?: CricketMatchUpdateManyWithoutBowlingTeamNestedInput
  }

  export type CricketTeamMatchDataUncheckedUpdateWithoutMatchBttingTeamInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    matchId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    runs?: IntFieldUpdateOperationsInput | number
    wideRuns?: IntFieldUpdateOperationsInput | number
    nbRuns?: IntFieldUpdateOperationsInput | number
    byeRuns?: IntFieldUpdateOperationsInput | number
    lbRuns?: IntFieldUpdateOperationsInput | number
    wickets?: IntFieldUpdateOperationsInput | number
    balls?: IntFieldUpdateOperationsInput | number
    batters?: CricketMatchPlayerBattingScoreUncheckedUpdateManyWithoutMatch_battersNestedInput
    bowlers?: CricketMatchPlayerBowlingScoreUncheckedUpdateManyWithoutMatch_bowlersNestedInput
    cricketMatchTeamA?: CricketMatchUncheckedUpdateManyWithoutTeamAScoreNestedInput
    cricketMatchTeamB?: CricketMatchUncheckedUpdateManyWithoutTeamBScoreNestedInput
    matchBowlingTeam?: CricketMatchUncheckedUpdateManyWithoutBowlingTeamNestedInput
  }

  export type CricketTeamMatchDataUpsertWithoutMatchBowlingTeamInput = {
    update: XOR<CricketTeamMatchDataUpdateWithoutMatchBowlingTeamInput, CricketTeamMatchDataUncheckedUpdateWithoutMatchBowlingTeamInput>
    create: XOR<CricketTeamMatchDataCreateWithoutMatchBowlingTeamInput, CricketTeamMatchDataUncheckedCreateWithoutMatchBowlingTeamInput>
    where?: CricketTeamMatchDataWhereInput
  }

  export type CricketTeamMatchDataUpdateToOneWithWhereWithoutMatchBowlingTeamInput = {
    where?: CricketTeamMatchDataWhereInput
    data: XOR<CricketTeamMatchDataUpdateWithoutMatchBowlingTeamInput, CricketTeamMatchDataUncheckedUpdateWithoutMatchBowlingTeamInput>
  }

  export type CricketTeamMatchDataUpdateWithoutMatchBowlingTeamInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    matchId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    runs?: IntFieldUpdateOperationsInput | number
    wideRuns?: IntFieldUpdateOperationsInput | number
    nbRuns?: IntFieldUpdateOperationsInput | number
    byeRuns?: IntFieldUpdateOperationsInput | number
    lbRuns?: IntFieldUpdateOperationsInput | number
    wickets?: IntFieldUpdateOperationsInput | number
    balls?: IntFieldUpdateOperationsInput | number
    batters?: CricketMatchPlayerBattingScoreUpdateManyWithoutMatch_battersNestedInput
    bowlers?: CricketMatchPlayerBowlingScoreUpdateManyWithoutMatch_bowlersNestedInput
    team?: CricketTeamUpdateOneWithoutCricket_match_teamDataNestedInput
    cricketMatchTeamA?: CricketMatchUpdateManyWithoutTeamAScoreNestedInput
    cricketMatchTeamB?: CricketMatchUpdateManyWithoutTeamBScoreNestedInput
    matchBttingTeam?: CricketMatchUpdateManyWithoutBattingTeamNestedInput
  }

  export type CricketTeamMatchDataUncheckedUpdateWithoutMatchBowlingTeamInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    matchId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    runs?: IntFieldUpdateOperationsInput | number
    wideRuns?: IntFieldUpdateOperationsInput | number
    nbRuns?: IntFieldUpdateOperationsInput | number
    byeRuns?: IntFieldUpdateOperationsInput | number
    lbRuns?: IntFieldUpdateOperationsInput | number
    wickets?: IntFieldUpdateOperationsInput | number
    balls?: IntFieldUpdateOperationsInput | number
    batters?: CricketMatchPlayerBattingScoreUncheckedUpdateManyWithoutMatch_battersNestedInput
    bowlers?: CricketMatchPlayerBowlingScoreUncheckedUpdateManyWithoutMatch_bowlersNestedInput
    cricketMatchTeamA?: CricketMatchUncheckedUpdateManyWithoutTeamAScoreNestedInput
    cricketMatchTeamB?: CricketMatchUncheckedUpdateManyWithoutTeamBScoreNestedInput
    matchBttingTeam?: CricketMatchUncheckedUpdateManyWithoutBattingTeamNestedInput
  }

  export type CricketPlayerUpsertWithWhereUniqueWithoutMatchesInput = {
    where: CricketPlayerWhereUniqueInput
    update: XOR<CricketPlayerUpdateWithoutMatchesInput, CricketPlayerUncheckedUpdateWithoutMatchesInput>
    create: XOR<CricketPlayerCreateWithoutMatchesInput, CricketPlayerUncheckedCreateWithoutMatchesInput>
  }

  export type CricketPlayerUpdateWithWhereUniqueWithoutMatchesInput = {
    where: CricketPlayerWhereUniqueInput
    data: XOR<CricketPlayerUpdateWithoutMatchesInput, CricketPlayerUncheckedUpdateWithoutMatchesInput>
  }

  export type CricketPlayerUpdateManyWithWhereWithoutMatchesInput = {
    where: CricketPlayerScalarWhereInput
    data: XOR<CricketPlayerUpdateManyMutationInput, CricketPlayerUncheckedUpdateManyWithoutMatchesInput>
  }

  export type CricketOverUpsertWithWhereUniqueWithoutMatchInput = {
    where: CricketOverWhereUniqueInput
    update: XOR<CricketOverUpdateWithoutMatchInput, CricketOverUncheckedUpdateWithoutMatchInput>
    create: XOR<CricketOverCreateWithoutMatchInput, CricketOverUncheckedCreateWithoutMatchInput>
  }

  export type CricketOverUpdateWithWhereUniqueWithoutMatchInput = {
    where: CricketOverWhereUniqueInput
    data: XOR<CricketOverUpdateWithoutMatchInput, CricketOverUncheckedUpdateWithoutMatchInput>
  }

  export type CricketOverUpdateManyWithWhereWithoutMatchInput = {
    where: CricketOverScalarWhereInput
    data: XOR<CricketOverUpdateManyMutationInput, CricketOverUncheckedUpdateManyWithoutMatchInput>
  }

  export type CricketOverScalarWhereInput = {
    AND?: CricketOverScalarWhereInput | CricketOverScalarWhereInput[]
    OR?: CricketOverScalarWhereInput[]
    NOT?: CricketOverScalarWhereInput | CricketOverScalarWhereInput[]
    sis_id?: StringFilter<"CricketOver"> | string
    matchId?: StringFilter<"CricketOver"> | string
    runs?: IntFilter<"CricketOver"> | number
    wickets?: IntFilter<"CricketOver"> | number
    totalBalls?: IntFilter<"CricketOver"> | number
    validBalls?: IntFilter<"CricketOver"> | number
    strikerScoreId?: StringFilter<"CricketOver"> | string
    nonStrikerScoreId?: StringFilter<"CricketOver"> | string
    bowlerScoreId?: StringFilter<"CricketOver"> | string
  }

  export type CricketMatchPlayerBattingScoreUpsertWithWhereUniqueWithoutMatchInput = {
    where: CricketMatchPlayerBattingScoreWhereUniqueInput
    update: XOR<CricketMatchPlayerBattingScoreUpdateWithoutMatchInput, CricketMatchPlayerBattingScoreUncheckedUpdateWithoutMatchInput>
    create: XOR<CricketMatchPlayerBattingScoreCreateWithoutMatchInput, CricketMatchPlayerBattingScoreUncheckedCreateWithoutMatchInput>
  }

  export type CricketMatchPlayerBattingScoreUpdateWithWhereUniqueWithoutMatchInput = {
    where: CricketMatchPlayerBattingScoreWhereUniqueInput
    data: XOR<CricketMatchPlayerBattingScoreUpdateWithoutMatchInput, CricketMatchPlayerBattingScoreUncheckedUpdateWithoutMatchInput>
  }

  export type CricketMatchPlayerBattingScoreUpdateManyWithWhereWithoutMatchInput = {
    where: CricketMatchPlayerBattingScoreScalarWhereInput
    data: XOR<CricketMatchPlayerBattingScoreUpdateManyMutationInput, CricketMatchPlayerBattingScoreUncheckedUpdateManyWithoutMatchInput>
  }

  export type CricketMatchPlayerBowlingScoreUpsertWithWhereUniqueWithoutMatchInput = {
    where: CricketMatchPlayerBowlingScoreWhereUniqueInput
    update: XOR<CricketMatchPlayerBowlingScoreUpdateWithoutMatchInput, CricketMatchPlayerBowlingScoreUncheckedUpdateWithoutMatchInput>
    create: XOR<CricketMatchPlayerBowlingScoreCreateWithoutMatchInput, CricketMatchPlayerBowlingScoreUncheckedCreateWithoutMatchInput>
  }

  export type CricketMatchPlayerBowlingScoreUpdateWithWhereUniqueWithoutMatchInput = {
    where: CricketMatchPlayerBowlingScoreWhereUniqueInput
    data: XOR<CricketMatchPlayerBowlingScoreUpdateWithoutMatchInput, CricketMatchPlayerBowlingScoreUncheckedUpdateWithoutMatchInput>
  }

  export type CricketMatchPlayerBowlingScoreUpdateManyWithWhereWithoutMatchInput = {
    where: CricketMatchPlayerBowlingScoreScalarWhereInput
    data: XOR<CricketMatchPlayerBowlingScoreUpdateManyMutationInput, CricketMatchPlayerBowlingScoreUncheckedUpdateManyWithoutMatchInput>
  }

  export type CricketMatchPlayerBattingScoreCreateWithoutMatch_battersInput = {
    sis_id?: string
    runs?: number
    balls?: number
    fours?: number
    sixes?: number
    strikeRate?: number
    out?: boolean
    played?: boolean
    wicketType?: string | null
    player?: CricketPlayerCreateNestedOneWithoutBatting_score_playerInput
    match: CricketMatchCreateNestedOneWithoutTeam_batting_scoreInput
    team: CricketTeamCreateNestedOneWithoutCricket_match_player_batting_scoreInput
    over_striker?: CricketOverCreateNestedManyWithoutStrikerScoreInput
    over_non_striker?: CricketOverCreateNestedManyWithoutNonStrikerScoreInput
  }

  export type CricketMatchPlayerBattingScoreUncheckedCreateWithoutMatch_battersInput = {
    sis_id?: string
    runs?: number
    balls?: number
    fours?: number
    sixes?: number
    strikeRate?: number
    out?: boolean
    played?: boolean
    wicketType?: string | null
    playerId?: string | null
    matchId: string
    teamId: string
    over_striker?: CricketOverUncheckedCreateNestedManyWithoutStrikerScoreInput
    over_non_striker?: CricketOverUncheckedCreateNestedManyWithoutNonStrikerScoreInput
  }

  export type CricketMatchPlayerBattingScoreCreateOrConnectWithoutMatch_battersInput = {
    where: CricketMatchPlayerBattingScoreWhereUniqueInput
    create: XOR<CricketMatchPlayerBattingScoreCreateWithoutMatch_battersInput, CricketMatchPlayerBattingScoreUncheckedCreateWithoutMatch_battersInput>
  }

  export type CricketMatchPlayerBowlingScoreCreateWithoutMatch_bowlersInput = {
    sis_id?: string
    runs?: number
    balls?: number
    fours?: number
    sixes?: number
    played?: boolean
    wickets?: number
    player?: CricketPlayerCreateNestedOneWithoutBowling_score_playerInput
    match: CricketMatchCreateNestedOneWithoutTeam_bowling_scoreInput
    team: CricketTeamCreateNestedOneWithoutCricket_match_player_bowling_scoreInput
    over_bowler?: CricketOverCreateNestedManyWithoutBowlerScoreInput
  }

  export type CricketMatchPlayerBowlingScoreUncheckedCreateWithoutMatch_bowlersInput = {
    sis_id?: string
    runs?: number
    balls?: number
    fours?: number
    sixes?: number
    played?: boolean
    wickets?: number
    playerId?: string | null
    matchId: string
    teamId: string
    over_bowler?: CricketOverUncheckedCreateNestedManyWithoutBowlerScoreInput
  }

  export type CricketMatchPlayerBowlingScoreCreateOrConnectWithoutMatch_bowlersInput = {
    where: CricketMatchPlayerBowlingScoreWhereUniqueInput
    create: XOR<CricketMatchPlayerBowlingScoreCreateWithoutMatch_bowlersInput, CricketMatchPlayerBowlingScoreUncheckedCreateWithoutMatch_bowlersInput>
  }

  export type CricketTeamCreateWithoutCricket_match_teamDataInput = {
    sis_id?: string
    name: string
    year: string
    players?: CricketPlayerCreateNestedManyWithoutTeam_playersInput
    winning_team?: CricketMatchCreateNestedManyWithoutWonByTeamInput
    toss_winning_team?: CricketMatchCreateNestedManyWithoutTossWonByTeamInput
    player_team?: CricketPlayerCreateNestedManyWithoutTeamInput
    cricket_match_player_batting_score?: CricketMatchPlayerBattingScoreCreateNestedManyWithoutTeamInput
    cricket_match_player_bowling_score?: CricketMatchPlayerBowlingScoreCreateNestedManyWithoutTeamInput
    CricketMatchTeamA?: CricketMatchCreateNestedManyWithoutTeamAInput
    CricketMatchTeamB?: CricketMatchCreateNestedManyWithoutTeamBInput
  }

  export type CricketTeamUncheckedCreateWithoutCricket_match_teamDataInput = {
    sis_id?: string
    name: string
    year: string
    players?: CricketPlayerUncheckedCreateNestedManyWithoutTeam_playersInput
    winning_team?: CricketMatchUncheckedCreateNestedManyWithoutWonByTeamInput
    toss_winning_team?: CricketMatchUncheckedCreateNestedManyWithoutTossWonByTeamInput
    player_team?: CricketPlayerUncheckedCreateNestedManyWithoutTeamInput
    cricket_match_player_batting_score?: CricketMatchPlayerBattingScoreUncheckedCreateNestedManyWithoutTeamInput
    cricket_match_player_bowling_score?: CricketMatchPlayerBowlingScoreUncheckedCreateNestedManyWithoutTeamInput
    CricketMatchTeamA?: CricketMatchUncheckedCreateNestedManyWithoutTeamAInput
    CricketMatchTeamB?: CricketMatchUncheckedCreateNestedManyWithoutTeamBInput
  }

  export type CricketTeamCreateOrConnectWithoutCricket_match_teamDataInput = {
    where: CricketTeamWhereUniqueInput
    create: XOR<CricketTeamCreateWithoutCricket_match_teamDataInput, CricketTeamUncheckedCreateWithoutCricket_match_teamDataInput>
  }

  export type CricketMatchCreateWithoutTeamAScoreInput = {
    sis_id?: string
    played?: boolean
    tossDecision?: string | null
    date: Date | string
    venue?: string | null
    year: string
    dependency?: boolean
    dependentOn?: string | null
    team1Wickets?: number | null
    team2Wickets?: number | null
    team1Runs?: number | null
    team2Runs?: number | null
    team1Balls?: number | null
    team2Balls?: number | null
    overs?: number | null
    powerPlayOvers?: number | null
    overPerBowler?: number | null
    tossWonByTeam?: CricketTeamCreateNestedOneWithoutToss_winning_teamInput
    currentOver?: CricketOverCreateNestedOneWithoutMatch_current_overInput
    wonByTeam?: CricketTeamCreateNestedOneWithoutWinning_teamInput
    teamA?: CricketTeamCreateNestedOneWithoutCricketMatchTeamAInput
    teamB?: CricketTeamCreateNestedOneWithoutCricketMatchTeamBInput
    teamBScore?: CricketTeamMatchDataCreateNestedOneWithoutCricketMatchTeamBInput
    battingTeam?: CricketTeamMatchDataCreateNestedOneWithoutMatchBttingTeamInput
    bowlingTeam?: CricketTeamMatchDataCreateNestedOneWithoutMatchBowlingTeamInput
    players?: CricketPlayerCreateNestedManyWithoutMatchesInput
    over_match?: CricketOverCreateNestedManyWithoutMatchInput
    team_batting_score?: CricketMatchPlayerBattingScoreCreateNestedManyWithoutMatchInput
    team_bowling_score?: CricketMatchPlayerBowlingScoreCreateNestedManyWithoutMatchInput
  }

  export type CricketMatchUncheckedCreateWithoutTeamAScoreInput = {
    sis_id?: string
    played?: boolean
    tossWonBy?: string | null
    tossDecision?: string | null
    date: Date | string
    venue?: string | null
    year: string
    dependency?: boolean
    dependentOn?: string | null
    team1Wickets?: number | null
    team2Wickets?: number | null
    team1Runs?: number | null
    team2Runs?: number | null
    team1Balls?: number | null
    team2Balls?: number | null
    overs?: number | null
    powerPlayOvers?: number | null
    overPerBowler?: number | null
    currentOverId?: string | null
    wonBy?: string | null
    teamAId?: string | null
    teamBId?: string | null
    teamBScoreId?: string | null
    battingTeamScoreId?: string | null
    bowlingTeamScoreId?: string | null
    players?: CricketPlayerUncheckedCreateNestedManyWithoutMatchesInput
    over_match?: CricketOverUncheckedCreateNestedManyWithoutMatchInput
    team_batting_score?: CricketMatchPlayerBattingScoreUncheckedCreateNestedManyWithoutMatchInput
    team_bowling_score?: CricketMatchPlayerBowlingScoreUncheckedCreateNestedManyWithoutMatchInput
  }

  export type CricketMatchCreateOrConnectWithoutTeamAScoreInput = {
    where: CricketMatchWhereUniqueInput
    create: XOR<CricketMatchCreateWithoutTeamAScoreInput, CricketMatchUncheckedCreateWithoutTeamAScoreInput>
  }

  export type CricketMatchCreateManyTeamAScoreInputEnvelope = {
    data: CricketMatchCreateManyTeamAScoreInput | CricketMatchCreateManyTeamAScoreInput[]
    skipDuplicates?: boolean
  }

  export type CricketMatchCreateWithoutTeamBScoreInput = {
    sis_id?: string
    played?: boolean
    tossDecision?: string | null
    date: Date | string
    venue?: string | null
    year: string
    dependency?: boolean
    dependentOn?: string | null
    team1Wickets?: number | null
    team2Wickets?: number | null
    team1Runs?: number | null
    team2Runs?: number | null
    team1Balls?: number | null
    team2Balls?: number | null
    overs?: number | null
    powerPlayOvers?: number | null
    overPerBowler?: number | null
    tossWonByTeam?: CricketTeamCreateNestedOneWithoutToss_winning_teamInput
    currentOver?: CricketOverCreateNestedOneWithoutMatch_current_overInput
    wonByTeam?: CricketTeamCreateNestedOneWithoutWinning_teamInput
    teamA?: CricketTeamCreateNestedOneWithoutCricketMatchTeamAInput
    teamB?: CricketTeamCreateNestedOneWithoutCricketMatchTeamBInput
    teamAScore?: CricketTeamMatchDataCreateNestedOneWithoutCricketMatchTeamAInput
    battingTeam?: CricketTeamMatchDataCreateNestedOneWithoutMatchBttingTeamInput
    bowlingTeam?: CricketTeamMatchDataCreateNestedOneWithoutMatchBowlingTeamInput
    players?: CricketPlayerCreateNestedManyWithoutMatchesInput
    over_match?: CricketOverCreateNestedManyWithoutMatchInput
    team_batting_score?: CricketMatchPlayerBattingScoreCreateNestedManyWithoutMatchInput
    team_bowling_score?: CricketMatchPlayerBowlingScoreCreateNestedManyWithoutMatchInput
  }

  export type CricketMatchUncheckedCreateWithoutTeamBScoreInput = {
    sis_id?: string
    played?: boolean
    tossWonBy?: string | null
    tossDecision?: string | null
    date: Date | string
    venue?: string | null
    year: string
    dependency?: boolean
    dependentOn?: string | null
    team1Wickets?: number | null
    team2Wickets?: number | null
    team1Runs?: number | null
    team2Runs?: number | null
    team1Balls?: number | null
    team2Balls?: number | null
    overs?: number | null
    powerPlayOvers?: number | null
    overPerBowler?: number | null
    currentOverId?: string | null
    wonBy?: string | null
    teamAId?: string | null
    teamBId?: string | null
    teamAScoreId?: string | null
    battingTeamScoreId?: string | null
    bowlingTeamScoreId?: string | null
    players?: CricketPlayerUncheckedCreateNestedManyWithoutMatchesInput
    over_match?: CricketOverUncheckedCreateNestedManyWithoutMatchInput
    team_batting_score?: CricketMatchPlayerBattingScoreUncheckedCreateNestedManyWithoutMatchInput
    team_bowling_score?: CricketMatchPlayerBowlingScoreUncheckedCreateNestedManyWithoutMatchInput
  }

  export type CricketMatchCreateOrConnectWithoutTeamBScoreInput = {
    where: CricketMatchWhereUniqueInput
    create: XOR<CricketMatchCreateWithoutTeamBScoreInput, CricketMatchUncheckedCreateWithoutTeamBScoreInput>
  }

  export type CricketMatchCreateManyTeamBScoreInputEnvelope = {
    data: CricketMatchCreateManyTeamBScoreInput | CricketMatchCreateManyTeamBScoreInput[]
    skipDuplicates?: boolean
  }

  export type CricketMatchCreateWithoutBattingTeamInput = {
    sis_id?: string
    played?: boolean
    tossDecision?: string | null
    date: Date | string
    venue?: string | null
    year: string
    dependency?: boolean
    dependentOn?: string | null
    team1Wickets?: number | null
    team2Wickets?: number | null
    team1Runs?: number | null
    team2Runs?: number | null
    team1Balls?: number | null
    team2Balls?: number | null
    overs?: number | null
    powerPlayOvers?: number | null
    overPerBowler?: number | null
    tossWonByTeam?: CricketTeamCreateNestedOneWithoutToss_winning_teamInput
    currentOver?: CricketOverCreateNestedOneWithoutMatch_current_overInput
    wonByTeam?: CricketTeamCreateNestedOneWithoutWinning_teamInput
    teamA?: CricketTeamCreateNestedOneWithoutCricketMatchTeamAInput
    teamB?: CricketTeamCreateNestedOneWithoutCricketMatchTeamBInput
    teamAScore?: CricketTeamMatchDataCreateNestedOneWithoutCricketMatchTeamAInput
    teamBScore?: CricketTeamMatchDataCreateNestedOneWithoutCricketMatchTeamBInput
    bowlingTeam?: CricketTeamMatchDataCreateNestedOneWithoutMatchBowlingTeamInput
    players?: CricketPlayerCreateNestedManyWithoutMatchesInput
    over_match?: CricketOverCreateNestedManyWithoutMatchInput
    team_batting_score?: CricketMatchPlayerBattingScoreCreateNestedManyWithoutMatchInput
    team_bowling_score?: CricketMatchPlayerBowlingScoreCreateNestedManyWithoutMatchInput
  }

  export type CricketMatchUncheckedCreateWithoutBattingTeamInput = {
    sis_id?: string
    played?: boolean
    tossWonBy?: string | null
    tossDecision?: string | null
    date: Date | string
    venue?: string | null
    year: string
    dependency?: boolean
    dependentOn?: string | null
    team1Wickets?: number | null
    team2Wickets?: number | null
    team1Runs?: number | null
    team2Runs?: number | null
    team1Balls?: number | null
    team2Balls?: number | null
    overs?: number | null
    powerPlayOvers?: number | null
    overPerBowler?: number | null
    currentOverId?: string | null
    wonBy?: string | null
    teamAId?: string | null
    teamBId?: string | null
    teamAScoreId?: string | null
    teamBScoreId?: string | null
    bowlingTeamScoreId?: string | null
    players?: CricketPlayerUncheckedCreateNestedManyWithoutMatchesInput
    over_match?: CricketOverUncheckedCreateNestedManyWithoutMatchInput
    team_batting_score?: CricketMatchPlayerBattingScoreUncheckedCreateNestedManyWithoutMatchInput
    team_bowling_score?: CricketMatchPlayerBowlingScoreUncheckedCreateNestedManyWithoutMatchInput
  }

  export type CricketMatchCreateOrConnectWithoutBattingTeamInput = {
    where: CricketMatchWhereUniqueInput
    create: XOR<CricketMatchCreateWithoutBattingTeamInput, CricketMatchUncheckedCreateWithoutBattingTeamInput>
  }

  export type CricketMatchCreateManyBattingTeamInputEnvelope = {
    data: CricketMatchCreateManyBattingTeamInput | CricketMatchCreateManyBattingTeamInput[]
    skipDuplicates?: boolean
  }

  export type CricketMatchCreateWithoutBowlingTeamInput = {
    sis_id?: string
    played?: boolean
    tossDecision?: string | null
    date: Date | string
    venue?: string | null
    year: string
    dependency?: boolean
    dependentOn?: string | null
    team1Wickets?: number | null
    team2Wickets?: number | null
    team1Runs?: number | null
    team2Runs?: number | null
    team1Balls?: number | null
    team2Balls?: number | null
    overs?: number | null
    powerPlayOvers?: number | null
    overPerBowler?: number | null
    tossWonByTeam?: CricketTeamCreateNestedOneWithoutToss_winning_teamInput
    currentOver?: CricketOverCreateNestedOneWithoutMatch_current_overInput
    wonByTeam?: CricketTeamCreateNestedOneWithoutWinning_teamInput
    teamA?: CricketTeamCreateNestedOneWithoutCricketMatchTeamAInput
    teamB?: CricketTeamCreateNestedOneWithoutCricketMatchTeamBInput
    teamAScore?: CricketTeamMatchDataCreateNestedOneWithoutCricketMatchTeamAInput
    teamBScore?: CricketTeamMatchDataCreateNestedOneWithoutCricketMatchTeamBInput
    battingTeam?: CricketTeamMatchDataCreateNestedOneWithoutMatchBttingTeamInput
    players?: CricketPlayerCreateNestedManyWithoutMatchesInput
    over_match?: CricketOverCreateNestedManyWithoutMatchInput
    team_batting_score?: CricketMatchPlayerBattingScoreCreateNestedManyWithoutMatchInput
    team_bowling_score?: CricketMatchPlayerBowlingScoreCreateNestedManyWithoutMatchInput
  }

  export type CricketMatchUncheckedCreateWithoutBowlingTeamInput = {
    sis_id?: string
    played?: boolean
    tossWonBy?: string | null
    tossDecision?: string | null
    date: Date | string
    venue?: string | null
    year: string
    dependency?: boolean
    dependentOn?: string | null
    team1Wickets?: number | null
    team2Wickets?: number | null
    team1Runs?: number | null
    team2Runs?: number | null
    team1Balls?: number | null
    team2Balls?: number | null
    overs?: number | null
    powerPlayOvers?: number | null
    overPerBowler?: number | null
    currentOverId?: string | null
    wonBy?: string | null
    teamAId?: string | null
    teamBId?: string | null
    teamAScoreId?: string | null
    teamBScoreId?: string | null
    battingTeamScoreId?: string | null
    players?: CricketPlayerUncheckedCreateNestedManyWithoutMatchesInput
    over_match?: CricketOverUncheckedCreateNestedManyWithoutMatchInput
    team_batting_score?: CricketMatchPlayerBattingScoreUncheckedCreateNestedManyWithoutMatchInput
    team_bowling_score?: CricketMatchPlayerBowlingScoreUncheckedCreateNestedManyWithoutMatchInput
  }

  export type CricketMatchCreateOrConnectWithoutBowlingTeamInput = {
    where: CricketMatchWhereUniqueInput
    create: XOR<CricketMatchCreateWithoutBowlingTeamInput, CricketMatchUncheckedCreateWithoutBowlingTeamInput>
  }

  export type CricketMatchCreateManyBowlingTeamInputEnvelope = {
    data: CricketMatchCreateManyBowlingTeamInput | CricketMatchCreateManyBowlingTeamInput[]
    skipDuplicates?: boolean
  }

  export type CricketMatchPlayerBattingScoreUpsertWithWhereUniqueWithoutMatch_battersInput = {
    where: CricketMatchPlayerBattingScoreWhereUniqueInput
    update: XOR<CricketMatchPlayerBattingScoreUpdateWithoutMatch_battersInput, CricketMatchPlayerBattingScoreUncheckedUpdateWithoutMatch_battersInput>
    create: XOR<CricketMatchPlayerBattingScoreCreateWithoutMatch_battersInput, CricketMatchPlayerBattingScoreUncheckedCreateWithoutMatch_battersInput>
  }

  export type CricketMatchPlayerBattingScoreUpdateWithWhereUniqueWithoutMatch_battersInput = {
    where: CricketMatchPlayerBattingScoreWhereUniqueInput
    data: XOR<CricketMatchPlayerBattingScoreUpdateWithoutMatch_battersInput, CricketMatchPlayerBattingScoreUncheckedUpdateWithoutMatch_battersInput>
  }

  export type CricketMatchPlayerBattingScoreUpdateManyWithWhereWithoutMatch_battersInput = {
    where: CricketMatchPlayerBattingScoreScalarWhereInput
    data: XOR<CricketMatchPlayerBattingScoreUpdateManyMutationInput, CricketMatchPlayerBattingScoreUncheckedUpdateManyWithoutMatch_battersInput>
  }

  export type CricketMatchPlayerBowlingScoreUpsertWithWhereUniqueWithoutMatch_bowlersInput = {
    where: CricketMatchPlayerBowlingScoreWhereUniqueInput
    update: XOR<CricketMatchPlayerBowlingScoreUpdateWithoutMatch_bowlersInput, CricketMatchPlayerBowlingScoreUncheckedUpdateWithoutMatch_bowlersInput>
    create: XOR<CricketMatchPlayerBowlingScoreCreateWithoutMatch_bowlersInput, CricketMatchPlayerBowlingScoreUncheckedCreateWithoutMatch_bowlersInput>
  }

  export type CricketMatchPlayerBowlingScoreUpdateWithWhereUniqueWithoutMatch_bowlersInput = {
    where: CricketMatchPlayerBowlingScoreWhereUniqueInput
    data: XOR<CricketMatchPlayerBowlingScoreUpdateWithoutMatch_bowlersInput, CricketMatchPlayerBowlingScoreUncheckedUpdateWithoutMatch_bowlersInput>
  }

  export type CricketMatchPlayerBowlingScoreUpdateManyWithWhereWithoutMatch_bowlersInput = {
    where: CricketMatchPlayerBowlingScoreScalarWhereInput
    data: XOR<CricketMatchPlayerBowlingScoreUpdateManyMutationInput, CricketMatchPlayerBowlingScoreUncheckedUpdateManyWithoutMatch_bowlersInput>
  }

  export type CricketTeamUpsertWithoutCricket_match_teamDataInput = {
    update: XOR<CricketTeamUpdateWithoutCricket_match_teamDataInput, CricketTeamUncheckedUpdateWithoutCricket_match_teamDataInput>
    create: XOR<CricketTeamCreateWithoutCricket_match_teamDataInput, CricketTeamUncheckedCreateWithoutCricket_match_teamDataInput>
    where?: CricketTeamWhereInput
  }

  export type CricketTeamUpdateToOneWithWhereWithoutCricket_match_teamDataInput = {
    where?: CricketTeamWhereInput
    data: XOR<CricketTeamUpdateWithoutCricket_match_teamDataInput, CricketTeamUncheckedUpdateWithoutCricket_match_teamDataInput>
  }

  export type CricketTeamUpdateWithoutCricket_match_teamDataInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    players?: CricketPlayerUpdateManyWithoutTeam_playersNestedInput
    winning_team?: CricketMatchUpdateManyWithoutWonByTeamNestedInput
    toss_winning_team?: CricketMatchUpdateManyWithoutTossWonByTeamNestedInput
    player_team?: CricketPlayerUpdateManyWithoutTeamNestedInput
    cricket_match_player_batting_score?: CricketMatchPlayerBattingScoreUpdateManyWithoutTeamNestedInput
    cricket_match_player_bowling_score?: CricketMatchPlayerBowlingScoreUpdateManyWithoutTeamNestedInput
    CricketMatchTeamA?: CricketMatchUpdateManyWithoutTeamANestedInput
    CricketMatchTeamB?: CricketMatchUpdateManyWithoutTeamBNestedInput
  }

  export type CricketTeamUncheckedUpdateWithoutCricket_match_teamDataInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    players?: CricketPlayerUncheckedUpdateManyWithoutTeam_playersNestedInput
    winning_team?: CricketMatchUncheckedUpdateManyWithoutWonByTeamNestedInput
    toss_winning_team?: CricketMatchUncheckedUpdateManyWithoutTossWonByTeamNestedInput
    player_team?: CricketPlayerUncheckedUpdateManyWithoutTeamNestedInput
    cricket_match_player_batting_score?: CricketMatchPlayerBattingScoreUncheckedUpdateManyWithoutTeamNestedInput
    cricket_match_player_bowling_score?: CricketMatchPlayerBowlingScoreUncheckedUpdateManyWithoutTeamNestedInput
    CricketMatchTeamA?: CricketMatchUncheckedUpdateManyWithoutTeamANestedInput
    CricketMatchTeamB?: CricketMatchUncheckedUpdateManyWithoutTeamBNestedInput
  }

  export type CricketMatchUpsertWithWhereUniqueWithoutTeamAScoreInput = {
    where: CricketMatchWhereUniqueInput
    update: XOR<CricketMatchUpdateWithoutTeamAScoreInput, CricketMatchUncheckedUpdateWithoutTeamAScoreInput>
    create: XOR<CricketMatchCreateWithoutTeamAScoreInput, CricketMatchUncheckedCreateWithoutTeamAScoreInput>
  }

  export type CricketMatchUpdateWithWhereUniqueWithoutTeamAScoreInput = {
    where: CricketMatchWhereUniqueInput
    data: XOR<CricketMatchUpdateWithoutTeamAScoreInput, CricketMatchUncheckedUpdateWithoutTeamAScoreInput>
  }

  export type CricketMatchUpdateManyWithWhereWithoutTeamAScoreInput = {
    where: CricketMatchScalarWhereInput
    data: XOR<CricketMatchUpdateManyMutationInput, CricketMatchUncheckedUpdateManyWithoutTeamAScoreInput>
  }

  export type CricketMatchUpsertWithWhereUniqueWithoutTeamBScoreInput = {
    where: CricketMatchWhereUniqueInput
    update: XOR<CricketMatchUpdateWithoutTeamBScoreInput, CricketMatchUncheckedUpdateWithoutTeamBScoreInput>
    create: XOR<CricketMatchCreateWithoutTeamBScoreInput, CricketMatchUncheckedCreateWithoutTeamBScoreInput>
  }

  export type CricketMatchUpdateWithWhereUniqueWithoutTeamBScoreInput = {
    where: CricketMatchWhereUniqueInput
    data: XOR<CricketMatchUpdateWithoutTeamBScoreInput, CricketMatchUncheckedUpdateWithoutTeamBScoreInput>
  }

  export type CricketMatchUpdateManyWithWhereWithoutTeamBScoreInput = {
    where: CricketMatchScalarWhereInput
    data: XOR<CricketMatchUpdateManyMutationInput, CricketMatchUncheckedUpdateManyWithoutTeamBScoreInput>
  }

  export type CricketMatchUpsertWithWhereUniqueWithoutBattingTeamInput = {
    where: CricketMatchWhereUniqueInput
    update: XOR<CricketMatchUpdateWithoutBattingTeamInput, CricketMatchUncheckedUpdateWithoutBattingTeamInput>
    create: XOR<CricketMatchCreateWithoutBattingTeamInput, CricketMatchUncheckedCreateWithoutBattingTeamInput>
  }

  export type CricketMatchUpdateWithWhereUniqueWithoutBattingTeamInput = {
    where: CricketMatchWhereUniqueInput
    data: XOR<CricketMatchUpdateWithoutBattingTeamInput, CricketMatchUncheckedUpdateWithoutBattingTeamInput>
  }

  export type CricketMatchUpdateManyWithWhereWithoutBattingTeamInput = {
    where: CricketMatchScalarWhereInput
    data: XOR<CricketMatchUpdateManyMutationInput, CricketMatchUncheckedUpdateManyWithoutBattingTeamInput>
  }

  export type CricketMatchUpsertWithWhereUniqueWithoutBowlingTeamInput = {
    where: CricketMatchWhereUniqueInput
    update: XOR<CricketMatchUpdateWithoutBowlingTeamInput, CricketMatchUncheckedUpdateWithoutBowlingTeamInput>
    create: XOR<CricketMatchCreateWithoutBowlingTeamInput, CricketMatchUncheckedCreateWithoutBowlingTeamInput>
  }

  export type CricketMatchUpdateWithWhereUniqueWithoutBowlingTeamInput = {
    where: CricketMatchWhereUniqueInput
    data: XOR<CricketMatchUpdateWithoutBowlingTeamInput, CricketMatchUncheckedUpdateWithoutBowlingTeamInput>
  }

  export type CricketMatchUpdateManyWithWhereWithoutBowlingTeamInput = {
    where: CricketMatchScalarWhereInput
    data: XOR<CricketMatchUpdateManyMutationInput, CricketMatchUncheckedUpdateManyWithoutBowlingTeamInput>
  }

  export type CricketMatchCreateWithoutOver_matchInput = {
    sis_id?: string
    played?: boolean
    tossDecision?: string | null
    date: Date | string
    venue?: string | null
    year: string
    dependency?: boolean
    dependentOn?: string | null
    team1Wickets?: number | null
    team2Wickets?: number | null
    team1Runs?: number | null
    team2Runs?: number | null
    team1Balls?: number | null
    team2Balls?: number | null
    overs?: number | null
    powerPlayOvers?: number | null
    overPerBowler?: number | null
    tossWonByTeam?: CricketTeamCreateNestedOneWithoutToss_winning_teamInput
    currentOver?: CricketOverCreateNestedOneWithoutMatch_current_overInput
    wonByTeam?: CricketTeamCreateNestedOneWithoutWinning_teamInput
    teamA?: CricketTeamCreateNestedOneWithoutCricketMatchTeamAInput
    teamB?: CricketTeamCreateNestedOneWithoutCricketMatchTeamBInput
    teamAScore?: CricketTeamMatchDataCreateNestedOneWithoutCricketMatchTeamAInput
    teamBScore?: CricketTeamMatchDataCreateNestedOneWithoutCricketMatchTeamBInput
    battingTeam?: CricketTeamMatchDataCreateNestedOneWithoutMatchBttingTeamInput
    bowlingTeam?: CricketTeamMatchDataCreateNestedOneWithoutMatchBowlingTeamInput
    players?: CricketPlayerCreateNestedManyWithoutMatchesInput
    team_batting_score?: CricketMatchPlayerBattingScoreCreateNestedManyWithoutMatchInput
    team_bowling_score?: CricketMatchPlayerBowlingScoreCreateNestedManyWithoutMatchInput
  }

  export type CricketMatchUncheckedCreateWithoutOver_matchInput = {
    sis_id?: string
    played?: boolean
    tossWonBy?: string | null
    tossDecision?: string | null
    date: Date | string
    venue?: string | null
    year: string
    dependency?: boolean
    dependentOn?: string | null
    team1Wickets?: number | null
    team2Wickets?: number | null
    team1Runs?: number | null
    team2Runs?: number | null
    team1Balls?: number | null
    team2Balls?: number | null
    overs?: number | null
    powerPlayOvers?: number | null
    overPerBowler?: number | null
    currentOverId?: string | null
    wonBy?: string | null
    teamAId?: string | null
    teamBId?: string | null
    teamAScoreId?: string | null
    teamBScoreId?: string | null
    battingTeamScoreId?: string | null
    bowlingTeamScoreId?: string | null
    players?: CricketPlayerUncheckedCreateNestedManyWithoutMatchesInput
    team_batting_score?: CricketMatchPlayerBattingScoreUncheckedCreateNestedManyWithoutMatchInput
    team_bowling_score?: CricketMatchPlayerBowlingScoreUncheckedCreateNestedManyWithoutMatchInput
  }

  export type CricketMatchCreateOrConnectWithoutOver_matchInput = {
    where: CricketMatchWhereUniqueInput
    create: XOR<CricketMatchCreateWithoutOver_matchInput, CricketMatchUncheckedCreateWithoutOver_matchInput>
  }

  export type CricketMatchPlayerBattingScoreCreateWithoutOver_strikerInput = {
    sis_id?: string
    runs?: number
    balls?: number
    fours?: number
    sixes?: number
    strikeRate?: number
    out?: boolean
    played?: boolean
    wicketType?: string | null
    player?: CricketPlayerCreateNestedOneWithoutBatting_score_playerInput
    match: CricketMatchCreateNestedOneWithoutTeam_batting_scoreInput
    team: CricketTeamCreateNestedOneWithoutCricket_match_player_batting_scoreInput
    match_batters?: CricketTeamMatchDataCreateNestedManyWithoutBattersInput
    over_non_striker?: CricketOverCreateNestedManyWithoutNonStrikerScoreInput
  }

  export type CricketMatchPlayerBattingScoreUncheckedCreateWithoutOver_strikerInput = {
    sis_id?: string
    runs?: number
    balls?: number
    fours?: number
    sixes?: number
    strikeRate?: number
    out?: boolean
    played?: boolean
    wicketType?: string | null
    playerId?: string | null
    matchId: string
    teamId: string
    match_batters?: CricketTeamMatchDataUncheckedCreateNestedManyWithoutBattersInput
    over_non_striker?: CricketOverUncheckedCreateNestedManyWithoutNonStrikerScoreInput
  }

  export type CricketMatchPlayerBattingScoreCreateOrConnectWithoutOver_strikerInput = {
    where: CricketMatchPlayerBattingScoreWhereUniqueInput
    create: XOR<CricketMatchPlayerBattingScoreCreateWithoutOver_strikerInput, CricketMatchPlayerBattingScoreUncheckedCreateWithoutOver_strikerInput>
  }

  export type CricketMatchPlayerBattingScoreCreateWithoutOver_non_strikerInput = {
    sis_id?: string
    runs?: number
    balls?: number
    fours?: number
    sixes?: number
    strikeRate?: number
    out?: boolean
    played?: boolean
    wicketType?: string | null
    player?: CricketPlayerCreateNestedOneWithoutBatting_score_playerInput
    match: CricketMatchCreateNestedOneWithoutTeam_batting_scoreInput
    team: CricketTeamCreateNestedOneWithoutCricket_match_player_batting_scoreInput
    match_batters?: CricketTeamMatchDataCreateNestedManyWithoutBattersInput
    over_striker?: CricketOverCreateNestedManyWithoutStrikerScoreInput
  }

  export type CricketMatchPlayerBattingScoreUncheckedCreateWithoutOver_non_strikerInput = {
    sis_id?: string
    runs?: number
    balls?: number
    fours?: number
    sixes?: number
    strikeRate?: number
    out?: boolean
    played?: boolean
    wicketType?: string | null
    playerId?: string | null
    matchId: string
    teamId: string
    match_batters?: CricketTeamMatchDataUncheckedCreateNestedManyWithoutBattersInput
    over_striker?: CricketOverUncheckedCreateNestedManyWithoutStrikerScoreInput
  }

  export type CricketMatchPlayerBattingScoreCreateOrConnectWithoutOver_non_strikerInput = {
    where: CricketMatchPlayerBattingScoreWhereUniqueInput
    create: XOR<CricketMatchPlayerBattingScoreCreateWithoutOver_non_strikerInput, CricketMatchPlayerBattingScoreUncheckedCreateWithoutOver_non_strikerInput>
  }

  export type CricketMatchPlayerBowlingScoreCreateWithoutOver_bowlerInput = {
    sis_id?: string
    runs?: number
    balls?: number
    fours?: number
    sixes?: number
    played?: boolean
    wickets?: number
    player?: CricketPlayerCreateNestedOneWithoutBowling_score_playerInput
    match: CricketMatchCreateNestedOneWithoutTeam_bowling_scoreInput
    team: CricketTeamCreateNestedOneWithoutCricket_match_player_bowling_scoreInput
    match_bowlers?: CricketTeamMatchDataCreateNestedManyWithoutBowlersInput
  }

  export type CricketMatchPlayerBowlingScoreUncheckedCreateWithoutOver_bowlerInput = {
    sis_id?: string
    runs?: number
    balls?: number
    fours?: number
    sixes?: number
    played?: boolean
    wickets?: number
    playerId?: string | null
    matchId: string
    teamId: string
    match_bowlers?: CricketTeamMatchDataUncheckedCreateNestedManyWithoutBowlersInput
  }

  export type CricketMatchPlayerBowlingScoreCreateOrConnectWithoutOver_bowlerInput = {
    where: CricketMatchPlayerBowlingScoreWhereUniqueInput
    create: XOR<CricketMatchPlayerBowlingScoreCreateWithoutOver_bowlerInput, CricketMatchPlayerBowlingScoreUncheckedCreateWithoutOver_bowlerInput>
  }

  export type CricketOverBallCreateWithoutOverInput = {
    sis_id?: string
    ballNo: number
    runs: number
    wicket?: boolean
    ballType?: $Enums.BallType
    extras?: number
    wicketType?: string | null
    deliveryType?: string | null
  }

  export type CricketOverBallUncheckedCreateWithoutOverInput = {
    sis_id?: string
    ballNo: number
    runs: number
    wicket?: boolean
    ballType?: $Enums.BallType
    extras?: number
    wicketType?: string | null
    deliveryType?: string | null
  }

  export type CricketOverBallCreateOrConnectWithoutOverInput = {
    where: CricketOverBallWhereUniqueInput
    create: XOR<CricketOverBallCreateWithoutOverInput, CricketOverBallUncheckedCreateWithoutOverInput>
  }

  export type CricketOverBallCreateManyOverInputEnvelope = {
    data: CricketOverBallCreateManyOverInput | CricketOverBallCreateManyOverInput[]
    skipDuplicates?: boolean
  }

  export type CricketMatchCreateWithoutCurrentOverInput = {
    sis_id?: string
    played?: boolean
    tossDecision?: string | null
    date: Date | string
    venue?: string | null
    year: string
    dependency?: boolean
    dependentOn?: string | null
    team1Wickets?: number | null
    team2Wickets?: number | null
    team1Runs?: number | null
    team2Runs?: number | null
    team1Balls?: number | null
    team2Balls?: number | null
    overs?: number | null
    powerPlayOvers?: number | null
    overPerBowler?: number | null
    tossWonByTeam?: CricketTeamCreateNestedOneWithoutToss_winning_teamInput
    wonByTeam?: CricketTeamCreateNestedOneWithoutWinning_teamInput
    teamA?: CricketTeamCreateNestedOneWithoutCricketMatchTeamAInput
    teamB?: CricketTeamCreateNestedOneWithoutCricketMatchTeamBInput
    teamAScore?: CricketTeamMatchDataCreateNestedOneWithoutCricketMatchTeamAInput
    teamBScore?: CricketTeamMatchDataCreateNestedOneWithoutCricketMatchTeamBInput
    battingTeam?: CricketTeamMatchDataCreateNestedOneWithoutMatchBttingTeamInput
    bowlingTeam?: CricketTeamMatchDataCreateNestedOneWithoutMatchBowlingTeamInput
    players?: CricketPlayerCreateNestedManyWithoutMatchesInput
    over_match?: CricketOverCreateNestedManyWithoutMatchInput
    team_batting_score?: CricketMatchPlayerBattingScoreCreateNestedManyWithoutMatchInput
    team_bowling_score?: CricketMatchPlayerBowlingScoreCreateNestedManyWithoutMatchInput
  }

  export type CricketMatchUncheckedCreateWithoutCurrentOverInput = {
    sis_id?: string
    played?: boolean
    tossWonBy?: string | null
    tossDecision?: string | null
    date: Date | string
    venue?: string | null
    year: string
    dependency?: boolean
    dependentOn?: string | null
    team1Wickets?: number | null
    team2Wickets?: number | null
    team1Runs?: number | null
    team2Runs?: number | null
    team1Balls?: number | null
    team2Balls?: number | null
    overs?: number | null
    powerPlayOvers?: number | null
    overPerBowler?: number | null
    wonBy?: string | null
    teamAId?: string | null
    teamBId?: string | null
    teamAScoreId?: string | null
    teamBScoreId?: string | null
    battingTeamScoreId?: string | null
    bowlingTeamScoreId?: string | null
    players?: CricketPlayerUncheckedCreateNestedManyWithoutMatchesInput
    over_match?: CricketOverUncheckedCreateNestedManyWithoutMatchInput
    team_batting_score?: CricketMatchPlayerBattingScoreUncheckedCreateNestedManyWithoutMatchInput
    team_bowling_score?: CricketMatchPlayerBowlingScoreUncheckedCreateNestedManyWithoutMatchInput
  }

  export type CricketMatchCreateOrConnectWithoutCurrentOverInput = {
    where: CricketMatchWhereUniqueInput
    create: XOR<CricketMatchCreateWithoutCurrentOverInput, CricketMatchUncheckedCreateWithoutCurrentOverInput>
  }

  export type CricketMatchCreateManyCurrentOverInputEnvelope = {
    data: CricketMatchCreateManyCurrentOverInput | CricketMatchCreateManyCurrentOverInput[]
    skipDuplicates?: boolean
  }

  export type CricketMatchUpsertWithoutOver_matchInput = {
    update: XOR<CricketMatchUpdateWithoutOver_matchInput, CricketMatchUncheckedUpdateWithoutOver_matchInput>
    create: XOR<CricketMatchCreateWithoutOver_matchInput, CricketMatchUncheckedCreateWithoutOver_matchInput>
    where?: CricketMatchWhereInput
  }

  export type CricketMatchUpdateToOneWithWhereWithoutOver_matchInput = {
    where?: CricketMatchWhereInput
    data: XOR<CricketMatchUpdateWithoutOver_matchInput, CricketMatchUncheckedUpdateWithoutOver_matchInput>
  }

  export type CricketMatchUpdateWithoutOver_matchInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    played?: BoolFieldUpdateOperationsInput | boolean
    tossDecision?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    year?: StringFieldUpdateOperationsInput | string
    dependency?: BoolFieldUpdateOperationsInput | boolean
    dependentOn?: NullableStringFieldUpdateOperationsInput | string | null
    team1Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team2Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team1Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team2Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team1Balls?: NullableIntFieldUpdateOperationsInput | number | null
    team2Balls?: NullableIntFieldUpdateOperationsInput | number | null
    overs?: NullableIntFieldUpdateOperationsInput | number | null
    powerPlayOvers?: NullableIntFieldUpdateOperationsInput | number | null
    overPerBowler?: NullableIntFieldUpdateOperationsInput | number | null
    tossWonByTeam?: CricketTeamUpdateOneWithoutToss_winning_teamNestedInput
    currentOver?: CricketOverUpdateOneWithoutMatch_current_overNestedInput
    wonByTeam?: CricketTeamUpdateOneWithoutWinning_teamNestedInput
    teamA?: CricketTeamUpdateOneWithoutCricketMatchTeamANestedInput
    teamB?: CricketTeamUpdateOneWithoutCricketMatchTeamBNestedInput
    teamAScore?: CricketTeamMatchDataUpdateOneWithoutCricketMatchTeamANestedInput
    teamBScore?: CricketTeamMatchDataUpdateOneWithoutCricketMatchTeamBNestedInput
    battingTeam?: CricketTeamMatchDataUpdateOneWithoutMatchBttingTeamNestedInput
    bowlingTeam?: CricketTeamMatchDataUpdateOneWithoutMatchBowlingTeamNestedInput
    players?: CricketPlayerUpdateManyWithoutMatchesNestedInput
    team_batting_score?: CricketMatchPlayerBattingScoreUpdateManyWithoutMatchNestedInput
    team_bowling_score?: CricketMatchPlayerBowlingScoreUpdateManyWithoutMatchNestedInput
  }

  export type CricketMatchUncheckedUpdateWithoutOver_matchInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    played?: BoolFieldUpdateOperationsInput | boolean
    tossWonBy?: NullableStringFieldUpdateOperationsInput | string | null
    tossDecision?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    year?: StringFieldUpdateOperationsInput | string
    dependency?: BoolFieldUpdateOperationsInput | boolean
    dependentOn?: NullableStringFieldUpdateOperationsInput | string | null
    team1Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team2Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team1Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team2Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team1Balls?: NullableIntFieldUpdateOperationsInput | number | null
    team2Balls?: NullableIntFieldUpdateOperationsInput | number | null
    overs?: NullableIntFieldUpdateOperationsInput | number | null
    powerPlayOvers?: NullableIntFieldUpdateOperationsInput | number | null
    overPerBowler?: NullableIntFieldUpdateOperationsInput | number | null
    currentOverId?: NullableStringFieldUpdateOperationsInput | string | null
    wonBy?: NullableStringFieldUpdateOperationsInput | string | null
    teamAId?: NullableStringFieldUpdateOperationsInput | string | null
    teamBId?: NullableStringFieldUpdateOperationsInput | string | null
    teamAScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    teamBScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    battingTeamScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    bowlingTeamScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    players?: CricketPlayerUncheckedUpdateManyWithoutMatchesNestedInput
    team_batting_score?: CricketMatchPlayerBattingScoreUncheckedUpdateManyWithoutMatchNestedInput
    team_bowling_score?: CricketMatchPlayerBowlingScoreUncheckedUpdateManyWithoutMatchNestedInput
  }

  export type CricketMatchPlayerBattingScoreUpsertWithoutOver_strikerInput = {
    update: XOR<CricketMatchPlayerBattingScoreUpdateWithoutOver_strikerInput, CricketMatchPlayerBattingScoreUncheckedUpdateWithoutOver_strikerInput>
    create: XOR<CricketMatchPlayerBattingScoreCreateWithoutOver_strikerInput, CricketMatchPlayerBattingScoreUncheckedCreateWithoutOver_strikerInput>
    where?: CricketMatchPlayerBattingScoreWhereInput
  }

  export type CricketMatchPlayerBattingScoreUpdateToOneWithWhereWithoutOver_strikerInput = {
    where?: CricketMatchPlayerBattingScoreWhereInput
    data: XOR<CricketMatchPlayerBattingScoreUpdateWithoutOver_strikerInput, CricketMatchPlayerBattingScoreUncheckedUpdateWithoutOver_strikerInput>
  }

  export type CricketMatchPlayerBattingScoreUpdateWithoutOver_strikerInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    runs?: IntFieldUpdateOperationsInput | number
    balls?: IntFieldUpdateOperationsInput | number
    fours?: IntFieldUpdateOperationsInput | number
    sixes?: IntFieldUpdateOperationsInput | number
    strikeRate?: FloatFieldUpdateOperationsInput | number
    out?: BoolFieldUpdateOperationsInput | boolean
    played?: BoolFieldUpdateOperationsInput | boolean
    wicketType?: NullableStringFieldUpdateOperationsInput | string | null
    player?: CricketPlayerUpdateOneWithoutBatting_score_playerNestedInput
    match?: CricketMatchUpdateOneRequiredWithoutTeam_batting_scoreNestedInput
    team?: CricketTeamUpdateOneRequiredWithoutCricket_match_player_batting_scoreNestedInput
    match_batters?: CricketTeamMatchDataUpdateManyWithoutBattersNestedInput
    over_non_striker?: CricketOverUpdateManyWithoutNonStrikerScoreNestedInput
  }

  export type CricketMatchPlayerBattingScoreUncheckedUpdateWithoutOver_strikerInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    runs?: IntFieldUpdateOperationsInput | number
    balls?: IntFieldUpdateOperationsInput | number
    fours?: IntFieldUpdateOperationsInput | number
    sixes?: IntFieldUpdateOperationsInput | number
    strikeRate?: FloatFieldUpdateOperationsInput | number
    out?: BoolFieldUpdateOperationsInput | boolean
    played?: BoolFieldUpdateOperationsInput | boolean
    wicketType?: NullableStringFieldUpdateOperationsInput | string | null
    playerId?: NullableStringFieldUpdateOperationsInput | string | null
    matchId?: StringFieldUpdateOperationsInput | string
    teamId?: StringFieldUpdateOperationsInput | string
    match_batters?: CricketTeamMatchDataUncheckedUpdateManyWithoutBattersNestedInput
    over_non_striker?: CricketOverUncheckedUpdateManyWithoutNonStrikerScoreNestedInput
  }

  export type CricketMatchPlayerBattingScoreUpsertWithoutOver_non_strikerInput = {
    update: XOR<CricketMatchPlayerBattingScoreUpdateWithoutOver_non_strikerInput, CricketMatchPlayerBattingScoreUncheckedUpdateWithoutOver_non_strikerInput>
    create: XOR<CricketMatchPlayerBattingScoreCreateWithoutOver_non_strikerInput, CricketMatchPlayerBattingScoreUncheckedCreateWithoutOver_non_strikerInput>
    where?: CricketMatchPlayerBattingScoreWhereInput
  }

  export type CricketMatchPlayerBattingScoreUpdateToOneWithWhereWithoutOver_non_strikerInput = {
    where?: CricketMatchPlayerBattingScoreWhereInput
    data: XOR<CricketMatchPlayerBattingScoreUpdateWithoutOver_non_strikerInput, CricketMatchPlayerBattingScoreUncheckedUpdateWithoutOver_non_strikerInput>
  }

  export type CricketMatchPlayerBattingScoreUpdateWithoutOver_non_strikerInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    runs?: IntFieldUpdateOperationsInput | number
    balls?: IntFieldUpdateOperationsInput | number
    fours?: IntFieldUpdateOperationsInput | number
    sixes?: IntFieldUpdateOperationsInput | number
    strikeRate?: FloatFieldUpdateOperationsInput | number
    out?: BoolFieldUpdateOperationsInput | boolean
    played?: BoolFieldUpdateOperationsInput | boolean
    wicketType?: NullableStringFieldUpdateOperationsInput | string | null
    player?: CricketPlayerUpdateOneWithoutBatting_score_playerNestedInput
    match?: CricketMatchUpdateOneRequiredWithoutTeam_batting_scoreNestedInput
    team?: CricketTeamUpdateOneRequiredWithoutCricket_match_player_batting_scoreNestedInput
    match_batters?: CricketTeamMatchDataUpdateManyWithoutBattersNestedInput
    over_striker?: CricketOverUpdateManyWithoutStrikerScoreNestedInput
  }

  export type CricketMatchPlayerBattingScoreUncheckedUpdateWithoutOver_non_strikerInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    runs?: IntFieldUpdateOperationsInput | number
    balls?: IntFieldUpdateOperationsInput | number
    fours?: IntFieldUpdateOperationsInput | number
    sixes?: IntFieldUpdateOperationsInput | number
    strikeRate?: FloatFieldUpdateOperationsInput | number
    out?: BoolFieldUpdateOperationsInput | boolean
    played?: BoolFieldUpdateOperationsInput | boolean
    wicketType?: NullableStringFieldUpdateOperationsInput | string | null
    playerId?: NullableStringFieldUpdateOperationsInput | string | null
    matchId?: StringFieldUpdateOperationsInput | string
    teamId?: StringFieldUpdateOperationsInput | string
    match_batters?: CricketTeamMatchDataUncheckedUpdateManyWithoutBattersNestedInput
    over_striker?: CricketOverUncheckedUpdateManyWithoutStrikerScoreNestedInput
  }

  export type CricketMatchPlayerBowlingScoreUpsertWithoutOver_bowlerInput = {
    update: XOR<CricketMatchPlayerBowlingScoreUpdateWithoutOver_bowlerInput, CricketMatchPlayerBowlingScoreUncheckedUpdateWithoutOver_bowlerInput>
    create: XOR<CricketMatchPlayerBowlingScoreCreateWithoutOver_bowlerInput, CricketMatchPlayerBowlingScoreUncheckedCreateWithoutOver_bowlerInput>
    where?: CricketMatchPlayerBowlingScoreWhereInput
  }

  export type CricketMatchPlayerBowlingScoreUpdateToOneWithWhereWithoutOver_bowlerInput = {
    where?: CricketMatchPlayerBowlingScoreWhereInput
    data: XOR<CricketMatchPlayerBowlingScoreUpdateWithoutOver_bowlerInput, CricketMatchPlayerBowlingScoreUncheckedUpdateWithoutOver_bowlerInput>
  }

  export type CricketMatchPlayerBowlingScoreUpdateWithoutOver_bowlerInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    runs?: IntFieldUpdateOperationsInput | number
    balls?: IntFieldUpdateOperationsInput | number
    fours?: IntFieldUpdateOperationsInput | number
    sixes?: IntFieldUpdateOperationsInput | number
    played?: BoolFieldUpdateOperationsInput | boolean
    wickets?: IntFieldUpdateOperationsInput | number
    player?: CricketPlayerUpdateOneWithoutBowling_score_playerNestedInput
    match?: CricketMatchUpdateOneRequiredWithoutTeam_bowling_scoreNestedInput
    team?: CricketTeamUpdateOneRequiredWithoutCricket_match_player_bowling_scoreNestedInput
    match_bowlers?: CricketTeamMatchDataUpdateManyWithoutBowlersNestedInput
  }

  export type CricketMatchPlayerBowlingScoreUncheckedUpdateWithoutOver_bowlerInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    runs?: IntFieldUpdateOperationsInput | number
    balls?: IntFieldUpdateOperationsInput | number
    fours?: IntFieldUpdateOperationsInput | number
    sixes?: IntFieldUpdateOperationsInput | number
    played?: BoolFieldUpdateOperationsInput | boolean
    wickets?: IntFieldUpdateOperationsInput | number
    playerId?: NullableStringFieldUpdateOperationsInput | string | null
    matchId?: StringFieldUpdateOperationsInput | string
    teamId?: StringFieldUpdateOperationsInput | string
    match_bowlers?: CricketTeamMatchDataUncheckedUpdateManyWithoutBowlersNestedInput
  }

  export type CricketOverBallUpsertWithWhereUniqueWithoutOverInput = {
    where: CricketOverBallWhereUniqueInput
    update: XOR<CricketOverBallUpdateWithoutOverInput, CricketOverBallUncheckedUpdateWithoutOverInput>
    create: XOR<CricketOverBallCreateWithoutOverInput, CricketOverBallUncheckedCreateWithoutOverInput>
  }

  export type CricketOverBallUpdateWithWhereUniqueWithoutOverInput = {
    where: CricketOverBallWhereUniqueInput
    data: XOR<CricketOverBallUpdateWithoutOverInput, CricketOverBallUncheckedUpdateWithoutOverInput>
  }

  export type CricketOverBallUpdateManyWithWhereWithoutOverInput = {
    where: CricketOverBallScalarWhereInput
    data: XOR<CricketOverBallUpdateManyMutationInput, CricketOverBallUncheckedUpdateManyWithoutOverInput>
  }

  export type CricketOverBallScalarWhereInput = {
    AND?: CricketOverBallScalarWhereInput | CricketOverBallScalarWhereInput[]
    OR?: CricketOverBallScalarWhereInput[]
    NOT?: CricketOverBallScalarWhereInput | CricketOverBallScalarWhereInput[]
    sis_id?: StringFilter<"CricketOverBall"> | string
    overId?: StringFilter<"CricketOverBall"> | string
    ballNo?: IntFilter<"CricketOverBall"> | number
    runs?: IntFilter<"CricketOverBall"> | number
    wicket?: BoolFilter<"CricketOverBall"> | boolean
    ballType?: EnumBallTypeFilter<"CricketOverBall"> | $Enums.BallType
    extras?: IntFilter<"CricketOverBall"> | number
    wicketType?: StringNullableFilter<"CricketOverBall"> | string | null
    deliveryType?: StringNullableFilter<"CricketOverBall"> | string | null
  }

  export type CricketMatchUpsertWithWhereUniqueWithoutCurrentOverInput = {
    where: CricketMatchWhereUniqueInput
    update: XOR<CricketMatchUpdateWithoutCurrentOverInput, CricketMatchUncheckedUpdateWithoutCurrentOverInput>
    create: XOR<CricketMatchCreateWithoutCurrentOverInput, CricketMatchUncheckedCreateWithoutCurrentOverInput>
  }

  export type CricketMatchUpdateWithWhereUniqueWithoutCurrentOverInput = {
    where: CricketMatchWhereUniqueInput
    data: XOR<CricketMatchUpdateWithoutCurrentOverInput, CricketMatchUncheckedUpdateWithoutCurrentOverInput>
  }

  export type CricketMatchUpdateManyWithWhereWithoutCurrentOverInput = {
    where: CricketMatchScalarWhereInput
    data: XOR<CricketMatchUpdateManyMutationInput, CricketMatchUncheckedUpdateManyWithoutCurrentOverInput>
  }

  export type CricketOverCreateWithoutBallsInput = {
    sis_id?: string
    runs?: number
    wickets?: number
    totalBalls?: number
    validBalls?: number
    match: CricketMatchCreateNestedOneWithoutOver_matchInput
    strikerScore: CricketMatchPlayerBattingScoreCreateNestedOneWithoutOver_strikerInput
    nonStrikerScore: CricketMatchPlayerBattingScoreCreateNestedOneWithoutOver_non_strikerInput
    bowlerScore: CricketMatchPlayerBowlingScoreCreateNestedOneWithoutOver_bowlerInput
    match_current_over?: CricketMatchCreateNestedManyWithoutCurrentOverInput
  }

  export type CricketOverUncheckedCreateWithoutBallsInput = {
    sis_id?: string
    matchId: string
    runs?: number
    wickets?: number
    totalBalls?: number
    validBalls?: number
    strikerScoreId: string
    nonStrikerScoreId: string
    bowlerScoreId: string
    match_current_over?: CricketMatchUncheckedCreateNestedManyWithoutCurrentOverInput
  }

  export type CricketOverCreateOrConnectWithoutBallsInput = {
    where: CricketOverWhereUniqueInput
    create: XOR<CricketOverCreateWithoutBallsInput, CricketOverUncheckedCreateWithoutBallsInput>
  }

  export type CricketOverUpsertWithoutBallsInput = {
    update: XOR<CricketOverUpdateWithoutBallsInput, CricketOverUncheckedUpdateWithoutBallsInput>
    create: XOR<CricketOverCreateWithoutBallsInput, CricketOverUncheckedCreateWithoutBallsInput>
    where?: CricketOverWhereInput
  }

  export type CricketOverUpdateToOneWithWhereWithoutBallsInput = {
    where?: CricketOverWhereInput
    data: XOR<CricketOverUpdateWithoutBallsInput, CricketOverUncheckedUpdateWithoutBallsInput>
  }

  export type CricketOverUpdateWithoutBallsInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    runs?: IntFieldUpdateOperationsInput | number
    wickets?: IntFieldUpdateOperationsInput | number
    totalBalls?: IntFieldUpdateOperationsInput | number
    validBalls?: IntFieldUpdateOperationsInput | number
    match?: CricketMatchUpdateOneRequiredWithoutOver_matchNestedInput
    strikerScore?: CricketMatchPlayerBattingScoreUpdateOneRequiredWithoutOver_strikerNestedInput
    nonStrikerScore?: CricketMatchPlayerBattingScoreUpdateOneRequiredWithoutOver_non_strikerNestedInput
    bowlerScore?: CricketMatchPlayerBowlingScoreUpdateOneRequiredWithoutOver_bowlerNestedInput
    match_current_over?: CricketMatchUpdateManyWithoutCurrentOverNestedInput
  }

  export type CricketOverUncheckedUpdateWithoutBallsInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    matchId?: StringFieldUpdateOperationsInput | string
    runs?: IntFieldUpdateOperationsInput | number
    wickets?: IntFieldUpdateOperationsInput | number
    totalBalls?: IntFieldUpdateOperationsInput | number
    validBalls?: IntFieldUpdateOperationsInput | number
    strikerScoreId?: StringFieldUpdateOperationsInput | string
    nonStrikerScoreId?: StringFieldUpdateOperationsInput | string
    bowlerScoreId?: StringFieldUpdateOperationsInput | string
    match_current_over?: CricketMatchUncheckedUpdateManyWithoutCurrentOverNestedInput
  }

  export type CricketPlayerCreateWithoutBatting_score_playerInput = {
    sis_id?: string
    isSelected?: boolean
    isCaptain?: boolean
    isWicketKeeper?: boolean
    isAllRounder?: boolean
    isBatsman?: boolean
    isBowler?: boolean
    runs?: number
    noOfMatchesPlayed?: number
    noOfSixes?: number
    noOfFours?: number
    noOfWicketsTaken?: number
    noOfHalfCenturies?: number
    noOfCenturies?: number
    noOfWickets?: number
    user: UsersCreateNestedOneWithoutCricket_playersInput
    matches?: CricketMatchCreateNestedManyWithoutPlayersInput
    team?: CricketTeamCreateNestedOneWithoutPlayer_teamInput
    user_cricket_players?: UsersCreateNestedManyWithoutCricketPlayerInput
    team_players?: CricketTeamCreateNestedManyWithoutPlayersInput
    bowling_score_player?: CricketMatchPlayerBowlingScoreCreateNestedManyWithoutPlayerInput
  }

  export type CricketPlayerUncheckedCreateWithoutBatting_score_playerInput = {
    sis_id?: string
    userId: string
    teamId?: string | null
    isSelected?: boolean
    isCaptain?: boolean
    isWicketKeeper?: boolean
    isAllRounder?: boolean
    isBatsman?: boolean
    isBowler?: boolean
    runs?: number
    noOfMatchesPlayed?: number
    noOfSixes?: number
    noOfFours?: number
    noOfWicketsTaken?: number
    noOfHalfCenturies?: number
    noOfCenturies?: number
    noOfWickets?: number
    matches?: CricketMatchUncheckedCreateNestedManyWithoutPlayersInput
    user_cricket_players?: UsersUncheckedCreateNestedManyWithoutCricketPlayerInput
    team_players?: CricketTeamUncheckedCreateNestedManyWithoutPlayersInput
    bowling_score_player?: CricketMatchPlayerBowlingScoreUncheckedCreateNestedManyWithoutPlayerInput
  }

  export type CricketPlayerCreateOrConnectWithoutBatting_score_playerInput = {
    where: CricketPlayerWhereUniqueInput
    create: XOR<CricketPlayerCreateWithoutBatting_score_playerInput, CricketPlayerUncheckedCreateWithoutBatting_score_playerInput>
  }

  export type CricketMatchCreateWithoutTeam_batting_scoreInput = {
    sis_id?: string
    played?: boolean
    tossDecision?: string | null
    date: Date | string
    venue?: string | null
    year: string
    dependency?: boolean
    dependentOn?: string | null
    team1Wickets?: number | null
    team2Wickets?: number | null
    team1Runs?: number | null
    team2Runs?: number | null
    team1Balls?: number | null
    team2Balls?: number | null
    overs?: number | null
    powerPlayOvers?: number | null
    overPerBowler?: number | null
    tossWonByTeam?: CricketTeamCreateNestedOneWithoutToss_winning_teamInput
    currentOver?: CricketOverCreateNestedOneWithoutMatch_current_overInput
    wonByTeam?: CricketTeamCreateNestedOneWithoutWinning_teamInput
    teamA?: CricketTeamCreateNestedOneWithoutCricketMatchTeamAInput
    teamB?: CricketTeamCreateNestedOneWithoutCricketMatchTeamBInput
    teamAScore?: CricketTeamMatchDataCreateNestedOneWithoutCricketMatchTeamAInput
    teamBScore?: CricketTeamMatchDataCreateNestedOneWithoutCricketMatchTeamBInput
    battingTeam?: CricketTeamMatchDataCreateNestedOneWithoutMatchBttingTeamInput
    bowlingTeam?: CricketTeamMatchDataCreateNestedOneWithoutMatchBowlingTeamInput
    players?: CricketPlayerCreateNestedManyWithoutMatchesInput
    over_match?: CricketOverCreateNestedManyWithoutMatchInput
    team_bowling_score?: CricketMatchPlayerBowlingScoreCreateNestedManyWithoutMatchInput
  }

  export type CricketMatchUncheckedCreateWithoutTeam_batting_scoreInput = {
    sis_id?: string
    played?: boolean
    tossWonBy?: string | null
    tossDecision?: string | null
    date: Date | string
    venue?: string | null
    year: string
    dependency?: boolean
    dependentOn?: string | null
    team1Wickets?: number | null
    team2Wickets?: number | null
    team1Runs?: number | null
    team2Runs?: number | null
    team1Balls?: number | null
    team2Balls?: number | null
    overs?: number | null
    powerPlayOvers?: number | null
    overPerBowler?: number | null
    currentOverId?: string | null
    wonBy?: string | null
    teamAId?: string | null
    teamBId?: string | null
    teamAScoreId?: string | null
    teamBScoreId?: string | null
    battingTeamScoreId?: string | null
    bowlingTeamScoreId?: string | null
    players?: CricketPlayerUncheckedCreateNestedManyWithoutMatchesInput
    over_match?: CricketOverUncheckedCreateNestedManyWithoutMatchInput
    team_bowling_score?: CricketMatchPlayerBowlingScoreUncheckedCreateNestedManyWithoutMatchInput
  }

  export type CricketMatchCreateOrConnectWithoutTeam_batting_scoreInput = {
    where: CricketMatchWhereUniqueInput
    create: XOR<CricketMatchCreateWithoutTeam_batting_scoreInput, CricketMatchUncheckedCreateWithoutTeam_batting_scoreInput>
  }

  export type CricketTeamCreateWithoutCricket_match_player_batting_scoreInput = {
    sis_id?: string
    name: string
    year: string
    players?: CricketPlayerCreateNestedManyWithoutTeam_playersInput
    winning_team?: CricketMatchCreateNestedManyWithoutWonByTeamInput
    toss_winning_team?: CricketMatchCreateNestedManyWithoutTossWonByTeamInput
    player_team?: CricketPlayerCreateNestedManyWithoutTeamInput
    cricket_match_teamData?: CricketTeamMatchDataCreateNestedManyWithoutTeamInput
    cricket_match_player_bowling_score?: CricketMatchPlayerBowlingScoreCreateNestedManyWithoutTeamInput
    CricketMatchTeamA?: CricketMatchCreateNestedManyWithoutTeamAInput
    CricketMatchTeamB?: CricketMatchCreateNestedManyWithoutTeamBInput
  }

  export type CricketTeamUncheckedCreateWithoutCricket_match_player_batting_scoreInput = {
    sis_id?: string
    name: string
    year: string
    players?: CricketPlayerUncheckedCreateNestedManyWithoutTeam_playersInput
    winning_team?: CricketMatchUncheckedCreateNestedManyWithoutWonByTeamInput
    toss_winning_team?: CricketMatchUncheckedCreateNestedManyWithoutTossWonByTeamInput
    player_team?: CricketPlayerUncheckedCreateNestedManyWithoutTeamInput
    cricket_match_teamData?: CricketTeamMatchDataUncheckedCreateNestedManyWithoutTeamInput
    cricket_match_player_bowling_score?: CricketMatchPlayerBowlingScoreUncheckedCreateNestedManyWithoutTeamInput
    CricketMatchTeamA?: CricketMatchUncheckedCreateNestedManyWithoutTeamAInput
    CricketMatchTeamB?: CricketMatchUncheckedCreateNestedManyWithoutTeamBInput
  }

  export type CricketTeamCreateOrConnectWithoutCricket_match_player_batting_scoreInput = {
    where: CricketTeamWhereUniqueInput
    create: XOR<CricketTeamCreateWithoutCricket_match_player_batting_scoreInput, CricketTeamUncheckedCreateWithoutCricket_match_player_batting_scoreInput>
  }

  export type CricketTeamMatchDataCreateWithoutBattersInput = {
    sis_id?: string
    matchId?: string | null
    name?: string | null
    runs?: number
    wideRuns?: number
    nbRuns?: number
    byeRuns?: number
    lbRuns?: number
    wickets?: number
    balls?: number
    bowlers?: CricketMatchPlayerBowlingScoreCreateNestedManyWithoutMatch_bowlersInput
    team?: CricketTeamCreateNestedOneWithoutCricket_match_teamDataInput
    cricketMatchTeamA?: CricketMatchCreateNestedManyWithoutTeamAScoreInput
    cricketMatchTeamB?: CricketMatchCreateNestedManyWithoutTeamBScoreInput
    matchBttingTeam?: CricketMatchCreateNestedManyWithoutBattingTeamInput
    matchBowlingTeam?: CricketMatchCreateNestedManyWithoutBowlingTeamInput
  }

  export type CricketTeamMatchDataUncheckedCreateWithoutBattersInput = {
    sis_id?: string
    teamId?: string | null
    matchId?: string | null
    name?: string | null
    runs?: number
    wideRuns?: number
    nbRuns?: number
    byeRuns?: number
    lbRuns?: number
    wickets?: number
    balls?: number
    bowlers?: CricketMatchPlayerBowlingScoreUncheckedCreateNestedManyWithoutMatch_bowlersInput
    cricketMatchTeamA?: CricketMatchUncheckedCreateNestedManyWithoutTeamAScoreInput
    cricketMatchTeamB?: CricketMatchUncheckedCreateNestedManyWithoutTeamBScoreInput
    matchBttingTeam?: CricketMatchUncheckedCreateNestedManyWithoutBattingTeamInput
    matchBowlingTeam?: CricketMatchUncheckedCreateNestedManyWithoutBowlingTeamInput
  }

  export type CricketTeamMatchDataCreateOrConnectWithoutBattersInput = {
    where: CricketTeamMatchDataWhereUniqueInput
    create: XOR<CricketTeamMatchDataCreateWithoutBattersInput, CricketTeamMatchDataUncheckedCreateWithoutBattersInput>
  }

  export type CricketOverCreateWithoutStrikerScoreInput = {
    sis_id?: string
    runs?: number
    wickets?: number
    totalBalls?: number
    validBalls?: number
    match: CricketMatchCreateNestedOneWithoutOver_matchInput
    nonStrikerScore: CricketMatchPlayerBattingScoreCreateNestedOneWithoutOver_non_strikerInput
    bowlerScore: CricketMatchPlayerBowlingScoreCreateNestedOneWithoutOver_bowlerInput
    balls?: CricketOverBallCreateNestedManyWithoutOverInput
    match_current_over?: CricketMatchCreateNestedManyWithoutCurrentOverInput
  }

  export type CricketOverUncheckedCreateWithoutStrikerScoreInput = {
    sis_id?: string
    matchId: string
    runs?: number
    wickets?: number
    totalBalls?: number
    validBalls?: number
    nonStrikerScoreId: string
    bowlerScoreId: string
    balls?: CricketOverBallUncheckedCreateNestedManyWithoutOverInput
    match_current_over?: CricketMatchUncheckedCreateNestedManyWithoutCurrentOverInput
  }

  export type CricketOverCreateOrConnectWithoutStrikerScoreInput = {
    where: CricketOverWhereUniqueInput
    create: XOR<CricketOverCreateWithoutStrikerScoreInput, CricketOverUncheckedCreateWithoutStrikerScoreInput>
  }

  export type CricketOverCreateManyStrikerScoreInputEnvelope = {
    data: CricketOverCreateManyStrikerScoreInput | CricketOverCreateManyStrikerScoreInput[]
    skipDuplicates?: boolean
  }

  export type CricketOverCreateWithoutNonStrikerScoreInput = {
    sis_id?: string
    runs?: number
    wickets?: number
    totalBalls?: number
    validBalls?: number
    match: CricketMatchCreateNestedOneWithoutOver_matchInput
    strikerScore: CricketMatchPlayerBattingScoreCreateNestedOneWithoutOver_strikerInput
    bowlerScore: CricketMatchPlayerBowlingScoreCreateNestedOneWithoutOver_bowlerInput
    balls?: CricketOverBallCreateNestedManyWithoutOverInput
    match_current_over?: CricketMatchCreateNestedManyWithoutCurrentOverInput
  }

  export type CricketOverUncheckedCreateWithoutNonStrikerScoreInput = {
    sis_id?: string
    matchId: string
    runs?: number
    wickets?: number
    totalBalls?: number
    validBalls?: number
    strikerScoreId: string
    bowlerScoreId: string
    balls?: CricketOverBallUncheckedCreateNestedManyWithoutOverInput
    match_current_over?: CricketMatchUncheckedCreateNestedManyWithoutCurrentOverInput
  }

  export type CricketOverCreateOrConnectWithoutNonStrikerScoreInput = {
    where: CricketOverWhereUniqueInput
    create: XOR<CricketOverCreateWithoutNonStrikerScoreInput, CricketOverUncheckedCreateWithoutNonStrikerScoreInput>
  }

  export type CricketOverCreateManyNonStrikerScoreInputEnvelope = {
    data: CricketOverCreateManyNonStrikerScoreInput | CricketOverCreateManyNonStrikerScoreInput[]
    skipDuplicates?: boolean
  }

  export type CricketPlayerUpsertWithoutBatting_score_playerInput = {
    update: XOR<CricketPlayerUpdateWithoutBatting_score_playerInput, CricketPlayerUncheckedUpdateWithoutBatting_score_playerInput>
    create: XOR<CricketPlayerCreateWithoutBatting_score_playerInput, CricketPlayerUncheckedCreateWithoutBatting_score_playerInput>
    where?: CricketPlayerWhereInput
  }

  export type CricketPlayerUpdateToOneWithWhereWithoutBatting_score_playerInput = {
    where?: CricketPlayerWhereInput
    data: XOR<CricketPlayerUpdateWithoutBatting_score_playerInput, CricketPlayerUncheckedUpdateWithoutBatting_score_playerInput>
  }

  export type CricketPlayerUpdateWithoutBatting_score_playerInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    isSelected?: BoolFieldUpdateOperationsInput | boolean
    isCaptain?: BoolFieldUpdateOperationsInput | boolean
    isWicketKeeper?: BoolFieldUpdateOperationsInput | boolean
    isAllRounder?: BoolFieldUpdateOperationsInput | boolean
    isBatsman?: BoolFieldUpdateOperationsInput | boolean
    isBowler?: BoolFieldUpdateOperationsInput | boolean
    runs?: IntFieldUpdateOperationsInput | number
    noOfMatchesPlayed?: IntFieldUpdateOperationsInput | number
    noOfSixes?: IntFieldUpdateOperationsInput | number
    noOfFours?: IntFieldUpdateOperationsInput | number
    noOfWicketsTaken?: IntFieldUpdateOperationsInput | number
    noOfHalfCenturies?: IntFieldUpdateOperationsInput | number
    noOfCenturies?: IntFieldUpdateOperationsInput | number
    noOfWickets?: IntFieldUpdateOperationsInput | number
    user?: UsersUpdateOneRequiredWithoutCricket_playersNestedInput
    matches?: CricketMatchUpdateManyWithoutPlayersNestedInput
    team?: CricketTeamUpdateOneWithoutPlayer_teamNestedInput
    user_cricket_players?: UsersUpdateManyWithoutCricketPlayerNestedInput
    team_players?: CricketTeamUpdateManyWithoutPlayersNestedInput
    bowling_score_player?: CricketMatchPlayerBowlingScoreUpdateManyWithoutPlayerNestedInput
  }

  export type CricketPlayerUncheckedUpdateWithoutBatting_score_playerInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    isSelected?: BoolFieldUpdateOperationsInput | boolean
    isCaptain?: BoolFieldUpdateOperationsInput | boolean
    isWicketKeeper?: BoolFieldUpdateOperationsInput | boolean
    isAllRounder?: BoolFieldUpdateOperationsInput | boolean
    isBatsman?: BoolFieldUpdateOperationsInput | boolean
    isBowler?: BoolFieldUpdateOperationsInput | boolean
    runs?: IntFieldUpdateOperationsInput | number
    noOfMatchesPlayed?: IntFieldUpdateOperationsInput | number
    noOfSixes?: IntFieldUpdateOperationsInput | number
    noOfFours?: IntFieldUpdateOperationsInput | number
    noOfWicketsTaken?: IntFieldUpdateOperationsInput | number
    noOfHalfCenturies?: IntFieldUpdateOperationsInput | number
    noOfCenturies?: IntFieldUpdateOperationsInput | number
    noOfWickets?: IntFieldUpdateOperationsInput | number
    matches?: CricketMatchUncheckedUpdateManyWithoutPlayersNestedInput
    user_cricket_players?: UsersUncheckedUpdateManyWithoutCricketPlayerNestedInput
    team_players?: CricketTeamUncheckedUpdateManyWithoutPlayersNestedInput
    bowling_score_player?: CricketMatchPlayerBowlingScoreUncheckedUpdateManyWithoutPlayerNestedInput
  }

  export type CricketMatchUpsertWithoutTeam_batting_scoreInput = {
    update: XOR<CricketMatchUpdateWithoutTeam_batting_scoreInput, CricketMatchUncheckedUpdateWithoutTeam_batting_scoreInput>
    create: XOR<CricketMatchCreateWithoutTeam_batting_scoreInput, CricketMatchUncheckedCreateWithoutTeam_batting_scoreInput>
    where?: CricketMatchWhereInput
  }

  export type CricketMatchUpdateToOneWithWhereWithoutTeam_batting_scoreInput = {
    where?: CricketMatchWhereInput
    data: XOR<CricketMatchUpdateWithoutTeam_batting_scoreInput, CricketMatchUncheckedUpdateWithoutTeam_batting_scoreInput>
  }

  export type CricketMatchUpdateWithoutTeam_batting_scoreInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    played?: BoolFieldUpdateOperationsInput | boolean
    tossDecision?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    year?: StringFieldUpdateOperationsInput | string
    dependency?: BoolFieldUpdateOperationsInput | boolean
    dependentOn?: NullableStringFieldUpdateOperationsInput | string | null
    team1Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team2Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team1Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team2Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team1Balls?: NullableIntFieldUpdateOperationsInput | number | null
    team2Balls?: NullableIntFieldUpdateOperationsInput | number | null
    overs?: NullableIntFieldUpdateOperationsInput | number | null
    powerPlayOvers?: NullableIntFieldUpdateOperationsInput | number | null
    overPerBowler?: NullableIntFieldUpdateOperationsInput | number | null
    tossWonByTeam?: CricketTeamUpdateOneWithoutToss_winning_teamNestedInput
    currentOver?: CricketOverUpdateOneWithoutMatch_current_overNestedInput
    wonByTeam?: CricketTeamUpdateOneWithoutWinning_teamNestedInput
    teamA?: CricketTeamUpdateOneWithoutCricketMatchTeamANestedInput
    teamB?: CricketTeamUpdateOneWithoutCricketMatchTeamBNestedInput
    teamAScore?: CricketTeamMatchDataUpdateOneWithoutCricketMatchTeamANestedInput
    teamBScore?: CricketTeamMatchDataUpdateOneWithoutCricketMatchTeamBNestedInput
    battingTeam?: CricketTeamMatchDataUpdateOneWithoutMatchBttingTeamNestedInput
    bowlingTeam?: CricketTeamMatchDataUpdateOneWithoutMatchBowlingTeamNestedInput
    players?: CricketPlayerUpdateManyWithoutMatchesNestedInput
    over_match?: CricketOverUpdateManyWithoutMatchNestedInput
    team_bowling_score?: CricketMatchPlayerBowlingScoreUpdateManyWithoutMatchNestedInput
  }

  export type CricketMatchUncheckedUpdateWithoutTeam_batting_scoreInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    played?: BoolFieldUpdateOperationsInput | boolean
    tossWonBy?: NullableStringFieldUpdateOperationsInput | string | null
    tossDecision?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    year?: StringFieldUpdateOperationsInput | string
    dependency?: BoolFieldUpdateOperationsInput | boolean
    dependentOn?: NullableStringFieldUpdateOperationsInput | string | null
    team1Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team2Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team1Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team2Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team1Balls?: NullableIntFieldUpdateOperationsInput | number | null
    team2Balls?: NullableIntFieldUpdateOperationsInput | number | null
    overs?: NullableIntFieldUpdateOperationsInput | number | null
    powerPlayOvers?: NullableIntFieldUpdateOperationsInput | number | null
    overPerBowler?: NullableIntFieldUpdateOperationsInput | number | null
    currentOverId?: NullableStringFieldUpdateOperationsInput | string | null
    wonBy?: NullableStringFieldUpdateOperationsInput | string | null
    teamAId?: NullableStringFieldUpdateOperationsInput | string | null
    teamBId?: NullableStringFieldUpdateOperationsInput | string | null
    teamAScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    teamBScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    battingTeamScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    bowlingTeamScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    players?: CricketPlayerUncheckedUpdateManyWithoutMatchesNestedInput
    over_match?: CricketOverUncheckedUpdateManyWithoutMatchNestedInput
    team_bowling_score?: CricketMatchPlayerBowlingScoreUncheckedUpdateManyWithoutMatchNestedInput
  }

  export type CricketTeamUpsertWithoutCricket_match_player_batting_scoreInput = {
    update: XOR<CricketTeamUpdateWithoutCricket_match_player_batting_scoreInput, CricketTeamUncheckedUpdateWithoutCricket_match_player_batting_scoreInput>
    create: XOR<CricketTeamCreateWithoutCricket_match_player_batting_scoreInput, CricketTeamUncheckedCreateWithoutCricket_match_player_batting_scoreInput>
    where?: CricketTeamWhereInput
  }

  export type CricketTeamUpdateToOneWithWhereWithoutCricket_match_player_batting_scoreInput = {
    where?: CricketTeamWhereInput
    data: XOR<CricketTeamUpdateWithoutCricket_match_player_batting_scoreInput, CricketTeamUncheckedUpdateWithoutCricket_match_player_batting_scoreInput>
  }

  export type CricketTeamUpdateWithoutCricket_match_player_batting_scoreInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    players?: CricketPlayerUpdateManyWithoutTeam_playersNestedInput
    winning_team?: CricketMatchUpdateManyWithoutWonByTeamNestedInput
    toss_winning_team?: CricketMatchUpdateManyWithoutTossWonByTeamNestedInput
    player_team?: CricketPlayerUpdateManyWithoutTeamNestedInput
    cricket_match_teamData?: CricketTeamMatchDataUpdateManyWithoutTeamNestedInput
    cricket_match_player_bowling_score?: CricketMatchPlayerBowlingScoreUpdateManyWithoutTeamNestedInput
    CricketMatchTeamA?: CricketMatchUpdateManyWithoutTeamANestedInput
    CricketMatchTeamB?: CricketMatchUpdateManyWithoutTeamBNestedInput
  }

  export type CricketTeamUncheckedUpdateWithoutCricket_match_player_batting_scoreInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    players?: CricketPlayerUncheckedUpdateManyWithoutTeam_playersNestedInput
    winning_team?: CricketMatchUncheckedUpdateManyWithoutWonByTeamNestedInput
    toss_winning_team?: CricketMatchUncheckedUpdateManyWithoutTossWonByTeamNestedInput
    player_team?: CricketPlayerUncheckedUpdateManyWithoutTeamNestedInput
    cricket_match_teamData?: CricketTeamMatchDataUncheckedUpdateManyWithoutTeamNestedInput
    cricket_match_player_bowling_score?: CricketMatchPlayerBowlingScoreUncheckedUpdateManyWithoutTeamNestedInput
    CricketMatchTeamA?: CricketMatchUncheckedUpdateManyWithoutTeamANestedInput
    CricketMatchTeamB?: CricketMatchUncheckedUpdateManyWithoutTeamBNestedInput
  }

  export type CricketTeamMatchDataUpsertWithWhereUniqueWithoutBattersInput = {
    where: CricketTeamMatchDataWhereUniqueInput
    update: XOR<CricketTeamMatchDataUpdateWithoutBattersInput, CricketTeamMatchDataUncheckedUpdateWithoutBattersInput>
    create: XOR<CricketTeamMatchDataCreateWithoutBattersInput, CricketTeamMatchDataUncheckedCreateWithoutBattersInput>
  }

  export type CricketTeamMatchDataUpdateWithWhereUniqueWithoutBattersInput = {
    where: CricketTeamMatchDataWhereUniqueInput
    data: XOR<CricketTeamMatchDataUpdateWithoutBattersInput, CricketTeamMatchDataUncheckedUpdateWithoutBattersInput>
  }

  export type CricketTeamMatchDataUpdateManyWithWhereWithoutBattersInput = {
    where: CricketTeamMatchDataScalarWhereInput
    data: XOR<CricketTeamMatchDataUpdateManyMutationInput, CricketTeamMatchDataUncheckedUpdateManyWithoutBattersInput>
  }

  export type CricketOverUpsertWithWhereUniqueWithoutStrikerScoreInput = {
    where: CricketOverWhereUniqueInput
    update: XOR<CricketOverUpdateWithoutStrikerScoreInput, CricketOverUncheckedUpdateWithoutStrikerScoreInput>
    create: XOR<CricketOverCreateWithoutStrikerScoreInput, CricketOverUncheckedCreateWithoutStrikerScoreInput>
  }

  export type CricketOverUpdateWithWhereUniqueWithoutStrikerScoreInput = {
    where: CricketOverWhereUniqueInput
    data: XOR<CricketOverUpdateWithoutStrikerScoreInput, CricketOverUncheckedUpdateWithoutStrikerScoreInput>
  }

  export type CricketOverUpdateManyWithWhereWithoutStrikerScoreInput = {
    where: CricketOverScalarWhereInput
    data: XOR<CricketOverUpdateManyMutationInput, CricketOverUncheckedUpdateManyWithoutStrikerScoreInput>
  }

  export type CricketOverUpsertWithWhereUniqueWithoutNonStrikerScoreInput = {
    where: CricketOverWhereUniqueInput
    update: XOR<CricketOverUpdateWithoutNonStrikerScoreInput, CricketOverUncheckedUpdateWithoutNonStrikerScoreInput>
    create: XOR<CricketOverCreateWithoutNonStrikerScoreInput, CricketOverUncheckedCreateWithoutNonStrikerScoreInput>
  }

  export type CricketOverUpdateWithWhereUniqueWithoutNonStrikerScoreInput = {
    where: CricketOverWhereUniqueInput
    data: XOR<CricketOverUpdateWithoutNonStrikerScoreInput, CricketOverUncheckedUpdateWithoutNonStrikerScoreInput>
  }

  export type CricketOverUpdateManyWithWhereWithoutNonStrikerScoreInput = {
    where: CricketOverScalarWhereInput
    data: XOR<CricketOverUpdateManyMutationInput, CricketOverUncheckedUpdateManyWithoutNonStrikerScoreInput>
  }

  export type CricketPlayerCreateWithoutBowling_score_playerInput = {
    sis_id?: string
    isSelected?: boolean
    isCaptain?: boolean
    isWicketKeeper?: boolean
    isAllRounder?: boolean
    isBatsman?: boolean
    isBowler?: boolean
    runs?: number
    noOfMatchesPlayed?: number
    noOfSixes?: number
    noOfFours?: number
    noOfWicketsTaken?: number
    noOfHalfCenturies?: number
    noOfCenturies?: number
    noOfWickets?: number
    user: UsersCreateNestedOneWithoutCricket_playersInput
    matches?: CricketMatchCreateNestedManyWithoutPlayersInput
    team?: CricketTeamCreateNestedOneWithoutPlayer_teamInput
    user_cricket_players?: UsersCreateNestedManyWithoutCricketPlayerInput
    team_players?: CricketTeamCreateNestedManyWithoutPlayersInput
    batting_score_player?: CricketMatchPlayerBattingScoreCreateNestedManyWithoutPlayerInput
  }

  export type CricketPlayerUncheckedCreateWithoutBowling_score_playerInput = {
    sis_id?: string
    userId: string
    teamId?: string | null
    isSelected?: boolean
    isCaptain?: boolean
    isWicketKeeper?: boolean
    isAllRounder?: boolean
    isBatsman?: boolean
    isBowler?: boolean
    runs?: number
    noOfMatchesPlayed?: number
    noOfSixes?: number
    noOfFours?: number
    noOfWicketsTaken?: number
    noOfHalfCenturies?: number
    noOfCenturies?: number
    noOfWickets?: number
    matches?: CricketMatchUncheckedCreateNestedManyWithoutPlayersInput
    user_cricket_players?: UsersUncheckedCreateNestedManyWithoutCricketPlayerInput
    team_players?: CricketTeamUncheckedCreateNestedManyWithoutPlayersInput
    batting_score_player?: CricketMatchPlayerBattingScoreUncheckedCreateNestedManyWithoutPlayerInput
  }

  export type CricketPlayerCreateOrConnectWithoutBowling_score_playerInput = {
    where: CricketPlayerWhereUniqueInput
    create: XOR<CricketPlayerCreateWithoutBowling_score_playerInput, CricketPlayerUncheckedCreateWithoutBowling_score_playerInput>
  }

  export type CricketMatchCreateWithoutTeam_bowling_scoreInput = {
    sis_id?: string
    played?: boolean
    tossDecision?: string | null
    date: Date | string
    venue?: string | null
    year: string
    dependency?: boolean
    dependentOn?: string | null
    team1Wickets?: number | null
    team2Wickets?: number | null
    team1Runs?: number | null
    team2Runs?: number | null
    team1Balls?: number | null
    team2Balls?: number | null
    overs?: number | null
    powerPlayOvers?: number | null
    overPerBowler?: number | null
    tossWonByTeam?: CricketTeamCreateNestedOneWithoutToss_winning_teamInput
    currentOver?: CricketOverCreateNestedOneWithoutMatch_current_overInput
    wonByTeam?: CricketTeamCreateNestedOneWithoutWinning_teamInput
    teamA?: CricketTeamCreateNestedOneWithoutCricketMatchTeamAInput
    teamB?: CricketTeamCreateNestedOneWithoutCricketMatchTeamBInput
    teamAScore?: CricketTeamMatchDataCreateNestedOneWithoutCricketMatchTeamAInput
    teamBScore?: CricketTeamMatchDataCreateNestedOneWithoutCricketMatchTeamBInput
    battingTeam?: CricketTeamMatchDataCreateNestedOneWithoutMatchBttingTeamInput
    bowlingTeam?: CricketTeamMatchDataCreateNestedOneWithoutMatchBowlingTeamInput
    players?: CricketPlayerCreateNestedManyWithoutMatchesInput
    over_match?: CricketOverCreateNestedManyWithoutMatchInput
    team_batting_score?: CricketMatchPlayerBattingScoreCreateNestedManyWithoutMatchInput
  }

  export type CricketMatchUncheckedCreateWithoutTeam_bowling_scoreInput = {
    sis_id?: string
    played?: boolean
    tossWonBy?: string | null
    tossDecision?: string | null
    date: Date | string
    venue?: string | null
    year: string
    dependency?: boolean
    dependentOn?: string | null
    team1Wickets?: number | null
    team2Wickets?: number | null
    team1Runs?: number | null
    team2Runs?: number | null
    team1Balls?: number | null
    team2Balls?: number | null
    overs?: number | null
    powerPlayOvers?: number | null
    overPerBowler?: number | null
    currentOverId?: string | null
    wonBy?: string | null
    teamAId?: string | null
    teamBId?: string | null
    teamAScoreId?: string | null
    teamBScoreId?: string | null
    battingTeamScoreId?: string | null
    bowlingTeamScoreId?: string | null
    players?: CricketPlayerUncheckedCreateNestedManyWithoutMatchesInput
    over_match?: CricketOverUncheckedCreateNestedManyWithoutMatchInput
    team_batting_score?: CricketMatchPlayerBattingScoreUncheckedCreateNestedManyWithoutMatchInput
  }

  export type CricketMatchCreateOrConnectWithoutTeam_bowling_scoreInput = {
    where: CricketMatchWhereUniqueInput
    create: XOR<CricketMatchCreateWithoutTeam_bowling_scoreInput, CricketMatchUncheckedCreateWithoutTeam_bowling_scoreInput>
  }

  export type CricketTeamCreateWithoutCricket_match_player_bowling_scoreInput = {
    sis_id?: string
    name: string
    year: string
    players?: CricketPlayerCreateNestedManyWithoutTeam_playersInput
    winning_team?: CricketMatchCreateNestedManyWithoutWonByTeamInput
    toss_winning_team?: CricketMatchCreateNestedManyWithoutTossWonByTeamInput
    player_team?: CricketPlayerCreateNestedManyWithoutTeamInput
    cricket_match_teamData?: CricketTeamMatchDataCreateNestedManyWithoutTeamInput
    cricket_match_player_batting_score?: CricketMatchPlayerBattingScoreCreateNestedManyWithoutTeamInput
    CricketMatchTeamA?: CricketMatchCreateNestedManyWithoutTeamAInput
    CricketMatchTeamB?: CricketMatchCreateNestedManyWithoutTeamBInput
  }

  export type CricketTeamUncheckedCreateWithoutCricket_match_player_bowling_scoreInput = {
    sis_id?: string
    name: string
    year: string
    players?: CricketPlayerUncheckedCreateNestedManyWithoutTeam_playersInput
    winning_team?: CricketMatchUncheckedCreateNestedManyWithoutWonByTeamInput
    toss_winning_team?: CricketMatchUncheckedCreateNestedManyWithoutTossWonByTeamInput
    player_team?: CricketPlayerUncheckedCreateNestedManyWithoutTeamInput
    cricket_match_teamData?: CricketTeamMatchDataUncheckedCreateNestedManyWithoutTeamInput
    cricket_match_player_batting_score?: CricketMatchPlayerBattingScoreUncheckedCreateNestedManyWithoutTeamInput
    CricketMatchTeamA?: CricketMatchUncheckedCreateNestedManyWithoutTeamAInput
    CricketMatchTeamB?: CricketMatchUncheckedCreateNestedManyWithoutTeamBInput
  }

  export type CricketTeamCreateOrConnectWithoutCricket_match_player_bowling_scoreInput = {
    where: CricketTeamWhereUniqueInput
    create: XOR<CricketTeamCreateWithoutCricket_match_player_bowling_scoreInput, CricketTeamUncheckedCreateWithoutCricket_match_player_bowling_scoreInput>
  }

  export type CricketTeamMatchDataCreateWithoutBowlersInput = {
    sis_id?: string
    matchId?: string | null
    name?: string | null
    runs?: number
    wideRuns?: number
    nbRuns?: number
    byeRuns?: number
    lbRuns?: number
    wickets?: number
    balls?: number
    batters?: CricketMatchPlayerBattingScoreCreateNestedManyWithoutMatch_battersInput
    team?: CricketTeamCreateNestedOneWithoutCricket_match_teamDataInput
    cricketMatchTeamA?: CricketMatchCreateNestedManyWithoutTeamAScoreInput
    cricketMatchTeamB?: CricketMatchCreateNestedManyWithoutTeamBScoreInput
    matchBttingTeam?: CricketMatchCreateNestedManyWithoutBattingTeamInput
    matchBowlingTeam?: CricketMatchCreateNestedManyWithoutBowlingTeamInput
  }

  export type CricketTeamMatchDataUncheckedCreateWithoutBowlersInput = {
    sis_id?: string
    teamId?: string | null
    matchId?: string | null
    name?: string | null
    runs?: number
    wideRuns?: number
    nbRuns?: number
    byeRuns?: number
    lbRuns?: number
    wickets?: number
    balls?: number
    batters?: CricketMatchPlayerBattingScoreUncheckedCreateNestedManyWithoutMatch_battersInput
    cricketMatchTeamA?: CricketMatchUncheckedCreateNestedManyWithoutTeamAScoreInput
    cricketMatchTeamB?: CricketMatchUncheckedCreateNestedManyWithoutTeamBScoreInput
    matchBttingTeam?: CricketMatchUncheckedCreateNestedManyWithoutBattingTeamInput
    matchBowlingTeam?: CricketMatchUncheckedCreateNestedManyWithoutBowlingTeamInput
  }

  export type CricketTeamMatchDataCreateOrConnectWithoutBowlersInput = {
    where: CricketTeamMatchDataWhereUniqueInput
    create: XOR<CricketTeamMatchDataCreateWithoutBowlersInput, CricketTeamMatchDataUncheckedCreateWithoutBowlersInput>
  }

  export type CricketOverCreateWithoutBowlerScoreInput = {
    sis_id?: string
    runs?: number
    wickets?: number
    totalBalls?: number
    validBalls?: number
    match: CricketMatchCreateNestedOneWithoutOver_matchInput
    strikerScore: CricketMatchPlayerBattingScoreCreateNestedOneWithoutOver_strikerInput
    nonStrikerScore: CricketMatchPlayerBattingScoreCreateNestedOneWithoutOver_non_strikerInput
    balls?: CricketOverBallCreateNestedManyWithoutOverInput
    match_current_over?: CricketMatchCreateNestedManyWithoutCurrentOverInput
  }

  export type CricketOverUncheckedCreateWithoutBowlerScoreInput = {
    sis_id?: string
    matchId: string
    runs?: number
    wickets?: number
    totalBalls?: number
    validBalls?: number
    strikerScoreId: string
    nonStrikerScoreId: string
    balls?: CricketOverBallUncheckedCreateNestedManyWithoutOverInput
    match_current_over?: CricketMatchUncheckedCreateNestedManyWithoutCurrentOverInput
  }

  export type CricketOverCreateOrConnectWithoutBowlerScoreInput = {
    where: CricketOverWhereUniqueInput
    create: XOR<CricketOverCreateWithoutBowlerScoreInput, CricketOverUncheckedCreateWithoutBowlerScoreInput>
  }

  export type CricketOverCreateManyBowlerScoreInputEnvelope = {
    data: CricketOverCreateManyBowlerScoreInput | CricketOverCreateManyBowlerScoreInput[]
    skipDuplicates?: boolean
  }

  export type CricketPlayerUpsertWithoutBowling_score_playerInput = {
    update: XOR<CricketPlayerUpdateWithoutBowling_score_playerInput, CricketPlayerUncheckedUpdateWithoutBowling_score_playerInput>
    create: XOR<CricketPlayerCreateWithoutBowling_score_playerInput, CricketPlayerUncheckedCreateWithoutBowling_score_playerInput>
    where?: CricketPlayerWhereInput
  }

  export type CricketPlayerUpdateToOneWithWhereWithoutBowling_score_playerInput = {
    where?: CricketPlayerWhereInput
    data: XOR<CricketPlayerUpdateWithoutBowling_score_playerInput, CricketPlayerUncheckedUpdateWithoutBowling_score_playerInput>
  }

  export type CricketPlayerUpdateWithoutBowling_score_playerInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    isSelected?: BoolFieldUpdateOperationsInput | boolean
    isCaptain?: BoolFieldUpdateOperationsInput | boolean
    isWicketKeeper?: BoolFieldUpdateOperationsInput | boolean
    isAllRounder?: BoolFieldUpdateOperationsInput | boolean
    isBatsman?: BoolFieldUpdateOperationsInput | boolean
    isBowler?: BoolFieldUpdateOperationsInput | boolean
    runs?: IntFieldUpdateOperationsInput | number
    noOfMatchesPlayed?: IntFieldUpdateOperationsInput | number
    noOfSixes?: IntFieldUpdateOperationsInput | number
    noOfFours?: IntFieldUpdateOperationsInput | number
    noOfWicketsTaken?: IntFieldUpdateOperationsInput | number
    noOfHalfCenturies?: IntFieldUpdateOperationsInput | number
    noOfCenturies?: IntFieldUpdateOperationsInput | number
    noOfWickets?: IntFieldUpdateOperationsInput | number
    user?: UsersUpdateOneRequiredWithoutCricket_playersNestedInput
    matches?: CricketMatchUpdateManyWithoutPlayersNestedInput
    team?: CricketTeamUpdateOneWithoutPlayer_teamNestedInput
    user_cricket_players?: UsersUpdateManyWithoutCricketPlayerNestedInput
    team_players?: CricketTeamUpdateManyWithoutPlayersNestedInput
    batting_score_player?: CricketMatchPlayerBattingScoreUpdateManyWithoutPlayerNestedInput
  }

  export type CricketPlayerUncheckedUpdateWithoutBowling_score_playerInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    isSelected?: BoolFieldUpdateOperationsInput | boolean
    isCaptain?: BoolFieldUpdateOperationsInput | boolean
    isWicketKeeper?: BoolFieldUpdateOperationsInput | boolean
    isAllRounder?: BoolFieldUpdateOperationsInput | boolean
    isBatsman?: BoolFieldUpdateOperationsInput | boolean
    isBowler?: BoolFieldUpdateOperationsInput | boolean
    runs?: IntFieldUpdateOperationsInput | number
    noOfMatchesPlayed?: IntFieldUpdateOperationsInput | number
    noOfSixes?: IntFieldUpdateOperationsInput | number
    noOfFours?: IntFieldUpdateOperationsInput | number
    noOfWicketsTaken?: IntFieldUpdateOperationsInput | number
    noOfHalfCenturies?: IntFieldUpdateOperationsInput | number
    noOfCenturies?: IntFieldUpdateOperationsInput | number
    noOfWickets?: IntFieldUpdateOperationsInput | number
    matches?: CricketMatchUncheckedUpdateManyWithoutPlayersNestedInput
    user_cricket_players?: UsersUncheckedUpdateManyWithoutCricketPlayerNestedInput
    team_players?: CricketTeamUncheckedUpdateManyWithoutPlayersNestedInput
    batting_score_player?: CricketMatchPlayerBattingScoreUncheckedUpdateManyWithoutPlayerNestedInput
  }

  export type CricketMatchUpsertWithoutTeam_bowling_scoreInput = {
    update: XOR<CricketMatchUpdateWithoutTeam_bowling_scoreInput, CricketMatchUncheckedUpdateWithoutTeam_bowling_scoreInput>
    create: XOR<CricketMatchCreateWithoutTeam_bowling_scoreInput, CricketMatchUncheckedCreateWithoutTeam_bowling_scoreInput>
    where?: CricketMatchWhereInput
  }

  export type CricketMatchUpdateToOneWithWhereWithoutTeam_bowling_scoreInput = {
    where?: CricketMatchWhereInput
    data: XOR<CricketMatchUpdateWithoutTeam_bowling_scoreInput, CricketMatchUncheckedUpdateWithoutTeam_bowling_scoreInput>
  }

  export type CricketMatchUpdateWithoutTeam_bowling_scoreInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    played?: BoolFieldUpdateOperationsInput | boolean
    tossDecision?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    year?: StringFieldUpdateOperationsInput | string
    dependency?: BoolFieldUpdateOperationsInput | boolean
    dependentOn?: NullableStringFieldUpdateOperationsInput | string | null
    team1Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team2Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team1Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team2Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team1Balls?: NullableIntFieldUpdateOperationsInput | number | null
    team2Balls?: NullableIntFieldUpdateOperationsInput | number | null
    overs?: NullableIntFieldUpdateOperationsInput | number | null
    powerPlayOvers?: NullableIntFieldUpdateOperationsInput | number | null
    overPerBowler?: NullableIntFieldUpdateOperationsInput | number | null
    tossWonByTeam?: CricketTeamUpdateOneWithoutToss_winning_teamNestedInput
    currentOver?: CricketOverUpdateOneWithoutMatch_current_overNestedInput
    wonByTeam?: CricketTeamUpdateOneWithoutWinning_teamNestedInput
    teamA?: CricketTeamUpdateOneWithoutCricketMatchTeamANestedInput
    teamB?: CricketTeamUpdateOneWithoutCricketMatchTeamBNestedInput
    teamAScore?: CricketTeamMatchDataUpdateOneWithoutCricketMatchTeamANestedInput
    teamBScore?: CricketTeamMatchDataUpdateOneWithoutCricketMatchTeamBNestedInput
    battingTeam?: CricketTeamMatchDataUpdateOneWithoutMatchBttingTeamNestedInput
    bowlingTeam?: CricketTeamMatchDataUpdateOneWithoutMatchBowlingTeamNestedInput
    players?: CricketPlayerUpdateManyWithoutMatchesNestedInput
    over_match?: CricketOverUpdateManyWithoutMatchNestedInput
    team_batting_score?: CricketMatchPlayerBattingScoreUpdateManyWithoutMatchNestedInput
  }

  export type CricketMatchUncheckedUpdateWithoutTeam_bowling_scoreInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    played?: BoolFieldUpdateOperationsInput | boolean
    tossWonBy?: NullableStringFieldUpdateOperationsInput | string | null
    tossDecision?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    year?: StringFieldUpdateOperationsInput | string
    dependency?: BoolFieldUpdateOperationsInput | boolean
    dependentOn?: NullableStringFieldUpdateOperationsInput | string | null
    team1Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team2Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team1Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team2Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team1Balls?: NullableIntFieldUpdateOperationsInput | number | null
    team2Balls?: NullableIntFieldUpdateOperationsInput | number | null
    overs?: NullableIntFieldUpdateOperationsInput | number | null
    powerPlayOvers?: NullableIntFieldUpdateOperationsInput | number | null
    overPerBowler?: NullableIntFieldUpdateOperationsInput | number | null
    currentOverId?: NullableStringFieldUpdateOperationsInput | string | null
    wonBy?: NullableStringFieldUpdateOperationsInput | string | null
    teamAId?: NullableStringFieldUpdateOperationsInput | string | null
    teamBId?: NullableStringFieldUpdateOperationsInput | string | null
    teamAScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    teamBScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    battingTeamScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    bowlingTeamScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    players?: CricketPlayerUncheckedUpdateManyWithoutMatchesNestedInput
    over_match?: CricketOverUncheckedUpdateManyWithoutMatchNestedInput
    team_batting_score?: CricketMatchPlayerBattingScoreUncheckedUpdateManyWithoutMatchNestedInput
  }

  export type CricketTeamUpsertWithoutCricket_match_player_bowling_scoreInput = {
    update: XOR<CricketTeamUpdateWithoutCricket_match_player_bowling_scoreInput, CricketTeamUncheckedUpdateWithoutCricket_match_player_bowling_scoreInput>
    create: XOR<CricketTeamCreateWithoutCricket_match_player_bowling_scoreInput, CricketTeamUncheckedCreateWithoutCricket_match_player_bowling_scoreInput>
    where?: CricketTeamWhereInput
  }

  export type CricketTeamUpdateToOneWithWhereWithoutCricket_match_player_bowling_scoreInput = {
    where?: CricketTeamWhereInput
    data: XOR<CricketTeamUpdateWithoutCricket_match_player_bowling_scoreInput, CricketTeamUncheckedUpdateWithoutCricket_match_player_bowling_scoreInput>
  }

  export type CricketTeamUpdateWithoutCricket_match_player_bowling_scoreInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    players?: CricketPlayerUpdateManyWithoutTeam_playersNestedInput
    winning_team?: CricketMatchUpdateManyWithoutWonByTeamNestedInput
    toss_winning_team?: CricketMatchUpdateManyWithoutTossWonByTeamNestedInput
    player_team?: CricketPlayerUpdateManyWithoutTeamNestedInput
    cricket_match_teamData?: CricketTeamMatchDataUpdateManyWithoutTeamNestedInput
    cricket_match_player_batting_score?: CricketMatchPlayerBattingScoreUpdateManyWithoutTeamNestedInput
    CricketMatchTeamA?: CricketMatchUpdateManyWithoutTeamANestedInput
    CricketMatchTeamB?: CricketMatchUpdateManyWithoutTeamBNestedInput
  }

  export type CricketTeamUncheckedUpdateWithoutCricket_match_player_bowling_scoreInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    players?: CricketPlayerUncheckedUpdateManyWithoutTeam_playersNestedInput
    winning_team?: CricketMatchUncheckedUpdateManyWithoutWonByTeamNestedInput
    toss_winning_team?: CricketMatchUncheckedUpdateManyWithoutTossWonByTeamNestedInput
    player_team?: CricketPlayerUncheckedUpdateManyWithoutTeamNestedInput
    cricket_match_teamData?: CricketTeamMatchDataUncheckedUpdateManyWithoutTeamNestedInput
    cricket_match_player_batting_score?: CricketMatchPlayerBattingScoreUncheckedUpdateManyWithoutTeamNestedInput
    CricketMatchTeamA?: CricketMatchUncheckedUpdateManyWithoutTeamANestedInput
    CricketMatchTeamB?: CricketMatchUncheckedUpdateManyWithoutTeamBNestedInput
  }

  export type CricketTeamMatchDataUpsertWithWhereUniqueWithoutBowlersInput = {
    where: CricketTeamMatchDataWhereUniqueInput
    update: XOR<CricketTeamMatchDataUpdateWithoutBowlersInput, CricketTeamMatchDataUncheckedUpdateWithoutBowlersInput>
    create: XOR<CricketTeamMatchDataCreateWithoutBowlersInput, CricketTeamMatchDataUncheckedCreateWithoutBowlersInput>
  }

  export type CricketTeamMatchDataUpdateWithWhereUniqueWithoutBowlersInput = {
    where: CricketTeamMatchDataWhereUniqueInput
    data: XOR<CricketTeamMatchDataUpdateWithoutBowlersInput, CricketTeamMatchDataUncheckedUpdateWithoutBowlersInput>
  }

  export type CricketTeamMatchDataUpdateManyWithWhereWithoutBowlersInput = {
    where: CricketTeamMatchDataScalarWhereInput
    data: XOR<CricketTeamMatchDataUpdateManyMutationInput, CricketTeamMatchDataUncheckedUpdateManyWithoutBowlersInput>
  }

  export type CricketOverUpsertWithWhereUniqueWithoutBowlerScoreInput = {
    where: CricketOverWhereUniqueInput
    update: XOR<CricketOverUpdateWithoutBowlerScoreInput, CricketOverUncheckedUpdateWithoutBowlerScoreInput>
    create: XOR<CricketOverCreateWithoutBowlerScoreInput, CricketOverUncheckedCreateWithoutBowlerScoreInput>
  }

  export type CricketOverUpdateWithWhereUniqueWithoutBowlerScoreInput = {
    where: CricketOverWhereUniqueInput
    data: XOR<CricketOverUpdateWithoutBowlerScoreInput, CricketOverUncheckedUpdateWithoutBowlerScoreInput>
  }

  export type CricketOverUpdateManyWithWhereWithoutBowlerScoreInput = {
    where: CricketOverScalarWhereInput
    data: XOR<CricketOverUpdateManyMutationInput, CricketOverUncheckedUpdateManyWithoutBowlerScoreInput>
  }

  export type UsersCreateWithoutVerification_tokenInput = {
    userId: string
    email: string
    name?: string | null
    password?: string | null
    token?: string | null
    roles?: UsersCreaterolesInput | $Enums.Role[]
    createdAt?: Date | string
    updatedAt?: Date | string
    rec_status?: boolean
    cricketPlayer?: CricketPlayerCreateNestedOneWithoutUser_cricket_playersInput
    cricket_players?: CricketPlayerCreateNestedManyWithoutUserInput
    user_tickets?: TicketCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateWithoutVerification_tokenInput = {
    userId: string
    email: string
    name?: string | null
    password?: string | null
    token?: string | null
    roles?: UsersCreaterolesInput | $Enums.Role[]
    createdAt?: Date | string
    updatedAt?: Date | string
    rec_status?: boolean
    cricketPlayerId?: string | null
    cricket_players?: CricketPlayerUncheckedCreateNestedManyWithoutUserInput
    user_tickets?: TicketUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersCreateOrConnectWithoutVerification_tokenInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutVerification_tokenInput, UsersUncheckedCreateWithoutVerification_tokenInput>
  }

  export type UsersUpsertWithoutVerification_tokenInput = {
    update: XOR<UsersUpdateWithoutVerification_tokenInput, UsersUncheckedUpdateWithoutVerification_tokenInput>
    create: XOR<UsersCreateWithoutVerification_tokenInput, UsersUncheckedCreateWithoutVerification_tokenInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutVerification_tokenInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutVerification_tokenInput, UsersUncheckedUpdateWithoutVerification_tokenInput>
  }

  export type UsersUpdateWithoutVerification_tokenInput = {
    userId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: UsersUpdaterolesInput | $Enums.Role[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rec_status?: BoolFieldUpdateOperationsInput | boolean
    cricketPlayer?: CricketPlayerUpdateOneWithoutUser_cricket_playersNestedInput
    cricket_players?: CricketPlayerUpdateManyWithoutUserNestedInput
    user_tickets?: TicketUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutVerification_tokenInput = {
    userId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: UsersUpdaterolesInput | $Enums.Role[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rec_status?: BoolFieldUpdateOperationsInput | boolean
    cricketPlayerId?: NullableStringFieldUpdateOperationsInput | string | null
    cricket_players?: CricketPlayerUncheckedUpdateManyWithoutUserNestedInput
    user_tickets?: TicketUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UsersCreateWithoutUser_ticketsInput = {
    userId: string
    email: string
    name?: string | null
    password?: string | null
    token?: string | null
    roles?: UsersCreaterolesInput | $Enums.Role[]
    createdAt?: Date | string
    updatedAt?: Date | string
    rec_status?: boolean
    cricketPlayer?: CricketPlayerCreateNestedOneWithoutUser_cricket_playersInput
    cricket_players?: CricketPlayerCreateNestedManyWithoutUserInput
    verification_token?: VerificationTokenCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateWithoutUser_ticketsInput = {
    userId: string
    email: string
    name?: string | null
    password?: string | null
    token?: string | null
    roles?: UsersCreaterolesInput | $Enums.Role[]
    createdAt?: Date | string
    updatedAt?: Date | string
    rec_status?: boolean
    cricketPlayerId?: string | null
    cricket_players?: CricketPlayerUncheckedCreateNestedManyWithoutUserInput
    verification_token?: VerificationTokenUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersCreateOrConnectWithoutUser_ticketsInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutUser_ticketsInput, UsersUncheckedCreateWithoutUser_ticketsInput>
  }

  export type UsersUpsertWithoutUser_ticketsInput = {
    update: XOR<UsersUpdateWithoutUser_ticketsInput, UsersUncheckedUpdateWithoutUser_ticketsInput>
    create: XOR<UsersCreateWithoutUser_ticketsInput, UsersUncheckedCreateWithoutUser_ticketsInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutUser_ticketsInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutUser_ticketsInput, UsersUncheckedUpdateWithoutUser_ticketsInput>
  }

  export type UsersUpdateWithoutUser_ticketsInput = {
    userId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: UsersUpdaterolesInput | $Enums.Role[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rec_status?: BoolFieldUpdateOperationsInput | boolean
    cricketPlayer?: CricketPlayerUpdateOneWithoutUser_cricket_playersNestedInput
    cricket_players?: CricketPlayerUpdateManyWithoutUserNestedInput
    verification_token?: VerificationTokenUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutUser_ticketsInput = {
    userId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: UsersUpdaterolesInput | $Enums.Role[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rec_status?: BoolFieldUpdateOperationsInput | boolean
    cricketPlayerId?: NullableStringFieldUpdateOperationsInput | string | null
    cricket_players?: CricketPlayerUncheckedUpdateManyWithoutUserNestedInput
    verification_token?: VerificationTokenUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CricketPlayerCreateManyUserInput = {
    sis_id?: string
    teamId?: string | null
    isSelected?: boolean
    isCaptain?: boolean
    isWicketKeeper?: boolean
    isAllRounder?: boolean
    isBatsman?: boolean
    isBowler?: boolean
    runs?: number
    noOfMatchesPlayed?: number
    noOfSixes?: number
    noOfFours?: number
    noOfWicketsTaken?: number
    noOfHalfCenturies?: number
    noOfCenturies?: number
    noOfWickets?: number
  }

  export type VerificationTokenCreateManyUserInput = {
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
    expiration: Date | string
  }

  export type TicketCreateManyUserInput = {
    sis_id?: string
    userEmail: string
    userName: string
    title: string
    description: string
    visited?: boolean
    status?: string
    createdAt?: Date | string
    closedAt?: Date | string | null
  }

  export type CricketPlayerUpdateWithoutUserInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    isSelected?: BoolFieldUpdateOperationsInput | boolean
    isCaptain?: BoolFieldUpdateOperationsInput | boolean
    isWicketKeeper?: BoolFieldUpdateOperationsInput | boolean
    isAllRounder?: BoolFieldUpdateOperationsInput | boolean
    isBatsman?: BoolFieldUpdateOperationsInput | boolean
    isBowler?: BoolFieldUpdateOperationsInput | boolean
    runs?: IntFieldUpdateOperationsInput | number
    noOfMatchesPlayed?: IntFieldUpdateOperationsInput | number
    noOfSixes?: IntFieldUpdateOperationsInput | number
    noOfFours?: IntFieldUpdateOperationsInput | number
    noOfWicketsTaken?: IntFieldUpdateOperationsInput | number
    noOfHalfCenturies?: IntFieldUpdateOperationsInput | number
    noOfCenturies?: IntFieldUpdateOperationsInput | number
    noOfWickets?: IntFieldUpdateOperationsInput | number
    matches?: CricketMatchUpdateManyWithoutPlayersNestedInput
    team?: CricketTeamUpdateOneWithoutPlayer_teamNestedInput
    user_cricket_players?: UsersUpdateManyWithoutCricketPlayerNestedInput
    team_players?: CricketTeamUpdateManyWithoutPlayersNestedInput
    batting_score_player?: CricketMatchPlayerBattingScoreUpdateManyWithoutPlayerNestedInput
    bowling_score_player?: CricketMatchPlayerBowlingScoreUpdateManyWithoutPlayerNestedInput
  }

  export type CricketPlayerUncheckedUpdateWithoutUserInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    isSelected?: BoolFieldUpdateOperationsInput | boolean
    isCaptain?: BoolFieldUpdateOperationsInput | boolean
    isWicketKeeper?: BoolFieldUpdateOperationsInput | boolean
    isAllRounder?: BoolFieldUpdateOperationsInput | boolean
    isBatsman?: BoolFieldUpdateOperationsInput | boolean
    isBowler?: BoolFieldUpdateOperationsInput | boolean
    runs?: IntFieldUpdateOperationsInput | number
    noOfMatchesPlayed?: IntFieldUpdateOperationsInput | number
    noOfSixes?: IntFieldUpdateOperationsInput | number
    noOfFours?: IntFieldUpdateOperationsInput | number
    noOfWicketsTaken?: IntFieldUpdateOperationsInput | number
    noOfHalfCenturies?: IntFieldUpdateOperationsInput | number
    noOfCenturies?: IntFieldUpdateOperationsInput | number
    noOfWickets?: IntFieldUpdateOperationsInput | number
    matches?: CricketMatchUncheckedUpdateManyWithoutPlayersNestedInput
    user_cricket_players?: UsersUncheckedUpdateManyWithoutCricketPlayerNestedInput
    team_players?: CricketTeamUncheckedUpdateManyWithoutPlayersNestedInput
    batting_score_player?: CricketMatchPlayerBattingScoreUncheckedUpdateManyWithoutPlayerNestedInput
    bowling_score_player?: CricketMatchPlayerBowlingScoreUncheckedUpdateManyWithoutPlayerNestedInput
  }

  export type CricketPlayerUncheckedUpdateManyWithoutUserInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    isSelected?: BoolFieldUpdateOperationsInput | boolean
    isCaptain?: BoolFieldUpdateOperationsInput | boolean
    isWicketKeeper?: BoolFieldUpdateOperationsInput | boolean
    isAllRounder?: BoolFieldUpdateOperationsInput | boolean
    isBatsman?: BoolFieldUpdateOperationsInput | boolean
    isBowler?: BoolFieldUpdateOperationsInput | boolean
    runs?: IntFieldUpdateOperationsInput | number
    noOfMatchesPlayed?: IntFieldUpdateOperationsInput | number
    noOfSixes?: IntFieldUpdateOperationsInput | number
    noOfFours?: IntFieldUpdateOperationsInput | number
    noOfWicketsTaken?: IntFieldUpdateOperationsInput | number
    noOfHalfCenturies?: IntFieldUpdateOperationsInput | number
    noOfCenturies?: IntFieldUpdateOperationsInput | number
    noOfWickets?: IntFieldUpdateOperationsInput | number
  }

  export type VerificationTokenUpdateWithoutUserInput = {
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiration?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateWithoutUserInput = {
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiration?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateManyWithoutUserInput = {
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiration?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TicketUpdateWithoutUserInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    userEmail?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    visited?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TicketUncheckedUpdateWithoutUserInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    userEmail?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    visited?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TicketUncheckedUpdateManyWithoutUserInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    userEmail?: StringFieldUpdateOperationsInput | string
    userName?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    visited?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CricketMatchCreateManyWonByTeamInput = {
    sis_id?: string
    played?: boolean
    tossWonBy?: string | null
    tossDecision?: string | null
    date: Date | string
    venue?: string | null
    year: string
    dependency?: boolean
    dependentOn?: string | null
    team1Wickets?: number | null
    team2Wickets?: number | null
    team1Runs?: number | null
    team2Runs?: number | null
    team1Balls?: number | null
    team2Balls?: number | null
    overs?: number | null
    powerPlayOvers?: number | null
    overPerBowler?: number | null
    currentOverId?: string | null
    teamAId?: string | null
    teamBId?: string | null
    teamAScoreId?: string | null
    teamBScoreId?: string | null
    battingTeamScoreId?: string | null
    bowlingTeamScoreId?: string | null
  }

  export type CricketMatchCreateManyTossWonByTeamInput = {
    sis_id?: string
    played?: boolean
    tossDecision?: string | null
    date: Date | string
    venue?: string | null
    year: string
    dependency?: boolean
    dependentOn?: string | null
    team1Wickets?: number | null
    team2Wickets?: number | null
    team1Runs?: number | null
    team2Runs?: number | null
    team1Balls?: number | null
    team2Balls?: number | null
    overs?: number | null
    powerPlayOvers?: number | null
    overPerBowler?: number | null
    currentOverId?: string | null
    wonBy?: string | null
    teamAId?: string | null
    teamBId?: string | null
    teamAScoreId?: string | null
    teamBScoreId?: string | null
    battingTeamScoreId?: string | null
    bowlingTeamScoreId?: string | null
  }

  export type CricketPlayerCreateManyTeamInput = {
    sis_id?: string
    userId: string
    isSelected?: boolean
    isCaptain?: boolean
    isWicketKeeper?: boolean
    isAllRounder?: boolean
    isBatsman?: boolean
    isBowler?: boolean
    runs?: number
    noOfMatchesPlayed?: number
    noOfSixes?: number
    noOfFours?: number
    noOfWicketsTaken?: number
    noOfHalfCenturies?: number
    noOfCenturies?: number
    noOfWickets?: number
  }

  export type CricketTeamMatchDataCreateManyTeamInput = {
    sis_id?: string
    matchId?: string | null
    name?: string | null
    runs?: number
    wideRuns?: number
    nbRuns?: number
    byeRuns?: number
    lbRuns?: number
    wickets?: number
    balls?: number
  }

  export type CricketMatchPlayerBattingScoreCreateManyTeamInput = {
    sis_id?: string
    runs?: number
    balls?: number
    fours?: number
    sixes?: number
    strikeRate?: number
    out?: boolean
    played?: boolean
    wicketType?: string | null
    playerId?: string | null
    matchId: string
  }

  export type CricketMatchPlayerBowlingScoreCreateManyTeamInput = {
    sis_id?: string
    runs?: number
    balls?: number
    fours?: number
    sixes?: number
    played?: boolean
    wickets?: number
    playerId?: string | null
    matchId: string
  }

  export type CricketMatchCreateManyTeamAInput = {
    sis_id?: string
    played?: boolean
    tossWonBy?: string | null
    tossDecision?: string | null
    date: Date | string
    venue?: string | null
    year: string
    dependency?: boolean
    dependentOn?: string | null
    team1Wickets?: number | null
    team2Wickets?: number | null
    team1Runs?: number | null
    team2Runs?: number | null
    team1Balls?: number | null
    team2Balls?: number | null
    overs?: number | null
    powerPlayOvers?: number | null
    overPerBowler?: number | null
    currentOverId?: string | null
    wonBy?: string | null
    teamBId?: string | null
    teamAScoreId?: string | null
    teamBScoreId?: string | null
    battingTeamScoreId?: string | null
    bowlingTeamScoreId?: string | null
  }

  export type CricketMatchCreateManyTeamBInput = {
    sis_id?: string
    played?: boolean
    tossWonBy?: string | null
    tossDecision?: string | null
    date: Date | string
    venue?: string | null
    year: string
    dependency?: boolean
    dependentOn?: string | null
    team1Wickets?: number | null
    team2Wickets?: number | null
    team1Runs?: number | null
    team2Runs?: number | null
    team1Balls?: number | null
    team2Balls?: number | null
    overs?: number | null
    powerPlayOvers?: number | null
    overPerBowler?: number | null
    currentOverId?: string | null
    wonBy?: string | null
    teamAId?: string | null
    teamAScoreId?: string | null
    teamBScoreId?: string | null
    battingTeamScoreId?: string | null
    bowlingTeamScoreId?: string | null
  }

  export type CricketPlayerUpdateWithoutTeam_playersInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    isSelected?: BoolFieldUpdateOperationsInput | boolean
    isCaptain?: BoolFieldUpdateOperationsInput | boolean
    isWicketKeeper?: BoolFieldUpdateOperationsInput | boolean
    isAllRounder?: BoolFieldUpdateOperationsInput | boolean
    isBatsman?: BoolFieldUpdateOperationsInput | boolean
    isBowler?: BoolFieldUpdateOperationsInput | boolean
    runs?: IntFieldUpdateOperationsInput | number
    noOfMatchesPlayed?: IntFieldUpdateOperationsInput | number
    noOfSixes?: IntFieldUpdateOperationsInput | number
    noOfFours?: IntFieldUpdateOperationsInput | number
    noOfWicketsTaken?: IntFieldUpdateOperationsInput | number
    noOfHalfCenturies?: IntFieldUpdateOperationsInput | number
    noOfCenturies?: IntFieldUpdateOperationsInput | number
    noOfWickets?: IntFieldUpdateOperationsInput | number
    user?: UsersUpdateOneRequiredWithoutCricket_playersNestedInput
    matches?: CricketMatchUpdateManyWithoutPlayersNestedInput
    team?: CricketTeamUpdateOneWithoutPlayer_teamNestedInput
    user_cricket_players?: UsersUpdateManyWithoutCricketPlayerNestedInput
    batting_score_player?: CricketMatchPlayerBattingScoreUpdateManyWithoutPlayerNestedInput
    bowling_score_player?: CricketMatchPlayerBowlingScoreUpdateManyWithoutPlayerNestedInput
  }

  export type CricketPlayerUncheckedUpdateWithoutTeam_playersInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    isSelected?: BoolFieldUpdateOperationsInput | boolean
    isCaptain?: BoolFieldUpdateOperationsInput | boolean
    isWicketKeeper?: BoolFieldUpdateOperationsInput | boolean
    isAllRounder?: BoolFieldUpdateOperationsInput | boolean
    isBatsman?: BoolFieldUpdateOperationsInput | boolean
    isBowler?: BoolFieldUpdateOperationsInput | boolean
    runs?: IntFieldUpdateOperationsInput | number
    noOfMatchesPlayed?: IntFieldUpdateOperationsInput | number
    noOfSixes?: IntFieldUpdateOperationsInput | number
    noOfFours?: IntFieldUpdateOperationsInput | number
    noOfWicketsTaken?: IntFieldUpdateOperationsInput | number
    noOfHalfCenturies?: IntFieldUpdateOperationsInput | number
    noOfCenturies?: IntFieldUpdateOperationsInput | number
    noOfWickets?: IntFieldUpdateOperationsInput | number
    matches?: CricketMatchUncheckedUpdateManyWithoutPlayersNestedInput
    user_cricket_players?: UsersUncheckedUpdateManyWithoutCricketPlayerNestedInput
    batting_score_player?: CricketMatchPlayerBattingScoreUncheckedUpdateManyWithoutPlayerNestedInput
    bowling_score_player?: CricketMatchPlayerBowlingScoreUncheckedUpdateManyWithoutPlayerNestedInput
  }

  export type CricketPlayerUncheckedUpdateManyWithoutTeam_playersInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    isSelected?: BoolFieldUpdateOperationsInput | boolean
    isCaptain?: BoolFieldUpdateOperationsInput | boolean
    isWicketKeeper?: BoolFieldUpdateOperationsInput | boolean
    isAllRounder?: BoolFieldUpdateOperationsInput | boolean
    isBatsman?: BoolFieldUpdateOperationsInput | boolean
    isBowler?: BoolFieldUpdateOperationsInput | boolean
    runs?: IntFieldUpdateOperationsInput | number
    noOfMatchesPlayed?: IntFieldUpdateOperationsInput | number
    noOfSixes?: IntFieldUpdateOperationsInput | number
    noOfFours?: IntFieldUpdateOperationsInput | number
    noOfWicketsTaken?: IntFieldUpdateOperationsInput | number
    noOfHalfCenturies?: IntFieldUpdateOperationsInput | number
    noOfCenturies?: IntFieldUpdateOperationsInput | number
    noOfWickets?: IntFieldUpdateOperationsInput | number
  }

  export type CricketMatchUpdateWithoutWonByTeamInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    played?: BoolFieldUpdateOperationsInput | boolean
    tossDecision?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    year?: StringFieldUpdateOperationsInput | string
    dependency?: BoolFieldUpdateOperationsInput | boolean
    dependentOn?: NullableStringFieldUpdateOperationsInput | string | null
    team1Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team2Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team1Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team2Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team1Balls?: NullableIntFieldUpdateOperationsInput | number | null
    team2Balls?: NullableIntFieldUpdateOperationsInput | number | null
    overs?: NullableIntFieldUpdateOperationsInput | number | null
    powerPlayOvers?: NullableIntFieldUpdateOperationsInput | number | null
    overPerBowler?: NullableIntFieldUpdateOperationsInput | number | null
    tossWonByTeam?: CricketTeamUpdateOneWithoutToss_winning_teamNestedInput
    currentOver?: CricketOverUpdateOneWithoutMatch_current_overNestedInput
    teamA?: CricketTeamUpdateOneWithoutCricketMatchTeamANestedInput
    teamB?: CricketTeamUpdateOneWithoutCricketMatchTeamBNestedInput
    teamAScore?: CricketTeamMatchDataUpdateOneWithoutCricketMatchTeamANestedInput
    teamBScore?: CricketTeamMatchDataUpdateOneWithoutCricketMatchTeamBNestedInput
    battingTeam?: CricketTeamMatchDataUpdateOneWithoutMatchBttingTeamNestedInput
    bowlingTeam?: CricketTeamMatchDataUpdateOneWithoutMatchBowlingTeamNestedInput
    players?: CricketPlayerUpdateManyWithoutMatchesNestedInput
    over_match?: CricketOverUpdateManyWithoutMatchNestedInput
    team_batting_score?: CricketMatchPlayerBattingScoreUpdateManyWithoutMatchNestedInput
    team_bowling_score?: CricketMatchPlayerBowlingScoreUpdateManyWithoutMatchNestedInput
  }

  export type CricketMatchUncheckedUpdateWithoutWonByTeamInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    played?: BoolFieldUpdateOperationsInput | boolean
    tossWonBy?: NullableStringFieldUpdateOperationsInput | string | null
    tossDecision?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    year?: StringFieldUpdateOperationsInput | string
    dependency?: BoolFieldUpdateOperationsInput | boolean
    dependentOn?: NullableStringFieldUpdateOperationsInput | string | null
    team1Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team2Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team1Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team2Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team1Balls?: NullableIntFieldUpdateOperationsInput | number | null
    team2Balls?: NullableIntFieldUpdateOperationsInput | number | null
    overs?: NullableIntFieldUpdateOperationsInput | number | null
    powerPlayOvers?: NullableIntFieldUpdateOperationsInput | number | null
    overPerBowler?: NullableIntFieldUpdateOperationsInput | number | null
    currentOverId?: NullableStringFieldUpdateOperationsInput | string | null
    teamAId?: NullableStringFieldUpdateOperationsInput | string | null
    teamBId?: NullableStringFieldUpdateOperationsInput | string | null
    teamAScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    teamBScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    battingTeamScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    bowlingTeamScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    players?: CricketPlayerUncheckedUpdateManyWithoutMatchesNestedInput
    over_match?: CricketOverUncheckedUpdateManyWithoutMatchNestedInput
    team_batting_score?: CricketMatchPlayerBattingScoreUncheckedUpdateManyWithoutMatchNestedInput
    team_bowling_score?: CricketMatchPlayerBowlingScoreUncheckedUpdateManyWithoutMatchNestedInput
  }

  export type CricketMatchUncheckedUpdateManyWithoutWonByTeamInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    played?: BoolFieldUpdateOperationsInput | boolean
    tossWonBy?: NullableStringFieldUpdateOperationsInput | string | null
    tossDecision?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    year?: StringFieldUpdateOperationsInput | string
    dependency?: BoolFieldUpdateOperationsInput | boolean
    dependentOn?: NullableStringFieldUpdateOperationsInput | string | null
    team1Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team2Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team1Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team2Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team1Balls?: NullableIntFieldUpdateOperationsInput | number | null
    team2Balls?: NullableIntFieldUpdateOperationsInput | number | null
    overs?: NullableIntFieldUpdateOperationsInput | number | null
    powerPlayOvers?: NullableIntFieldUpdateOperationsInput | number | null
    overPerBowler?: NullableIntFieldUpdateOperationsInput | number | null
    currentOverId?: NullableStringFieldUpdateOperationsInput | string | null
    teamAId?: NullableStringFieldUpdateOperationsInput | string | null
    teamBId?: NullableStringFieldUpdateOperationsInput | string | null
    teamAScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    teamBScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    battingTeamScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    bowlingTeamScoreId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CricketMatchUpdateWithoutTossWonByTeamInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    played?: BoolFieldUpdateOperationsInput | boolean
    tossDecision?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    year?: StringFieldUpdateOperationsInput | string
    dependency?: BoolFieldUpdateOperationsInput | boolean
    dependentOn?: NullableStringFieldUpdateOperationsInput | string | null
    team1Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team2Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team1Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team2Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team1Balls?: NullableIntFieldUpdateOperationsInput | number | null
    team2Balls?: NullableIntFieldUpdateOperationsInput | number | null
    overs?: NullableIntFieldUpdateOperationsInput | number | null
    powerPlayOvers?: NullableIntFieldUpdateOperationsInput | number | null
    overPerBowler?: NullableIntFieldUpdateOperationsInput | number | null
    currentOver?: CricketOverUpdateOneWithoutMatch_current_overNestedInput
    wonByTeam?: CricketTeamUpdateOneWithoutWinning_teamNestedInput
    teamA?: CricketTeamUpdateOneWithoutCricketMatchTeamANestedInput
    teamB?: CricketTeamUpdateOneWithoutCricketMatchTeamBNestedInput
    teamAScore?: CricketTeamMatchDataUpdateOneWithoutCricketMatchTeamANestedInput
    teamBScore?: CricketTeamMatchDataUpdateOneWithoutCricketMatchTeamBNestedInput
    battingTeam?: CricketTeamMatchDataUpdateOneWithoutMatchBttingTeamNestedInput
    bowlingTeam?: CricketTeamMatchDataUpdateOneWithoutMatchBowlingTeamNestedInput
    players?: CricketPlayerUpdateManyWithoutMatchesNestedInput
    over_match?: CricketOverUpdateManyWithoutMatchNestedInput
    team_batting_score?: CricketMatchPlayerBattingScoreUpdateManyWithoutMatchNestedInput
    team_bowling_score?: CricketMatchPlayerBowlingScoreUpdateManyWithoutMatchNestedInput
  }

  export type CricketMatchUncheckedUpdateWithoutTossWonByTeamInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    played?: BoolFieldUpdateOperationsInput | boolean
    tossDecision?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    year?: StringFieldUpdateOperationsInput | string
    dependency?: BoolFieldUpdateOperationsInput | boolean
    dependentOn?: NullableStringFieldUpdateOperationsInput | string | null
    team1Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team2Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team1Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team2Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team1Balls?: NullableIntFieldUpdateOperationsInput | number | null
    team2Balls?: NullableIntFieldUpdateOperationsInput | number | null
    overs?: NullableIntFieldUpdateOperationsInput | number | null
    powerPlayOvers?: NullableIntFieldUpdateOperationsInput | number | null
    overPerBowler?: NullableIntFieldUpdateOperationsInput | number | null
    currentOverId?: NullableStringFieldUpdateOperationsInput | string | null
    wonBy?: NullableStringFieldUpdateOperationsInput | string | null
    teamAId?: NullableStringFieldUpdateOperationsInput | string | null
    teamBId?: NullableStringFieldUpdateOperationsInput | string | null
    teamAScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    teamBScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    battingTeamScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    bowlingTeamScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    players?: CricketPlayerUncheckedUpdateManyWithoutMatchesNestedInput
    over_match?: CricketOverUncheckedUpdateManyWithoutMatchNestedInput
    team_batting_score?: CricketMatchPlayerBattingScoreUncheckedUpdateManyWithoutMatchNestedInput
    team_bowling_score?: CricketMatchPlayerBowlingScoreUncheckedUpdateManyWithoutMatchNestedInput
  }

  export type CricketMatchUncheckedUpdateManyWithoutTossWonByTeamInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    played?: BoolFieldUpdateOperationsInput | boolean
    tossDecision?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    year?: StringFieldUpdateOperationsInput | string
    dependency?: BoolFieldUpdateOperationsInput | boolean
    dependentOn?: NullableStringFieldUpdateOperationsInput | string | null
    team1Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team2Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team1Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team2Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team1Balls?: NullableIntFieldUpdateOperationsInput | number | null
    team2Balls?: NullableIntFieldUpdateOperationsInput | number | null
    overs?: NullableIntFieldUpdateOperationsInput | number | null
    powerPlayOvers?: NullableIntFieldUpdateOperationsInput | number | null
    overPerBowler?: NullableIntFieldUpdateOperationsInput | number | null
    currentOverId?: NullableStringFieldUpdateOperationsInput | string | null
    wonBy?: NullableStringFieldUpdateOperationsInput | string | null
    teamAId?: NullableStringFieldUpdateOperationsInput | string | null
    teamBId?: NullableStringFieldUpdateOperationsInput | string | null
    teamAScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    teamBScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    battingTeamScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    bowlingTeamScoreId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CricketPlayerUpdateWithoutTeamInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    isSelected?: BoolFieldUpdateOperationsInput | boolean
    isCaptain?: BoolFieldUpdateOperationsInput | boolean
    isWicketKeeper?: BoolFieldUpdateOperationsInput | boolean
    isAllRounder?: BoolFieldUpdateOperationsInput | boolean
    isBatsman?: BoolFieldUpdateOperationsInput | boolean
    isBowler?: BoolFieldUpdateOperationsInput | boolean
    runs?: IntFieldUpdateOperationsInput | number
    noOfMatchesPlayed?: IntFieldUpdateOperationsInput | number
    noOfSixes?: IntFieldUpdateOperationsInput | number
    noOfFours?: IntFieldUpdateOperationsInput | number
    noOfWicketsTaken?: IntFieldUpdateOperationsInput | number
    noOfHalfCenturies?: IntFieldUpdateOperationsInput | number
    noOfCenturies?: IntFieldUpdateOperationsInput | number
    noOfWickets?: IntFieldUpdateOperationsInput | number
    user?: UsersUpdateOneRequiredWithoutCricket_playersNestedInput
    matches?: CricketMatchUpdateManyWithoutPlayersNestedInput
    user_cricket_players?: UsersUpdateManyWithoutCricketPlayerNestedInput
    team_players?: CricketTeamUpdateManyWithoutPlayersNestedInput
    batting_score_player?: CricketMatchPlayerBattingScoreUpdateManyWithoutPlayerNestedInput
    bowling_score_player?: CricketMatchPlayerBowlingScoreUpdateManyWithoutPlayerNestedInput
  }

  export type CricketPlayerUncheckedUpdateWithoutTeamInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    isSelected?: BoolFieldUpdateOperationsInput | boolean
    isCaptain?: BoolFieldUpdateOperationsInput | boolean
    isWicketKeeper?: BoolFieldUpdateOperationsInput | boolean
    isAllRounder?: BoolFieldUpdateOperationsInput | boolean
    isBatsman?: BoolFieldUpdateOperationsInput | boolean
    isBowler?: BoolFieldUpdateOperationsInput | boolean
    runs?: IntFieldUpdateOperationsInput | number
    noOfMatchesPlayed?: IntFieldUpdateOperationsInput | number
    noOfSixes?: IntFieldUpdateOperationsInput | number
    noOfFours?: IntFieldUpdateOperationsInput | number
    noOfWicketsTaken?: IntFieldUpdateOperationsInput | number
    noOfHalfCenturies?: IntFieldUpdateOperationsInput | number
    noOfCenturies?: IntFieldUpdateOperationsInput | number
    noOfWickets?: IntFieldUpdateOperationsInput | number
    matches?: CricketMatchUncheckedUpdateManyWithoutPlayersNestedInput
    user_cricket_players?: UsersUncheckedUpdateManyWithoutCricketPlayerNestedInput
    team_players?: CricketTeamUncheckedUpdateManyWithoutPlayersNestedInput
    batting_score_player?: CricketMatchPlayerBattingScoreUncheckedUpdateManyWithoutPlayerNestedInput
    bowling_score_player?: CricketMatchPlayerBowlingScoreUncheckedUpdateManyWithoutPlayerNestedInput
  }

  export type CricketPlayerUncheckedUpdateManyWithoutTeamInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    isSelected?: BoolFieldUpdateOperationsInput | boolean
    isCaptain?: BoolFieldUpdateOperationsInput | boolean
    isWicketKeeper?: BoolFieldUpdateOperationsInput | boolean
    isAllRounder?: BoolFieldUpdateOperationsInput | boolean
    isBatsman?: BoolFieldUpdateOperationsInput | boolean
    isBowler?: BoolFieldUpdateOperationsInput | boolean
    runs?: IntFieldUpdateOperationsInput | number
    noOfMatchesPlayed?: IntFieldUpdateOperationsInput | number
    noOfSixes?: IntFieldUpdateOperationsInput | number
    noOfFours?: IntFieldUpdateOperationsInput | number
    noOfWicketsTaken?: IntFieldUpdateOperationsInput | number
    noOfHalfCenturies?: IntFieldUpdateOperationsInput | number
    noOfCenturies?: IntFieldUpdateOperationsInput | number
    noOfWickets?: IntFieldUpdateOperationsInput | number
  }

  export type CricketTeamMatchDataUpdateWithoutTeamInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    matchId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    runs?: IntFieldUpdateOperationsInput | number
    wideRuns?: IntFieldUpdateOperationsInput | number
    nbRuns?: IntFieldUpdateOperationsInput | number
    byeRuns?: IntFieldUpdateOperationsInput | number
    lbRuns?: IntFieldUpdateOperationsInput | number
    wickets?: IntFieldUpdateOperationsInput | number
    balls?: IntFieldUpdateOperationsInput | number
    batters?: CricketMatchPlayerBattingScoreUpdateManyWithoutMatch_battersNestedInput
    bowlers?: CricketMatchPlayerBowlingScoreUpdateManyWithoutMatch_bowlersNestedInput
    cricketMatchTeamA?: CricketMatchUpdateManyWithoutTeamAScoreNestedInput
    cricketMatchTeamB?: CricketMatchUpdateManyWithoutTeamBScoreNestedInput
    matchBttingTeam?: CricketMatchUpdateManyWithoutBattingTeamNestedInput
    matchBowlingTeam?: CricketMatchUpdateManyWithoutBowlingTeamNestedInput
  }

  export type CricketTeamMatchDataUncheckedUpdateWithoutTeamInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    matchId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    runs?: IntFieldUpdateOperationsInput | number
    wideRuns?: IntFieldUpdateOperationsInput | number
    nbRuns?: IntFieldUpdateOperationsInput | number
    byeRuns?: IntFieldUpdateOperationsInput | number
    lbRuns?: IntFieldUpdateOperationsInput | number
    wickets?: IntFieldUpdateOperationsInput | number
    balls?: IntFieldUpdateOperationsInput | number
    batters?: CricketMatchPlayerBattingScoreUncheckedUpdateManyWithoutMatch_battersNestedInput
    bowlers?: CricketMatchPlayerBowlingScoreUncheckedUpdateManyWithoutMatch_bowlersNestedInput
    cricketMatchTeamA?: CricketMatchUncheckedUpdateManyWithoutTeamAScoreNestedInput
    cricketMatchTeamB?: CricketMatchUncheckedUpdateManyWithoutTeamBScoreNestedInput
    matchBttingTeam?: CricketMatchUncheckedUpdateManyWithoutBattingTeamNestedInput
    matchBowlingTeam?: CricketMatchUncheckedUpdateManyWithoutBowlingTeamNestedInput
  }

  export type CricketTeamMatchDataUncheckedUpdateManyWithoutTeamInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    matchId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    runs?: IntFieldUpdateOperationsInput | number
    wideRuns?: IntFieldUpdateOperationsInput | number
    nbRuns?: IntFieldUpdateOperationsInput | number
    byeRuns?: IntFieldUpdateOperationsInput | number
    lbRuns?: IntFieldUpdateOperationsInput | number
    wickets?: IntFieldUpdateOperationsInput | number
    balls?: IntFieldUpdateOperationsInput | number
  }

  export type CricketMatchPlayerBattingScoreUpdateWithoutTeamInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    runs?: IntFieldUpdateOperationsInput | number
    balls?: IntFieldUpdateOperationsInput | number
    fours?: IntFieldUpdateOperationsInput | number
    sixes?: IntFieldUpdateOperationsInput | number
    strikeRate?: FloatFieldUpdateOperationsInput | number
    out?: BoolFieldUpdateOperationsInput | boolean
    played?: BoolFieldUpdateOperationsInput | boolean
    wicketType?: NullableStringFieldUpdateOperationsInput | string | null
    player?: CricketPlayerUpdateOneWithoutBatting_score_playerNestedInput
    match?: CricketMatchUpdateOneRequiredWithoutTeam_batting_scoreNestedInput
    match_batters?: CricketTeamMatchDataUpdateManyWithoutBattersNestedInput
    over_striker?: CricketOverUpdateManyWithoutStrikerScoreNestedInput
    over_non_striker?: CricketOverUpdateManyWithoutNonStrikerScoreNestedInput
  }

  export type CricketMatchPlayerBattingScoreUncheckedUpdateWithoutTeamInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    runs?: IntFieldUpdateOperationsInput | number
    balls?: IntFieldUpdateOperationsInput | number
    fours?: IntFieldUpdateOperationsInput | number
    sixes?: IntFieldUpdateOperationsInput | number
    strikeRate?: FloatFieldUpdateOperationsInput | number
    out?: BoolFieldUpdateOperationsInput | boolean
    played?: BoolFieldUpdateOperationsInput | boolean
    wicketType?: NullableStringFieldUpdateOperationsInput | string | null
    playerId?: NullableStringFieldUpdateOperationsInput | string | null
    matchId?: StringFieldUpdateOperationsInput | string
    match_batters?: CricketTeamMatchDataUncheckedUpdateManyWithoutBattersNestedInput
    over_striker?: CricketOverUncheckedUpdateManyWithoutStrikerScoreNestedInput
    over_non_striker?: CricketOverUncheckedUpdateManyWithoutNonStrikerScoreNestedInput
  }

  export type CricketMatchPlayerBattingScoreUncheckedUpdateManyWithoutTeamInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    runs?: IntFieldUpdateOperationsInput | number
    balls?: IntFieldUpdateOperationsInput | number
    fours?: IntFieldUpdateOperationsInput | number
    sixes?: IntFieldUpdateOperationsInput | number
    strikeRate?: FloatFieldUpdateOperationsInput | number
    out?: BoolFieldUpdateOperationsInput | boolean
    played?: BoolFieldUpdateOperationsInput | boolean
    wicketType?: NullableStringFieldUpdateOperationsInput | string | null
    playerId?: NullableStringFieldUpdateOperationsInput | string | null
    matchId?: StringFieldUpdateOperationsInput | string
  }

  export type CricketMatchPlayerBowlingScoreUpdateWithoutTeamInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    runs?: IntFieldUpdateOperationsInput | number
    balls?: IntFieldUpdateOperationsInput | number
    fours?: IntFieldUpdateOperationsInput | number
    sixes?: IntFieldUpdateOperationsInput | number
    played?: BoolFieldUpdateOperationsInput | boolean
    wickets?: IntFieldUpdateOperationsInput | number
    player?: CricketPlayerUpdateOneWithoutBowling_score_playerNestedInput
    match?: CricketMatchUpdateOneRequiredWithoutTeam_bowling_scoreNestedInput
    match_bowlers?: CricketTeamMatchDataUpdateManyWithoutBowlersNestedInput
    over_bowler?: CricketOverUpdateManyWithoutBowlerScoreNestedInput
  }

  export type CricketMatchPlayerBowlingScoreUncheckedUpdateWithoutTeamInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    runs?: IntFieldUpdateOperationsInput | number
    balls?: IntFieldUpdateOperationsInput | number
    fours?: IntFieldUpdateOperationsInput | number
    sixes?: IntFieldUpdateOperationsInput | number
    played?: BoolFieldUpdateOperationsInput | boolean
    wickets?: IntFieldUpdateOperationsInput | number
    playerId?: NullableStringFieldUpdateOperationsInput | string | null
    matchId?: StringFieldUpdateOperationsInput | string
    match_bowlers?: CricketTeamMatchDataUncheckedUpdateManyWithoutBowlersNestedInput
    over_bowler?: CricketOverUncheckedUpdateManyWithoutBowlerScoreNestedInput
  }

  export type CricketMatchPlayerBowlingScoreUncheckedUpdateManyWithoutTeamInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    runs?: IntFieldUpdateOperationsInput | number
    balls?: IntFieldUpdateOperationsInput | number
    fours?: IntFieldUpdateOperationsInput | number
    sixes?: IntFieldUpdateOperationsInput | number
    played?: BoolFieldUpdateOperationsInput | boolean
    wickets?: IntFieldUpdateOperationsInput | number
    playerId?: NullableStringFieldUpdateOperationsInput | string | null
    matchId?: StringFieldUpdateOperationsInput | string
  }

  export type CricketMatchUpdateWithoutTeamAInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    played?: BoolFieldUpdateOperationsInput | boolean
    tossDecision?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    year?: StringFieldUpdateOperationsInput | string
    dependency?: BoolFieldUpdateOperationsInput | boolean
    dependentOn?: NullableStringFieldUpdateOperationsInput | string | null
    team1Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team2Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team1Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team2Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team1Balls?: NullableIntFieldUpdateOperationsInput | number | null
    team2Balls?: NullableIntFieldUpdateOperationsInput | number | null
    overs?: NullableIntFieldUpdateOperationsInput | number | null
    powerPlayOvers?: NullableIntFieldUpdateOperationsInput | number | null
    overPerBowler?: NullableIntFieldUpdateOperationsInput | number | null
    tossWonByTeam?: CricketTeamUpdateOneWithoutToss_winning_teamNestedInput
    currentOver?: CricketOverUpdateOneWithoutMatch_current_overNestedInput
    wonByTeam?: CricketTeamUpdateOneWithoutWinning_teamNestedInput
    teamB?: CricketTeamUpdateOneWithoutCricketMatchTeamBNestedInput
    teamAScore?: CricketTeamMatchDataUpdateOneWithoutCricketMatchTeamANestedInput
    teamBScore?: CricketTeamMatchDataUpdateOneWithoutCricketMatchTeamBNestedInput
    battingTeam?: CricketTeamMatchDataUpdateOneWithoutMatchBttingTeamNestedInput
    bowlingTeam?: CricketTeamMatchDataUpdateOneWithoutMatchBowlingTeamNestedInput
    players?: CricketPlayerUpdateManyWithoutMatchesNestedInput
    over_match?: CricketOverUpdateManyWithoutMatchNestedInput
    team_batting_score?: CricketMatchPlayerBattingScoreUpdateManyWithoutMatchNestedInput
    team_bowling_score?: CricketMatchPlayerBowlingScoreUpdateManyWithoutMatchNestedInput
  }

  export type CricketMatchUncheckedUpdateWithoutTeamAInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    played?: BoolFieldUpdateOperationsInput | boolean
    tossWonBy?: NullableStringFieldUpdateOperationsInput | string | null
    tossDecision?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    year?: StringFieldUpdateOperationsInput | string
    dependency?: BoolFieldUpdateOperationsInput | boolean
    dependentOn?: NullableStringFieldUpdateOperationsInput | string | null
    team1Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team2Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team1Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team2Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team1Balls?: NullableIntFieldUpdateOperationsInput | number | null
    team2Balls?: NullableIntFieldUpdateOperationsInput | number | null
    overs?: NullableIntFieldUpdateOperationsInput | number | null
    powerPlayOvers?: NullableIntFieldUpdateOperationsInput | number | null
    overPerBowler?: NullableIntFieldUpdateOperationsInput | number | null
    currentOverId?: NullableStringFieldUpdateOperationsInput | string | null
    wonBy?: NullableStringFieldUpdateOperationsInput | string | null
    teamBId?: NullableStringFieldUpdateOperationsInput | string | null
    teamAScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    teamBScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    battingTeamScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    bowlingTeamScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    players?: CricketPlayerUncheckedUpdateManyWithoutMatchesNestedInput
    over_match?: CricketOverUncheckedUpdateManyWithoutMatchNestedInput
    team_batting_score?: CricketMatchPlayerBattingScoreUncheckedUpdateManyWithoutMatchNestedInput
    team_bowling_score?: CricketMatchPlayerBowlingScoreUncheckedUpdateManyWithoutMatchNestedInput
  }

  export type CricketMatchUncheckedUpdateManyWithoutTeamAInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    played?: BoolFieldUpdateOperationsInput | boolean
    tossWonBy?: NullableStringFieldUpdateOperationsInput | string | null
    tossDecision?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    year?: StringFieldUpdateOperationsInput | string
    dependency?: BoolFieldUpdateOperationsInput | boolean
    dependentOn?: NullableStringFieldUpdateOperationsInput | string | null
    team1Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team2Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team1Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team2Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team1Balls?: NullableIntFieldUpdateOperationsInput | number | null
    team2Balls?: NullableIntFieldUpdateOperationsInput | number | null
    overs?: NullableIntFieldUpdateOperationsInput | number | null
    powerPlayOvers?: NullableIntFieldUpdateOperationsInput | number | null
    overPerBowler?: NullableIntFieldUpdateOperationsInput | number | null
    currentOverId?: NullableStringFieldUpdateOperationsInput | string | null
    wonBy?: NullableStringFieldUpdateOperationsInput | string | null
    teamBId?: NullableStringFieldUpdateOperationsInput | string | null
    teamAScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    teamBScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    battingTeamScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    bowlingTeamScoreId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CricketMatchUpdateWithoutTeamBInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    played?: BoolFieldUpdateOperationsInput | boolean
    tossDecision?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    year?: StringFieldUpdateOperationsInput | string
    dependency?: BoolFieldUpdateOperationsInput | boolean
    dependentOn?: NullableStringFieldUpdateOperationsInput | string | null
    team1Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team2Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team1Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team2Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team1Balls?: NullableIntFieldUpdateOperationsInput | number | null
    team2Balls?: NullableIntFieldUpdateOperationsInput | number | null
    overs?: NullableIntFieldUpdateOperationsInput | number | null
    powerPlayOvers?: NullableIntFieldUpdateOperationsInput | number | null
    overPerBowler?: NullableIntFieldUpdateOperationsInput | number | null
    tossWonByTeam?: CricketTeamUpdateOneWithoutToss_winning_teamNestedInput
    currentOver?: CricketOverUpdateOneWithoutMatch_current_overNestedInput
    wonByTeam?: CricketTeamUpdateOneWithoutWinning_teamNestedInput
    teamA?: CricketTeamUpdateOneWithoutCricketMatchTeamANestedInput
    teamAScore?: CricketTeamMatchDataUpdateOneWithoutCricketMatchTeamANestedInput
    teamBScore?: CricketTeamMatchDataUpdateOneWithoutCricketMatchTeamBNestedInput
    battingTeam?: CricketTeamMatchDataUpdateOneWithoutMatchBttingTeamNestedInput
    bowlingTeam?: CricketTeamMatchDataUpdateOneWithoutMatchBowlingTeamNestedInput
    players?: CricketPlayerUpdateManyWithoutMatchesNestedInput
    over_match?: CricketOverUpdateManyWithoutMatchNestedInput
    team_batting_score?: CricketMatchPlayerBattingScoreUpdateManyWithoutMatchNestedInput
    team_bowling_score?: CricketMatchPlayerBowlingScoreUpdateManyWithoutMatchNestedInput
  }

  export type CricketMatchUncheckedUpdateWithoutTeamBInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    played?: BoolFieldUpdateOperationsInput | boolean
    tossWonBy?: NullableStringFieldUpdateOperationsInput | string | null
    tossDecision?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    year?: StringFieldUpdateOperationsInput | string
    dependency?: BoolFieldUpdateOperationsInput | boolean
    dependentOn?: NullableStringFieldUpdateOperationsInput | string | null
    team1Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team2Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team1Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team2Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team1Balls?: NullableIntFieldUpdateOperationsInput | number | null
    team2Balls?: NullableIntFieldUpdateOperationsInput | number | null
    overs?: NullableIntFieldUpdateOperationsInput | number | null
    powerPlayOvers?: NullableIntFieldUpdateOperationsInput | number | null
    overPerBowler?: NullableIntFieldUpdateOperationsInput | number | null
    currentOverId?: NullableStringFieldUpdateOperationsInput | string | null
    wonBy?: NullableStringFieldUpdateOperationsInput | string | null
    teamAId?: NullableStringFieldUpdateOperationsInput | string | null
    teamAScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    teamBScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    battingTeamScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    bowlingTeamScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    players?: CricketPlayerUncheckedUpdateManyWithoutMatchesNestedInput
    over_match?: CricketOverUncheckedUpdateManyWithoutMatchNestedInput
    team_batting_score?: CricketMatchPlayerBattingScoreUncheckedUpdateManyWithoutMatchNestedInput
    team_bowling_score?: CricketMatchPlayerBowlingScoreUncheckedUpdateManyWithoutMatchNestedInput
  }

  export type CricketMatchUncheckedUpdateManyWithoutTeamBInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    played?: BoolFieldUpdateOperationsInput | boolean
    tossWonBy?: NullableStringFieldUpdateOperationsInput | string | null
    tossDecision?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    year?: StringFieldUpdateOperationsInput | string
    dependency?: BoolFieldUpdateOperationsInput | boolean
    dependentOn?: NullableStringFieldUpdateOperationsInput | string | null
    team1Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team2Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team1Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team2Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team1Balls?: NullableIntFieldUpdateOperationsInput | number | null
    team2Balls?: NullableIntFieldUpdateOperationsInput | number | null
    overs?: NullableIntFieldUpdateOperationsInput | number | null
    powerPlayOvers?: NullableIntFieldUpdateOperationsInput | number | null
    overPerBowler?: NullableIntFieldUpdateOperationsInput | number | null
    currentOverId?: NullableStringFieldUpdateOperationsInput | string | null
    wonBy?: NullableStringFieldUpdateOperationsInput | string | null
    teamAId?: NullableStringFieldUpdateOperationsInput | string | null
    teamAScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    teamBScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    battingTeamScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    bowlingTeamScoreId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UsersCreateManyCricketPlayerInput = {
    userId: string
    email: string
    name?: string | null
    password?: string | null
    token?: string | null
    roles?: UsersCreaterolesInput | $Enums.Role[]
    createdAt?: Date | string
    updatedAt?: Date | string
    rec_status?: boolean
  }

  export type CricketMatchPlayerBattingScoreCreateManyPlayerInput = {
    sis_id?: string
    runs?: number
    balls?: number
    fours?: number
    sixes?: number
    strikeRate?: number
    out?: boolean
    played?: boolean
    wicketType?: string | null
    matchId: string
    teamId: string
  }

  export type CricketMatchPlayerBowlingScoreCreateManyPlayerInput = {
    sis_id?: string
    runs?: number
    balls?: number
    fours?: number
    sixes?: number
    played?: boolean
    wickets?: number
    matchId: string
    teamId: string
  }

  export type CricketMatchUpdateWithoutPlayersInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    played?: BoolFieldUpdateOperationsInput | boolean
    tossDecision?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    year?: StringFieldUpdateOperationsInput | string
    dependency?: BoolFieldUpdateOperationsInput | boolean
    dependentOn?: NullableStringFieldUpdateOperationsInput | string | null
    team1Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team2Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team1Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team2Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team1Balls?: NullableIntFieldUpdateOperationsInput | number | null
    team2Balls?: NullableIntFieldUpdateOperationsInput | number | null
    overs?: NullableIntFieldUpdateOperationsInput | number | null
    powerPlayOvers?: NullableIntFieldUpdateOperationsInput | number | null
    overPerBowler?: NullableIntFieldUpdateOperationsInput | number | null
    tossWonByTeam?: CricketTeamUpdateOneWithoutToss_winning_teamNestedInput
    currentOver?: CricketOverUpdateOneWithoutMatch_current_overNestedInput
    wonByTeam?: CricketTeamUpdateOneWithoutWinning_teamNestedInput
    teamA?: CricketTeamUpdateOneWithoutCricketMatchTeamANestedInput
    teamB?: CricketTeamUpdateOneWithoutCricketMatchTeamBNestedInput
    teamAScore?: CricketTeamMatchDataUpdateOneWithoutCricketMatchTeamANestedInput
    teamBScore?: CricketTeamMatchDataUpdateOneWithoutCricketMatchTeamBNestedInput
    battingTeam?: CricketTeamMatchDataUpdateOneWithoutMatchBttingTeamNestedInput
    bowlingTeam?: CricketTeamMatchDataUpdateOneWithoutMatchBowlingTeamNestedInput
    over_match?: CricketOverUpdateManyWithoutMatchNestedInput
    team_batting_score?: CricketMatchPlayerBattingScoreUpdateManyWithoutMatchNestedInput
    team_bowling_score?: CricketMatchPlayerBowlingScoreUpdateManyWithoutMatchNestedInput
  }

  export type CricketMatchUncheckedUpdateWithoutPlayersInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    played?: BoolFieldUpdateOperationsInput | boolean
    tossWonBy?: NullableStringFieldUpdateOperationsInput | string | null
    tossDecision?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    year?: StringFieldUpdateOperationsInput | string
    dependency?: BoolFieldUpdateOperationsInput | boolean
    dependentOn?: NullableStringFieldUpdateOperationsInput | string | null
    team1Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team2Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team1Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team2Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team1Balls?: NullableIntFieldUpdateOperationsInput | number | null
    team2Balls?: NullableIntFieldUpdateOperationsInput | number | null
    overs?: NullableIntFieldUpdateOperationsInput | number | null
    powerPlayOvers?: NullableIntFieldUpdateOperationsInput | number | null
    overPerBowler?: NullableIntFieldUpdateOperationsInput | number | null
    currentOverId?: NullableStringFieldUpdateOperationsInput | string | null
    wonBy?: NullableStringFieldUpdateOperationsInput | string | null
    teamAId?: NullableStringFieldUpdateOperationsInput | string | null
    teamBId?: NullableStringFieldUpdateOperationsInput | string | null
    teamAScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    teamBScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    battingTeamScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    bowlingTeamScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    over_match?: CricketOverUncheckedUpdateManyWithoutMatchNestedInput
    team_batting_score?: CricketMatchPlayerBattingScoreUncheckedUpdateManyWithoutMatchNestedInput
    team_bowling_score?: CricketMatchPlayerBowlingScoreUncheckedUpdateManyWithoutMatchNestedInput
  }

  export type CricketMatchUncheckedUpdateManyWithoutPlayersInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    played?: BoolFieldUpdateOperationsInput | boolean
    tossWonBy?: NullableStringFieldUpdateOperationsInput | string | null
    tossDecision?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    year?: StringFieldUpdateOperationsInput | string
    dependency?: BoolFieldUpdateOperationsInput | boolean
    dependentOn?: NullableStringFieldUpdateOperationsInput | string | null
    team1Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team2Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team1Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team2Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team1Balls?: NullableIntFieldUpdateOperationsInput | number | null
    team2Balls?: NullableIntFieldUpdateOperationsInput | number | null
    overs?: NullableIntFieldUpdateOperationsInput | number | null
    powerPlayOvers?: NullableIntFieldUpdateOperationsInput | number | null
    overPerBowler?: NullableIntFieldUpdateOperationsInput | number | null
    currentOverId?: NullableStringFieldUpdateOperationsInput | string | null
    wonBy?: NullableStringFieldUpdateOperationsInput | string | null
    teamAId?: NullableStringFieldUpdateOperationsInput | string | null
    teamBId?: NullableStringFieldUpdateOperationsInput | string | null
    teamAScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    teamBScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    battingTeamScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    bowlingTeamScoreId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UsersUpdateWithoutCricketPlayerInput = {
    userId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: UsersUpdaterolesInput | $Enums.Role[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rec_status?: BoolFieldUpdateOperationsInput | boolean
    cricket_players?: CricketPlayerUpdateManyWithoutUserNestedInput
    verification_token?: VerificationTokenUpdateManyWithoutUserNestedInput
    user_tickets?: TicketUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutCricketPlayerInput = {
    userId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: UsersUpdaterolesInput | $Enums.Role[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rec_status?: BoolFieldUpdateOperationsInput | boolean
    cricket_players?: CricketPlayerUncheckedUpdateManyWithoutUserNestedInput
    verification_token?: VerificationTokenUncheckedUpdateManyWithoutUserNestedInput
    user_tickets?: TicketUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateManyWithoutCricketPlayerInput = {
    userId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: UsersUpdaterolesInput | $Enums.Role[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rec_status?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CricketTeamUpdateWithoutPlayersInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    winning_team?: CricketMatchUpdateManyWithoutWonByTeamNestedInput
    toss_winning_team?: CricketMatchUpdateManyWithoutTossWonByTeamNestedInput
    player_team?: CricketPlayerUpdateManyWithoutTeamNestedInput
    cricket_match_teamData?: CricketTeamMatchDataUpdateManyWithoutTeamNestedInput
    cricket_match_player_batting_score?: CricketMatchPlayerBattingScoreUpdateManyWithoutTeamNestedInput
    cricket_match_player_bowling_score?: CricketMatchPlayerBowlingScoreUpdateManyWithoutTeamNestedInput
    CricketMatchTeamA?: CricketMatchUpdateManyWithoutTeamANestedInput
    CricketMatchTeamB?: CricketMatchUpdateManyWithoutTeamBNestedInput
  }

  export type CricketTeamUncheckedUpdateWithoutPlayersInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
    winning_team?: CricketMatchUncheckedUpdateManyWithoutWonByTeamNestedInput
    toss_winning_team?: CricketMatchUncheckedUpdateManyWithoutTossWonByTeamNestedInput
    player_team?: CricketPlayerUncheckedUpdateManyWithoutTeamNestedInput
    cricket_match_teamData?: CricketTeamMatchDataUncheckedUpdateManyWithoutTeamNestedInput
    cricket_match_player_batting_score?: CricketMatchPlayerBattingScoreUncheckedUpdateManyWithoutTeamNestedInput
    cricket_match_player_bowling_score?: CricketMatchPlayerBowlingScoreUncheckedUpdateManyWithoutTeamNestedInput
    CricketMatchTeamA?: CricketMatchUncheckedUpdateManyWithoutTeamANestedInput
    CricketMatchTeamB?: CricketMatchUncheckedUpdateManyWithoutTeamBNestedInput
  }

  export type CricketTeamUncheckedUpdateManyWithoutPlayersInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    year?: StringFieldUpdateOperationsInput | string
  }

  export type CricketMatchPlayerBattingScoreUpdateWithoutPlayerInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    runs?: IntFieldUpdateOperationsInput | number
    balls?: IntFieldUpdateOperationsInput | number
    fours?: IntFieldUpdateOperationsInput | number
    sixes?: IntFieldUpdateOperationsInput | number
    strikeRate?: FloatFieldUpdateOperationsInput | number
    out?: BoolFieldUpdateOperationsInput | boolean
    played?: BoolFieldUpdateOperationsInput | boolean
    wicketType?: NullableStringFieldUpdateOperationsInput | string | null
    match?: CricketMatchUpdateOneRequiredWithoutTeam_batting_scoreNestedInput
    team?: CricketTeamUpdateOneRequiredWithoutCricket_match_player_batting_scoreNestedInput
    match_batters?: CricketTeamMatchDataUpdateManyWithoutBattersNestedInput
    over_striker?: CricketOverUpdateManyWithoutStrikerScoreNestedInput
    over_non_striker?: CricketOverUpdateManyWithoutNonStrikerScoreNestedInput
  }

  export type CricketMatchPlayerBattingScoreUncheckedUpdateWithoutPlayerInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    runs?: IntFieldUpdateOperationsInput | number
    balls?: IntFieldUpdateOperationsInput | number
    fours?: IntFieldUpdateOperationsInput | number
    sixes?: IntFieldUpdateOperationsInput | number
    strikeRate?: FloatFieldUpdateOperationsInput | number
    out?: BoolFieldUpdateOperationsInput | boolean
    played?: BoolFieldUpdateOperationsInput | boolean
    wicketType?: NullableStringFieldUpdateOperationsInput | string | null
    matchId?: StringFieldUpdateOperationsInput | string
    teamId?: StringFieldUpdateOperationsInput | string
    match_batters?: CricketTeamMatchDataUncheckedUpdateManyWithoutBattersNestedInput
    over_striker?: CricketOverUncheckedUpdateManyWithoutStrikerScoreNestedInput
    over_non_striker?: CricketOverUncheckedUpdateManyWithoutNonStrikerScoreNestedInput
  }

  export type CricketMatchPlayerBattingScoreUncheckedUpdateManyWithoutPlayerInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    runs?: IntFieldUpdateOperationsInput | number
    balls?: IntFieldUpdateOperationsInput | number
    fours?: IntFieldUpdateOperationsInput | number
    sixes?: IntFieldUpdateOperationsInput | number
    strikeRate?: FloatFieldUpdateOperationsInput | number
    out?: BoolFieldUpdateOperationsInput | boolean
    played?: BoolFieldUpdateOperationsInput | boolean
    wicketType?: NullableStringFieldUpdateOperationsInput | string | null
    matchId?: StringFieldUpdateOperationsInput | string
    teamId?: StringFieldUpdateOperationsInput | string
  }

  export type CricketMatchPlayerBowlingScoreUpdateWithoutPlayerInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    runs?: IntFieldUpdateOperationsInput | number
    balls?: IntFieldUpdateOperationsInput | number
    fours?: IntFieldUpdateOperationsInput | number
    sixes?: IntFieldUpdateOperationsInput | number
    played?: BoolFieldUpdateOperationsInput | boolean
    wickets?: IntFieldUpdateOperationsInput | number
    match?: CricketMatchUpdateOneRequiredWithoutTeam_bowling_scoreNestedInput
    team?: CricketTeamUpdateOneRequiredWithoutCricket_match_player_bowling_scoreNestedInput
    match_bowlers?: CricketTeamMatchDataUpdateManyWithoutBowlersNestedInput
    over_bowler?: CricketOverUpdateManyWithoutBowlerScoreNestedInput
  }

  export type CricketMatchPlayerBowlingScoreUncheckedUpdateWithoutPlayerInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    runs?: IntFieldUpdateOperationsInput | number
    balls?: IntFieldUpdateOperationsInput | number
    fours?: IntFieldUpdateOperationsInput | number
    sixes?: IntFieldUpdateOperationsInput | number
    played?: BoolFieldUpdateOperationsInput | boolean
    wickets?: IntFieldUpdateOperationsInput | number
    matchId?: StringFieldUpdateOperationsInput | string
    teamId?: StringFieldUpdateOperationsInput | string
    match_bowlers?: CricketTeamMatchDataUncheckedUpdateManyWithoutBowlersNestedInput
    over_bowler?: CricketOverUncheckedUpdateManyWithoutBowlerScoreNestedInput
  }

  export type CricketMatchPlayerBowlingScoreUncheckedUpdateManyWithoutPlayerInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    runs?: IntFieldUpdateOperationsInput | number
    balls?: IntFieldUpdateOperationsInput | number
    fours?: IntFieldUpdateOperationsInput | number
    sixes?: IntFieldUpdateOperationsInput | number
    played?: BoolFieldUpdateOperationsInput | boolean
    wickets?: IntFieldUpdateOperationsInput | number
    matchId?: StringFieldUpdateOperationsInput | string
    teamId?: StringFieldUpdateOperationsInput | string
  }

  export type CricketOverCreateManyMatchInput = {
    sis_id?: string
    runs?: number
    wickets?: number
    totalBalls?: number
    validBalls?: number
    strikerScoreId: string
    nonStrikerScoreId: string
    bowlerScoreId: string
  }

  export type CricketMatchPlayerBattingScoreCreateManyMatchInput = {
    sis_id?: string
    runs?: number
    balls?: number
    fours?: number
    sixes?: number
    strikeRate?: number
    out?: boolean
    played?: boolean
    wicketType?: string | null
    playerId?: string | null
    teamId: string
  }

  export type CricketMatchPlayerBowlingScoreCreateManyMatchInput = {
    sis_id?: string
    runs?: number
    balls?: number
    fours?: number
    sixes?: number
    played?: boolean
    wickets?: number
    playerId?: string | null
    teamId: string
  }

  export type CricketPlayerUpdateWithoutMatchesInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    isSelected?: BoolFieldUpdateOperationsInput | boolean
    isCaptain?: BoolFieldUpdateOperationsInput | boolean
    isWicketKeeper?: BoolFieldUpdateOperationsInput | boolean
    isAllRounder?: BoolFieldUpdateOperationsInput | boolean
    isBatsman?: BoolFieldUpdateOperationsInput | boolean
    isBowler?: BoolFieldUpdateOperationsInput | boolean
    runs?: IntFieldUpdateOperationsInput | number
    noOfMatchesPlayed?: IntFieldUpdateOperationsInput | number
    noOfSixes?: IntFieldUpdateOperationsInput | number
    noOfFours?: IntFieldUpdateOperationsInput | number
    noOfWicketsTaken?: IntFieldUpdateOperationsInput | number
    noOfHalfCenturies?: IntFieldUpdateOperationsInput | number
    noOfCenturies?: IntFieldUpdateOperationsInput | number
    noOfWickets?: IntFieldUpdateOperationsInput | number
    user?: UsersUpdateOneRequiredWithoutCricket_playersNestedInput
    team?: CricketTeamUpdateOneWithoutPlayer_teamNestedInput
    user_cricket_players?: UsersUpdateManyWithoutCricketPlayerNestedInput
    team_players?: CricketTeamUpdateManyWithoutPlayersNestedInput
    batting_score_player?: CricketMatchPlayerBattingScoreUpdateManyWithoutPlayerNestedInput
    bowling_score_player?: CricketMatchPlayerBowlingScoreUpdateManyWithoutPlayerNestedInput
  }

  export type CricketPlayerUncheckedUpdateWithoutMatchesInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    isSelected?: BoolFieldUpdateOperationsInput | boolean
    isCaptain?: BoolFieldUpdateOperationsInput | boolean
    isWicketKeeper?: BoolFieldUpdateOperationsInput | boolean
    isAllRounder?: BoolFieldUpdateOperationsInput | boolean
    isBatsman?: BoolFieldUpdateOperationsInput | boolean
    isBowler?: BoolFieldUpdateOperationsInput | boolean
    runs?: IntFieldUpdateOperationsInput | number
    noOfMatchesPlayed?: IntFieldUpdateOperationsInput | number
    noOfSixes?: IntFieldUpdateOperationsInput | number
    noOfFours?: IntFieldUpdateOperationsInput | number
    noOfWicketsTaken?: IntFieldUpdateOperationsInput | number
    noOfHalfCenturies?: IntFieldUpdateOperationsInput | number
    noOfCenturies?: IntFieldUpdateOperationsInput | number
    noOfWickets?: IntFieldUpdateOperationsInput | number
    user_cricket_players?: UsersUncheckedUpdateManyWithoutCricketPlayerNestedInput
    team_players?: CricketTeamUncheckedUpdateManyWithoutPlayersNestedInput
    batting_score_player?: CricketMatchPlayerBattingScoreUncheckedUpdateManyWithoutPlayerNestedInput
    bowling_score_player?: CricketMatchPlayerBowlingScoreUncheckedUpdateManyWithoutPlayerNestedInput
  }

  export type CricketPlayerUncheckedUpdateManyWithoutMatchesInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    isSelected?: BoolFieldUpdateOperationsInput | boolean
    isCaptain?: BoolFieldUpdateOperationsInput | boolean
    isWicketKeeper?: BoolFieldUpdateOperationsInput | boolean
    isAllRounder?: BoolFieldUpdateOperationsInput | boolean
    isBatsman?: BoolFieldUpdateOperationsInput | boolean
    isBowler?: BoolFieldUpdateOperationsInput | boolean
    runs?: IntFieldUpdateOperationsInput | number
    noOfMatchesPlayed?: IntFieldUpdateOperationsInput | number
    noOfSixes?: IntFieldUpdateOperationsInput | number
    noOfFours?: IntFieldUpdateOperationsInput | number
    noOfWicketsTaken?: IntFieldUpdateOperationsInput | number
    noOfHalfCenturies?: IntFieldUpdateOperationsInput | number
    noOfCenturies?: IntFieldUpdateOperationsInput | number
    noOfWickets?: IntFieldUpdateOperationsInput | number
  }

  export type CricketOverUpdateWithoutMatchInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    runs?: IntFieldUpdateOperationsInput | number
    wickets?: IntFieldUpdateOperationsInput | number
    totalBalls?: IntFieldUpdateOperationsInput | number
    validBalls?: IntFieldUpdateOperationsInput | number
    strikerScore?: CricketMatchPlayerBattingScoreUpdateOneRequiredWithoutOver_strikerNestedInput
    nonStrikerScore?: CricketMatchPlayerBattingScoreUpdateOneRequiredWithoutOver_non_strikerNestedInput
    bowlerScore?: CricketMatchPlayerBowlingScoreUpdateOneRequiredWithoutOver_bowlerNestedInput
    balls?: CricketOverBallUpdateManyWithoutOverNestedInput
    match_current_over?: CricketMatchUpdateManyWithoutCurrentOverNestedInput
  }

  export type CricketOverUncheckedUpdateWithoutMatchInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    runs?: IntFieldUpdateOperationsInput | number
    wickets?: IntFieldUpdateOperationsInput | number
    totalBalls?: IntFieldUpdateOperationsInput | number
    validBalls?: IntFieldUpdateOperationsInput | number
    strikerScoreId?: StringFieldUpdateOperationsInput | string
    nonStrikerScoreId?: StringFieldUpdateOperationsInput | string
    bowlerScoreId?: StringFieldUpdateOperationsInput | string
    balls?: CricketOverBallUncheckedUpdateManyWithoutOverNestedInput
    match_current_over?: CricketMatchUncheckedUpdateManyWithoutCurrentOverNestedInput
  }

  export type CricketOverUncheckedUpdateManyWithoutMatchInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    runs?: IntFieldUpdateOperationsInput | number
    wickets?: IntFieldUpdateOperationsInput | number
    totalBalls?: IntFieldUpdateOperationsInput | number
    validBalls?: IntFieldUpdateOperationsInput | number
    strikerScoreId?: StringFieldUpdateOperationsInput | string
    nonStrikerScoreId?: StringFieldUpdateOperationsInput | string
    bowlerScoreId?: StringFieldUpdateOperationsInput | string
  }

  export type CricketMatchPlayerBattingScoreUpdateWithoutMatchInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    runs?: IntFieldUpdateOperationsInput | number
    balls?: IntFieldUpdateOperationsInput | number
    fours?: IntFieldUpdateOperationsInput | number
    sixes?: IntFieldUpdateOperationsInput | number
    strikeRate?: FloatFieldUpdateOperationsInput | number
    out?: BoolFieldUpdateOperationsInput | boolean
    played?: BoolFieldUpdateOperationsInput | boolean
    wicketType?: NullableStringFieldUpdateOperationsInput | string | null
    player?: CricketPlayerUpdateOneWithoutBatting_score_playerNestedInput
    team?: CricketTeamUpdateOneRequiredWithoutCricket_match_player_batting_scoreNestedInput
    match_batters?: CricketTeamMatchDataUpdateManyWithoutBattersNestedInput
    over_striker?: CricketOverUpdateManyWithoutStrikerScoreNestedInput
    over_non_striker?: CricketOverUpdateManyWithoutNonStrikerScoreNestedInput
  }

  export type CricketMatchPlayerBattingScoreUncheckedUpdateWithoutMatchInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    runs?: IntFieldUpdateOperationsInput | number
    balls?: IntFieldUpdateOperationsInput | number
    fours?: IntFieldUpdateOperationsInput | number
    sixes?: IntFieldUpdateOperationsInput | number
    strikeRate?: FloatFieldUpdateOperationsInput | number
    out?: BoolFieldUpdateOperationsInput | boolean
    played?: BoolFieldUpdateOperationsInput | boolean
    wicketType?: NullableStringFieldUpdateOperationsInput | string | null
    playerId?: NullableStringFieldUpdateOperationsInput | string | null
    teamId?: StringFieldUpdateOperationsInput | string
    match_batters?: CricketTeamMatchDataUncheckedUpdateManyWithoutBattersNestedInput
    over_striker?: CricketOverUncheckedUpdateManyWithoutStrikerScoreNestedInput
    over_non_striker?: CricketOverUncheckedUpdateManyWithoutNonStrikerScoreNestedInput
  }

  export type CricketMatchPlayerBattingScoreUncheckedUpdateManyWithoutMatchInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    runs?: IntFieldUpdateOperationsInput | number
    balls?: IntFieldUpdateOperationsInput | number
    fours?: IntFieldUpdateOperationsInput | number
    sixes?: IntFieldUpdateOperationsInput | number
    strikeRate?: FloatFieldUpdateOperationsInput | number
    out?: BoolFieldUpdateOperationsInput | boolean
    played?: BoolFieldUpdateOperationsInput | boolean
    wicketType?: NullableStringFieldUpdateOperationsInput | string | null
    playerId?: NullableStringFieldUpdateOperationsInput | string | null
    teamId?: StringFieldUpdateOperationsInput | string
  }

  export type CricketMatchPlayerBowlingScoreUpdateWithoutMatchInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    runs?: IntFieldUpdateOperationsInput | number
    balls?: IntFieldUpdateOperationsInput | number
    fours?: IntFieldUpdateOperationsInput | number
    sixes?: IntFieldUpdateOperationsInput | number
    played?: BoolFieldUpdateOperationsInput | boolean
    wickets?: IntFieldUpdateOperationsInput | number
    player?: CricketPlayerUpdateOneWithoutBowling_score_playerNestedInput
    team?: CricketTeamUpdateOneRequiredWithoutCricket_match_player_bowling_scoreNestedInput
    match_bowlers?: CricketTeamMatchDataUpdateManyWithoutBowlersNestedInput
    over_bowler?: CricketOverUpdateManyWithoutBowlerScoreNestedInput
  }

  export type CricketMatchPlayerBowlingScoreUncheckedUpdateWithoutMatchInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    runs?: IntFieldUpdateOperationsInput | number
    balls?: IntFieldUpdateOperationsInput | number
    fours?: IntFieldUpdateOperationsInput | number
    sixes?: IntFieldUpdateOperationsInput | number
    played?: BoolFieldUpdateOperationsInput | boolean
    wickets?: IntFieldUpdateOperationsInput | number
    playerId?: NullableStringFieldUpdateOperationsInput | string | null
    teamId?: StringFieldUpdateOperationsInput | string
    match_bowlers?: CricketTeamMatchDataUncheckedUpdateManyWithoutBowlersNestedInput
    over_bowler?: CricketOverUncheckedUpdateManyWithoutBowlerScoreNestedInput
  }

  export type CricketMatchPlayerBowlingScoreUncheckedUpdateManyWithoutMatchInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    runs?: IntFieldUpdateOperationsInput | number
    balls?: IntFieldUpdateOperationsInput | number
    fours?: IntFieldUpdateOperationsInput | number
    sixes?: IntFieldUpdateOperationsInput | number
    played?: BoolFieldUpdateOperationsInput | boolean
    wickets?: IntFieldUpdateOperationsInput | number
    playerId?: NullableStringFieldUpdateOperationsInput | string | null
    teamId?: StringFieldUpdateOperationsInput | string
  }

  export type CricketMatchCreateManyTeamAScoreInput = {
    sis_id?: string
    played?: boolean
    tossWonBy?: string | null
    tossDecision?: string | null
    date: Date | string
    venue?: string | null
    year: string
    dependency?: boolean
    dependentOn?: string | null
    team1Wickets?: number | null
    team2Wickets?: number | null
    team1Runs?: number | null
    team2Runs?: number | null
    team1Balls?: number | null
    team2Balls?: number | null
    overs?: number | null
    powerPlayOvers?: number | null
    overPerBowler?: number | null
    currentOverId?: string | null
    wonBy?: string | null
    teamAId?: string | null
    teamBId?: string | null
    teamBScoreId?: string | null
    battingTeamScoreId?: string | null
    bowlingTeamScoreId?: string | null
  }

  export type CricketMatchCreateManyTeamBScoreInput = {
    sis_id?: string
    played?: boolean
    tossWonBy?: string | null
    tossDecision?: string | null
    date: Date | string
    venue?: string | null
    year: string
    dependency?: boolean
    dependentOn?: string | null
    team1Wickets?: number | null
    team2Wickets?: number | null
    team1Runs?: number | null
    team2Runs?: number | null
    team1Balls?: number | null
    team2Balls?: number | null
    overs?: number | null
    powerPlayOvers?: number | null
    overPerBowler?: number | null
    currentOverId?: string | null
    wonBy?: string | null
    teamAId?: string | null
    teamBId?: string | null
    teamAScoreId?: string | null
    battingTeamScoreId?: string | null
    bowlingTeamScoreId?: string | null
  }

  export type CricketMatchCreateManyBattingTeamInput = {
    sis_id?: string
    played?: boolean
    tossWonBy?: string | null
    tossDecision?: string | null
    date: Date | string
    venue?: string | null
    year: string
    dependency?: boolean
    dependentOn?: string | null
    team1Wickets?: number | null
    team2Wickets?: number | null
    team1Runs?: number | null
    team2Runs?: number | null
    team1Balls?: number | null
    team2Balls?: number | null
    overs?: number | null
    powerPlayOvers?: number | null
    overPerBowler?: number | null
    currentOverId?: string | null
    wonBy?: string | null
    teamAId?: string | null
    teamBId?: string | null
    teamAScoreId?: string | null
    teamBScoreId?: string | null
    bowlingTeamScoreId?: string | null
  }

  export type CricketMatchCreateManyBowlingTeamInput = {
    sis_id?: string
    played?: boolean
    tossWonBy?: string | null
    tossDecision?: string | null
    date: Date | string
    venue?: string | null
    year: string
    dependency?: boolean
    dependentOn?: string | null
    team1Wickets?: number | null
    team2Wickets?: number | null
    team1Runs?: number | null
    team2Runs?: number | null
    team1Balls?: number | null
    team2Balls?: number | null
    overs?: number | null
    powerPlayOvers?: number | null
    overPerBowler?: number | null
    currentOverId?: string | null
    wonBy?: string | null
    teamAId?: string | null
    teamBId?: string | null
    teamAScoreId?: string | null
    teamBScoreId?: string | null
    battingTeamScoreId?: string | null
  }

  export type CricketMatchPlayerBattingScoreUpdateWithoutMatch_battersInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    runs?: IntFieldUpdateOperationsInput | number
    balls?: IntFieldUpdateOperationsInput | number
    fours?: IntFieldUpdateOperationsInput | number
    sixes?: IntFieldUpdateOperationsInput | number
    strikeRate?: FloatFieldUpdateOperationsInput | number
    out?: BoolFieldUpdateOperationsInput | boolean
    played?: BoolFieldUpdateOperationsInput | boolean
    wicketType?: NullableStringFieldUpdateOperationsInput | string | null
    player?: CricketPlayerUpdateOneWithoutBatting_score_playerNestedInput
    match?: CricketMatchUpdateOneRequiredWithoutTeam_batting_scoreNestedInput
    team?: CricketTeamUpdateOneRequiredWithoutCricket_match_player_batting_scoreNestedInput
    over_striker?: CricketOverUpdateManyWithoutStrikerScoreNestedInput
    over_non_striker?: CricketOverUpdateManyWithoutNonStrikerScoreNestedInput
  }

  export type CricketMatchPlayerBattingScoreUncheckedUpdateWithoutMatch_battersInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    runs?: IntFieldUpdateOperationsInput | number
    balls?: IntFieldUpdateOperationsInput | number
    fours?: IntFieldUpdateOperationsInput | number
    sixes?: IntFieldUpdateOperationsInput | number
    strikeRate?: FloatFieldUpdateOperationsInput | number
    out?: BoolFieldUpdateOperationsInput | boolean
    played?: BoolFieldUpdateOperationsInput | boolean
    wicketType?: NullableStringFieldUpdateOperationsInput | string | null
    playerId?: NullableStringFieldUpdateOperationsInput | string | null
    matchId?: StringFieldUpdateOperationsInput | string
    teamId?: StringFieldUpdateOperationsInput | string
    over_striker?: CricketOverUncheckedUpdateManyWithoutStrikerScoreNestedInput
    over_non_striker?: CricketOverUncheckedUpdateManyWithoutNonStrikerScoreNestedInput
  }

  export type CricketMatchPlayerBattingScoreUncheckedUpdateManyWithoutMatch_battersInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    runs?: IntFieldUpdateOperationsInput | number
    balls?: IntFieldUpdateOperationsInput | number
    fours?: IntFieldUpdateOperationsInput | number
    sixes?: IntFieldUpdateOperationsInput | number
    strikeRate?: FloatFieldUpdateOperationsInput | number
    out?: BoolFieldUpdateOperationsInput | boolean
    played?: BoolFieldUpdateOperationsInput | boolean
    wicketType?: NullableStringFieldUpdateOperationsInput | string | null
    playerId?: NullableStringFieldUpdateOperationsInput | string | null
    matchId?: StringFieldUpdateOperationsInput | string
    teamId?: StringFieldUpdateOperationsInput | string
  }

  export type CricketMatchPlayerBowlingScoreUpdateWithoutMatch_bowlersInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    runs?: IntFieldUpdateOperationsInput | number
    balls?: IntFieldUpdateOperationsInput | number
    fours?: IntFieldUpdateOperationsInput | number
    sixes?: IntFieldUpdateOperationsInput | number
    played?: BoolFieldUpdateOperationsInput | boolean
    wickets?: IntFieldUpdateOperationsInput | number
    player?: CricketPlayerUpdateOneWithoutBowling_score_playerNestedInput
    match?: CricketMatchUpdateOneRequiredWithoutTeam_bowling_scoreNestedInput
    team?: CricketTeamUpdateOneRequiredWithoutCricket_match_player_bowling_scoreNestedInput
    over_bowler?: CricketOverUpdateManyWithoutBowlerScoreNestedInput
  }

  export type CricketMatchPlayerBowlingScoreUncheckedUpdateWithoutMatch_bowlersInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    runs?: IntFieldUpdateOperationsInput | number
    balls?: IntFieldUpdateOperationsInput | number
    fours?: IntFieldUpdateOperationsInput | number
    sixes?: IntFieldUpdateOperationsInput | number
    played?: BoolFieldUpdateOperationsInput | boolean
    wickets?: IntFieldUpdateOperationsInput | number
    playerId?: NullableStringFieldUpdateOperationsInput | string | null
    matchId?: StringFieldUpdateOperationsInput | string
    teamId?: StringFieldUpdateOperationsInput | string
    over_bowler?: CricketOverUncheckedUpdateManyWithoutBowlerScoreNestedInput
  }

  export type CricketMatchPlayerBowlingScoreUncheckedUpdateManyWithoutMatch_bowlersInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    runs?: IntFieldUpdateOperationsInput | number
    balls?: IntFieldUpdateOperationsInput | number
    fours?: IntFieldUpdateOperationsInput | number
    sixes?: IntFieldUpdateOperationsInput | number
    played?: BoolFieldUpdateOperationsInput | boolean
    wickets?: IntFieldUpdateOperationsInput | number
    playerId?: NullableStringFieldUpdateOperationsInput | string | null
    matchId?: StringFieldUpdateOperationsInput | string
    teamId?: StringFieldUpdateOperationsInput | string
  }

  export type CricketMatchUpdateWithoutTeamAScoreInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    played?: BoolFieldUpdateOperationsInput | boolean
    tossDecision?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    year?: StringFieldUpdateOperationsInput | string
    dependency?: BoolFieldUpdateOperationsInput | boolean
    dependentOn?: NullableStringFieldUpdateOperationsInput | string | null
    team1Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team2Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team1Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team2Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team1Balls?: NullableIntFieldUpdateOperationsInput | number | null
    team2Balls?: NullableIntFieldUpdateOperationsInput | number | null
    overs?: NullableIntFieldUpdateOperationsInput | number | null
    powerPlayOvers?: NullableIntFieldUpdateOperationsInput | number | null
    overPerBowler?: NullableIntFieldUpdateOperationsInput | number | null
    tossWonByTeam?: CricketTeamUpdateOneWithoutToss_winning_teamNestedInput
    currentOver?: CricketOverUpdateOneWithoutMatch_current_overNestedInput
    wonByTeam?: CricketTeamUpdateOneWithoutWinning_teamNestedInput
    teamA?: CricketTeamUpdateOneWithoutCricketMatchTeamANestedInput
    teamB?: CricketTeamUpdateOneWithoutCricketMatchTeamBNestedInput
    teamBScore?: CricketTeamMatchDataUpdateOneWithoutCricketMatchTeamBNestedInput
    battingTeam?: CricketTeamMatchDataUpdateOneWithoutMatchBttingTeamNestedInput
    bowlingTeam?: CricketTeamMatchDataUpdateOneWithoutMatchBowlingTeamNestedInput
    players?: CricketPlayerUpdateManyWithoutMatchesNestedInput
    over_match?: CricketOverUpdateManyWithoutMatchNestedInput
    team_batting_score?: CricketMatchPlayerBattingScoreUpdateManyWithoutMatchNestedInput
    team_bowling_score?: CricketMatchPlayerBowlingScoreUpdateManyWithoutMatchNestedInput
  }

  export type CricketMatchUncheckedUpdateWithoutTeamAScoreInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    played?: BoolFieldUpdateOperationsInput | boolean
    tossWonBy?: NullableStringFieldUpdateOperationsInput | string | null
    tossDecision?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    year?: StringFieldUpdateOperationsInput | string
    dependency?: BoolFieldUpdateOperationsInput | boolean
    dependentOn?: NullableStringFieldUpdateOperationsInput | string | null
    team1Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team2Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team1Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team2Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team1Balls?: NullableIntFieldUpdateOperationsInput | number | null
    team2Balls?: NullableIntFieldUpdateOperationsInput | number | null
    overs?: NullableIntFieldUpdateOperationsInput | number | null
    powerPlayOvers?: NullableIntFieldUpdateOperationsInput | number | null
    overPerBowler?: NullableIntFieldUpdateOperationsInput | number | null
    currentOverId?: NullableStringFieldUpdateOperationsInput | string | null
    wonBy?: NullableStringFieldUpdateOperationsInput | string | null
    teamAId?: NullableStringFieldUpdateOperationsInput | string | null
    teamBId?: NullableStringFieldUpdateOperationsInput | string | null
    teamBScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    battingTeamScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    bowlingTeamScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    players?: CricketPlayerUncheckedUpdateManyWithoutMatchesNestedInput
    over_match?: CricketOverUncheckedUpdateManyWithoutMatchNestedInput
    team_batting_score?: CricketMatchPlayerBattingScoreUncheckedUpdateManyWithoutMatchNestedInput
    team_bowling_score?: CricketMatchPlayerBowlingScoreUncheckedUpdateManyWithoutMatchNestedInput
  }

  export type CricketMatchUncheckedUpdateManyWithoutTeamAScoreInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    played?: BoolFieldUpdateOperationsInput | boolean
    tossWonBy?: NullableStringFieldUpdateOperationsInput | string | null
    tossDecision?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    year?: StringFieldUpdateOperationsInput | string
    dependency?: BoolFieldUpdateOperationsInput | boolean
    dependentOn?: NullableStringFieldUpdateOperationsInput | string | null
    team1Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team2Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team1Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team2Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team1Balls?: NullableIntFieldUpdateOperationsInput | number | null
    team2Balls?: NullableIntFieldUpdateOperationsInput | number | null
    overs?: NullableIntFieldUpdateOperationsInput | number | null
    powerPlayOvers?: NullableIntFieldUpdateOperationsInput | number | null
    overPerBowler?: NullableIntFieldUpdateOperationsInput | number | null
    currentOverId?: NullableStringFieldUpdateOperationsInput | string | null
    wonBy?: NullableStringFieldUpdateOperationsInput | string | null
    teamAId?: NullableStringFieldUpdateOperationsInput | string | null
    teamBId?: NullableStringFieldUpdateOperationsInput | string | null
    teamBScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    battingTeamScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    bowlingTeamScoreId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CricketMatchUpdateWithoutTeamBScoreInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    played?: BoolFieldUpdateOperationsInput | boolean
    tossDecision?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    year?: StringFieldUpdateOperationsInput | string
    dependency?: BoolFieldUpdateOperationsInput | boolean
    dependentOn?: NullableStringFieldUpdateOperationsInput | string | null
    team1Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team2Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team1Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team2Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team1Balls?: NullableIntFieldUpdateOperationsInput | number | null
    team2Balls?: NullableIntFieldUpdateOperationsInput | number | null
    overs?: NullableIntFieldUpdateOperationsInput | number | null
    powerPlayOvers?: NullableIntFieldUpdateOperationsInput | number | null
    overPerBowler?: NullableIntFieldUpdateOperationsInput | number | null
    tossWonByTeam?: CricketTeamUpdateOneWithoutToss_winning_teamNestedInput
    currentOver?: CricketOverUpdateOneWithoutMatch_current_overNestedInput
    wonByTeam?: CricketTeamUpdateOneWithoutWinning_teamNestedInput
    teamA?: CricketTeamUpdateOneWithoutCricketMatchTeamANestedInput
    teamB?: CricketTeamUpdateOneWithoutCricketMatchTeamBNestedInput
    teamAScore?: CricketTeamMatchDataUpdateOneWithoutCricketMatchTeamANestedInput
    battingTeam?: CricketTeamMatchDataUpdateOneWithoutMatchBttingTeamNestedInput
    bowlingTeam?: CricketTeamMatchDataUpdateOneWithoutMatchBowlingTeamNestedInput
    players?: CricketPlayerUpdateManyWithoutMatchesNestedInput
    over_match?: CricketOverUpdateManyWithoutMatchNestedInput
    team_batting_score?: CricketMatchPlayerBattingScoreUpdateManyWithoutMatchNestedInput
    team_bowling_score?: CricketMatchPlayerBowlingScoreUpdateManyWithoutMatchNestedInput
  }

  export type CricketMatchUncheckedUpdateWithoutTeamBScoreInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    played?: BoolFieldUpdateOperationsInput | boolean
    tossWonBy?: NullableStringFieldUpdateOperationsInput | string | null
    tossDecision?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    year?: StringFieldUpdateOperationsInput | string
    dependency?: BoolFieldUpdateOperationsInput | boolean
    dependentOn?: NullableStringFieldUpdateOperationsInput | string | null
    team1Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team2Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team1Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team2Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team1Balls?: NullableIntFieldUpdateOperationsInput | number | null
    team2Balls?: NullableIntFieldUpdateOperationsInput | number | null
    overs?: NullableIntFieldUpdateOperationsInput | number | null
    powerPlayOvers?: NullableIntFieldUpdateOperationsInput | number | null
    overPerBowler?: NullableIntFieldUpdateOperationsInput | number | null
    currentOverId?: NullableStringFieldUpdateOperationsInput | string | null
    wonBy?: NullableStringFieldUpdateOperationsInput | string | null
    teamAId?: NullableStringFieldUpdateOperationsInput | string | null
    teamBId?: NullableStringFieldUpdateOperationsInput | string | null
    teamAScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    battingTeamScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    bowlingTeamScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    players?: CricketPlayerUncheckedUpdateManyWithoutMatchesNestedInput
    over_match?: CricketOverUncheckedUpdateManyWithoutMatchNestedInput
    team_batting_score?: CricketMatchPlayerBattingScoreUncheckedUpdateManyWithoutMatchNestedInput
    team_bowling_score?: CricketMatchPlayerBowlingScoreUncheckedUpdateManyWithoutMatchNestedInput
  }

  export type CricketMatchUncheckedUpdateManyWithoutTeamBScoreInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    played?: BoolFieldUpdateOperationsInput | boolean
    tossWonBy?: NullableStringFieldUpdateOperationsInput | string | null
    tossDecision?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    year?: StringFieldUpdateOperationsInput | string
    dependency?: BoolFieldUpdateOperationsInput | boolean
    dependentOn?: NullableStringFieldUpdateOperationsInput | string | null
    team1Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team2Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team1Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team2Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team1Balls?: NullableIntFieldUpdateOperationsInput | number | null
    team2Balls?: NullableIntFieldUpdateOperationsInput | number | null
    overs?: NullableIntFieldUpdateOperationsInput | number | null
    powerPlayOvers?: NullableIntFieldUpdateOperationsInput | number | null
    overPerBowler?: NullableIntFieldUpdateOperationsInput | number | null
    currentOverId?: NullableStringFieldUpdateOperationsInput | string | null
    wonBy?: NullableStringFieldUpdateOperationsInput | string | null
    teamAId?: NullableStringFieldUpdateOperationsInput | string | null
    teamBId?: NullableStringFieldUpdateOperationsInput | string | null
    teamAScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    battingTeamScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    bowlingTeamScoreId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CricketMatchUpdateWithoutBattingTeamInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    played?: BoolFieldUpdateOperationsInput | boolean
    tossDecision?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    year?: StringFieldUpdateOperationsInput | string
    dependency?: BoolFieldUpdateOperationsInput | boolean
    dependentOn?: NullableStringFieldUpdateOperationsInput | string | null
    team1Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team2Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team1Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team2Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team1Balls?: NullableIntFieldUpdateOperationsInput | number | null
    team2Balls?: NullableIntFieldUpdateOperationsInput | number | null
    overs?: NullableIntFieldUpdateOperationsInput | number | null
    powerPlayOvers?: NullableIntFieldUpdateOperationsInput | number | null
    overPerBowler?: NullableIntFieldUpdateOperationsInput | number | null
    tossWonByTeam?: CricketTeamUpdateOneWithoutToss_winning_teamNestedInput
    currentOver?: CricketOverUpdateOneWithoutMatch_current_overNestedInput
    wonByTeam?: CricketTeamUpdateOneWithoutWinning_teamNestedInput
    teamA?: CricketTeamUpdateOneWithoutCricketMatchTeamANestedInput
    teamB?: CricketTeamUpdateOneWithoutCricketMatchTeamBNestedInput
    teamAScore?: CricketTeamMatchDataUpdateOneWithoutCricketMatchTeamANestedInput
    teamBScore?: CricketTeamMatchDataUpdateOneWithoutCricketMatchTeamBNestedInput
    bowlingTeam?: CricketTeamMatchDataUpdateOneWithoutMatchBowlingTeamNestedInput
    players?: CricketPlayerUpdateManyWithoutMatchesNestedInput
    over_match?: CricketOverUpdateManyWithoutMatchNestedInput
    team_batting_score?: CricketMatchPlayerBattingScoreUpdateManyWithoutMatchNestedInput
    team_bowling_score?: CricketMatchPlayerBowlingScoreUpdateManyWithoutMatchNestedInput
  }

  export type CricketMatchUncheckedUpdateWithoutBattingTeamInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    played?: BoolFieldUpdateOperationsInput | boolean
    tossWonBy?: NullableStringFieldUpdateOperationsInput | string | null
    tossDecision?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    year?: StringFieldUpdateOperationsInput | string
    dependency?: BoolFieldUpdateOperationsInput | boolean
    dependentOn?: NullableStringFieldUpdateOperationsInput | string | null
    team1Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team2Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team1Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team2Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team1Balls?: NullableIntFieldUpdateOperationsInput | number | null
    team2Balls?: NullableIntFieldUpdateOperationsInput | number | null
    overs?: NullableIntFieldUpdateOperationsInput | number | null
    powerPlayOvers?: NullableIntFieldUpdateOperationsInput | number | null
    overPerBowler?: NullableIntFieldUpdateOperationsInput | number | null
    currentOverId?: NullableStringFieldUpdateOperationsInput | string | null
    wonBy?: NullableStringFieldUpdateOperationsInput | string | null
    teamAId?: NullableStringFieldUpdateOperationsInput | string | null
    teamBId?: NullableStringFieldUpdateOperationsInput | string | null
    teamAScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    teamBScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    bowlingTeamScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    players?: CricketPlayerUncheckedUpdateManyWithoutMatchesNestedInput
    over_match?: CricketOverUncheckedUpdateManyWithoutMatchNestedInput
    team_batting_score?: CricketMatchPlayerBattingScoreUncheckedUpdateManyWithoutMatchNestedInput
    team_bowling_score?: CricketMatchPlayerBowlingScoreUncheckedUpdateManyWithoutMatchNestedInput
  }

  export type CricketMatchUncheckedUpdateManyWithoutBattingTeamInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    played?: BoolFieldUpdateOperationsInput | boolean
    tossWonBy?: NullableStringFieldUpdateOperationsInput | string | null
    tossDecision?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    year?: StringFieldUpdateOperationsInput | string
    dependency?: BoolFieldUpdateOperationsInput | boolean
    dependentOn?: NullableStringFieldUpdateOperationsInput | string | null
    team1Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team2Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team1Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team2Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team1Balls?: NullableIntFieldUpdateOperationsInput | number | null
    team2Balls?: NullableIntFieldUpdateOperationsInput | number | null
    overs?: NullableIntFieldUpdateOperationsInput | number | null
    powerPlayOvers?: NullableIntFieldUpdateOperationsInput | number | null
    overPerBowler?: NullableIntFieldUpdateOperationsInput | number | null
    currentOverId?: NullableStringFieldUpdateOperationsInput | string | null
    wonBy?: NullableStringFieldUpdateOperationsInput | string | null
    teamAId?: NullableStringFieldUpdateOperationsInput | string | null
    teamBId?: NullableStringFieldUpdateOperationsInput | string | null
    teamAScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    teamBScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    bowlingTeamScoreId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CricketMatchUpdateWithoutBowlingTeamInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    played?: BoolFieldUpdateOperationsInput | boolean
    tossDecision?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    year?: StringFieldUpdateOperationsInput | string
    dependency?: BoolFieldUpdateOperationsInput | boolean
    dependentOn?: NullableStringFieldUpdateOperationsInput | string | null
    team1Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team2Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team1Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team2Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team1Balls?: NullableIntFieldUpdateOperationsInput | number | null
    team2Balls?: NullableIntFieldUpdateOperationsInput | number | null
    overs?: NullableIntFieldUpdateOperationsInput | number | null
    powerPlayOvers?: NullableIntFieldUpdateOperationsInput | number | null
    overPerBowler?: NullableIntFieldUpdateOperationsInput | number | null
    tossWonByTeam?: CricketTeamUpdateOneWithoutToss_winning_teamNestedInput
    currentOver?: CricketOverUpdateOneWithoutMatch_current_overNestedInput
    wonByTeam?: CricketTeamUpdateOneWithoutWinning_teamNestedInput
    teamA?: CricketTeamUpdateOneWithoutCricketMatchTeamANestedInput
    teamB?: CricketTeamUpdateOneWithoutCricketMatchTeamBNestedInput
    teamAScore?: CricketTeamMatchDataUpdateOneWithoutCricketMatchTeamANestedInput
    teamBScore?: CricketTeamMatchDataUpdateOneWithoutCricketMatchTeamBNestedInput
    battingTeam?: CricketTeamMatchDataUpdateOneWithoutMatchBttingTeamNestedInput
    players?: CricketPlayerUpdateManyWithoutMatchesNestedInput
    over_match?: CricketOverUpdateManyWithoutMatchNestedInput
    team_batting_score?: CricketMatchPlayerBattingScoreUpdateManyWithoutMatchNestedInput
    team_bowling_score?: CricketMatchPlayerBowlingScoreUpdateManyWithoutMatchNestedInput
  }

  export type CricketMatchUncheckedUpdateWithoutBowlingTeamInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    played?: BoolFieldUpdateOperationsInput | boolean
    tossWonBy?: NullableStringFieldUpdateOperationsInput | string | null
    tossDecision?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    year?: StringFieldUpdateOperationsInput | string
    dependency?: BoolFieldUpdateOperationsInput | boolean
    dependentOn?: NullableStringFieldUpdateOperationsInput | string | null
    team1Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team2Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team1Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team2Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team1Balls?: NullableIntFieldUpdateOperationsInput | number | null
    team2Balls?: NullableIntFieldUpdateOperationsInput | number | null
    overs?: NullableIntFieldUpdateOperationsInput | number | null
    powerPlayOvers?: NullableIntFieldUpdateOperationsInput | number | null
    overPerBowler?: NullableIntFieldUpdateOperationsInput | number | null
    currentOverId?: NullableStringFieldUpdateOperationsInput | string | null
    wonBy?: NullableStringFieldUpdateOperationsInput | string | null
    teamAId?: NullableStringFieldUpdateOperationsInput | string | null
    teamBId?: NullableStringFieldUpdateOperationsInput | string | null
    teamAScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    teamBScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    battingTeamScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    players?: CricketPlayerUncheckedUpdateManyWithoutMatchesNestedInput
    over_match?: CricketOverUncheckedUpdateManyWithoutMatchNestedInput
    team_batting_score?: CricketMatchPlayerBattingScoreUncheckedUpdateManyWithoutMatchNestedInput
    team_bowling_score?: CricketMatchPlayerBowlingScoreUncheckedUpdateManyWithoutMatchNestedInput
  }

  export type CricketMatchUncheckedUpdateManyWithoutBowlingTeamInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    played?: BoolFieldUpdateOperationsInput | boolean
    tossWonBy?: NullableStringFieldUpdateOperationsInput | string | null
    tossDecision?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    year?: StringFieldUpdateOperationsInput | string
    dependency?: BoolFieldUpdateOperationsInput | boolean
    dependentOn?: NullableStringFieldUpdateOperationsInput | string | null
    team1Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team2Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team1Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team2Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team1Balls?: NullableIntFieldUpdateOperationsInput | number | null
    team2Balls?: NullableIntFieldUpdateOperationsInput | number | null
    overs?: NullableIntFieldUpdateOperationsInput | number | null
    powerPlayOvers?: NullableIntFieldUpdateOperationsInput | number | null
    overPerBowler?: NullableIntFieldUpdateOperationsInput | number | null
    currentOverId?: NullableStringFieldUpdateOperationsInput | string | null
    wonBy?: NullableStringFieldUpdateOperationsInput | string | null
    teamAId?: NullableStringFieldUpdateOperationsInput | string | null
    teamBId?: NullableStringFieldUpdateOperationsInput | string | null
    teamAScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    teamBScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    battingTeamScoreId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CricketOverBallCreateManyOverInput = {
    sis_id?: string
    ballNo: number
    runs: number
    wicket?: boolean
    ballType?: $Enums.BallType
    extras?: number
    wicketType?: string | null
    deliveryType?: string | null
  }

  export type CricketMatchCreateManyCurrentOverInput = {
    sis_id?: string
    played?: boolean
    tossWonBy?: string | null
    tossDecision?: string | null
    date: Date | string
    venue?: string | null
    year: string
    dependency?: boolean
    dependentOn?: string | null
    team1Wickets?: number | null
    team2Wickets?: number | null
    team1Runs?: number | null
    team2Runs?: number | null
    team1Balls?: number | null
    team2Balls?: number | null
    overs?: number | null
    powerPlayOvers?: number | null
    overPerBowler?: number | null
    wonBy?: string | null
    teamAId?: string | null
    teamBId?: string | null
    teamAScoreId?: string | null
    teamBScoreId?: string | null
    battingTeamScoreId?: string | null
    bowlingTeamScoreId?: string | null
  }

  export type CricketOverBallUpdateWithoutOverInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    ballNo?: IntFieldUpdateOperationsInput | number
    runs?: IntFieldUpdateOperationsInput | number
    wicket?: BoolFieldUpdateOperationsInput | boolean
    ballType?: EnumBallTypeFieldUpdateOperationsInput | $Enums.BallType
    extras?: IntFieldUpdateOperationsInput | number
    wicketType?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryType?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CricketOverBallUncheckedUpdateWithoutOverInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    ballNo?: IntFieldUpdateOperationsInput | number
    runs?: IntFieldUpdateOperationsInput | number
    wicket?: BoolFieldUpdateOperationsInput | boolean
    ballType?: EnumBallTypeFieldUpdateOperationsInput | $Enums.BallType
    extras?: IntFieldUpdateOperationsInput | number
    wicketType?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryType?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CricketOverBallUncheckedUpdateManyWithoutOverInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    ballNo?: IntFieldUpdateOperationsInput | number
    runs?: IntFieldUpdateOperationsInput | number
    wicket?: BoolFieldUpdateOperationsInput | boolean
    ballType?: EnumBallTypeFieldUpdateOperationsInput | $Enums.BallType
    extras?: IntFieldUpdateOperationsInput | number
    wicketType?: NullableStringFieldUpdateOperationsInput | string | null
    deliveryType?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CricketMatchUpdateWithoutCurrentOverInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    played?: BoolFieldUpdateOperationsInput | boolean
    tossDecision?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    year?: StringFieldUpdateOperationsInput | string
    dependency?: BoolFieldUpdateOperationsInput | boolean
    dependentOn?: NullableStringFieldUpdateOperationsInput | string | null
    team1Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team2Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team1Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team2Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team1Balls?: NullableIntFieldUpdateOperationsInput | number | null
    team2Balls?: NullableIntFieldUpdateOperationsInput | number | null
    overs?: NullableIntFieldUpdateOperationsInput | number | null
    powerPlayOvers?: NullableIntFieldUpdateOperationsInput | number | null
    overPerBowler?: NullableIntFieldUpdateOperationsInput | number | null
    tossWonByTeam?: CricketTeamUpdateOneWithoutToss_winning_teamNestedInput
    wonByTeam?: CricketTeamUpdateOneWithoutWinning_teamNestedInput
    teamA?: CricketTeamUpdateOneWithoutCricketMatchTeamANestedInput
    teamB?: CricketTeamUpdateOneWithoutCricketMatchTeamBNestedInput
    teamAScore?: CricketTeamMatchDataUpdateOneWithoutCricketMatchTeamANestedInput
    teamBScore?: CricketTeamMatchDataUpdateOneWithoutCricketMatchTeamBNestedInput
    battingTeam?: CricketTeamMatchDataUpdateOneWithoutMatchBttingTeamNestedInput
    bowlingTeam?: CricketTeamMatchDataUpdateOneWithoutMatchBowlingTeamNestedInput
    players?: CricketPlayerUpdateManyWithoutMatchesNestedInput
    over_match?: CricketOverUpdateManyWithoutMatchNestedInput
    team_batting_score?: CricketMatchPlayerBattingScoreUpdateManyWithoutMatchNestedInput
    team_bowling_score?: CricketMatchPlayerBowlingScoreUpdateManyWithoutMatchNestedInput
  }

  export type CricketMatchUncheckedUpdateWithoutCurrentOverInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    played?: BoolFieldUpdateOperationsInput | boolean
    tossWonBy?: NullableStringFieldUpdateOperationsInput | string | null
    tossDecision?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    year?: StringFieldUpdateOperationsInput | string
    dependency?: BoolFieldUpdateOperationsInput | boolean
    dependentOn?: NullableStringFieldUpdateOperationsInput | string | null
    team1Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team2Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team1Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team2Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team1Balls?: NullableIntFieldUpdateOperationsInput | number | null
    team2Balls?: NullableIntFieldUpdateOperationsInput | number | null
    overs?: NullableIntFieldUpdateOperationsInput | number | null
    powerPlayOvers?: NullableIntFieldUpdateOperationsInput | number | null
    overPerBowler?: NullableIntFieldUpdateOperationsInput | number | null
    wonBy?: NullableStringFieldUpdateOperationsInput | string | null
    teamAId?: NullableStringFieldUpdateOperationsInput | string | null
    teamBId?: NullableStringFieldUpdateOperationsInput | string | null
    teamAScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    teamBScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    battingTeamScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    bowlingTeamScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    players?: CricketPlayerUncheckedUpdateManyWithoutMatchesNestedInput
    over_match?: CricketOverUncheckedUpdateManyWithoutMatchNestedInput
    team_batting_score?: CricketMatchPlayerBattingScoreUncheckedUpdateManyWithoutMatchNestedInput
    team_bowling_score?: CricketMatchPlayerBowlingScoreUncheckedUpdateManyWithoutMatchNestedInput
  }

  export type CricketMatchUncheckedUpdateManyWithoutCurrentOverInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    played?: BoolFieldUpdateOperationsInput | boolean
    tossWonBy?: NullableStringFieldUpdateOperationsInput | string | null
    tossDecision?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    year?: StringFieldUpdateOperationsInput | string
    dependency?: BoolFieldUpdateOperationsInput | boolean
    dependentOn?: NullableStringFieldUpdateOperationsInput | string | null
    team1Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team2Wickets?: NullableIntFieldUpdateOperationsInput | number | null
    team1Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team2Runs?: NullableIntFieldUpdateOperationsInput | number | null
    team1Balls?: NullableIntFieldUpdateOperationsInput | number | null
    team2Balls?: NullableIntFieldUpdateOperationsInput | number | null
    overs?: NullableIntFieldUpdateOperationsInput | number | null
    powerPlayOvers?: NullableIntFieldUpdateOperationsInput | number | null
    overPerBowler?: NullableIntFieldUpdateOperationsInput | number | null
    wonBy?: NullableStringFieldUpdateOperationsInput | string | null
    teamAId?: NullableStringFieldUpdateOperationsInput | string | null
    teamBId?: NullableStringFieldUpdateOperationsInput | string | null
    teamAScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    teamBScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    battingTeamScoreId?: NullableStringFieldUpdateOperationsInput | string | null
    bowlingTeamScoreId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CricketOverCreateManyStrikerScoreInput = {
    sis_id?: string
    matchId: string
    runs?: number
    wickets?: number
    totalBalls?: number
    validBalls?: number
    nonStrikerScoreId: string
    bowlerScoreId: string
  }

  export type CricketOverCreateManyNonStrikerScoreInput = {
    sis_id?: string
    matchId: string
    runs?: number
    wickets?: number
    totalBalls?: number
    validBalls?: number
    strikerScoreId: string
    bowlerScoreId: string
  }

  export type CricketTeamMatchDataUpdateWithoutBattersInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    matchId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    runs?: IntFieldUpdateOperationsInput | number
    wideRuns?: IntFieldUpdateOperationsInput | number
    nbRuns?: IntFieldUpdateOperationsInput | number
    byeRuns?: IntFieldUpdateOperationsInput | number
    lbRuns?: IntFieldUpdateOperationsInput | number
    wickets?: IntFieldUpdateOperationsInput | number
    balls?: IntFieldUpdateOperationsInput | number
    bowlers?: CricketMatchPlayerBowlingScoreUpdateManyWithoutMatch_bowlersNestedInput
    team?: CricketTeamUpdateOneWithoutCricket_match_teamDataNestedInput
    cricketMatchTeamA?: CricketMatchUpdateManyWithoutTeamAScoreNestedInput
    cricketMatchTeamB?: CricketMatchUpdateManyWithoutTeamBScoreNestedInput
    matchBttingTeam?: CricketMatchUpdateManyWithoutBattingTeamNestedInput
    matchBowlingTeam?: CricketMatchUpdateManyWithoutBowlingTeamNestedInput
  }

  export type CricketTeamMatchDataUncheckedUpdateWithoutBattersInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    matchId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    runs?: IntFieldUpdateOperationsInput | number
    wideRuns?: IntFieldUpdateOperationsInput | number
    nbRuns?: IntFieldUpdateOperationsInput | number
    byeRuns?: IntFieldUpdateOperationsInput | number
    lbRuns?: IntFieldUpdateOperationsInput | number
    wickets?: IntFieldUpdateOperationsInput | number
    balls?: IntFieldUpdateOperationsInput | number
    bowlers?: CricketMatchPlayerBowlingScoreUncheckedUpdateManyWithoutMatch_bowlersNestedInput
    cricketMatchTeamA?: CricketMatchUncheckedUpdateManyWithoutTeamAScoreNestedInput
    cricketMatchTeamB?: CricketMatchUncheckedUpdateManyWithoutTeamBScoreNestedInput
    matchBttingTeam?: CricketMatchUncheckedUpdateManyWithoutBattingTeamNestedInput
    matchBowlingTeam?: CricketMatchUncheckedUpdateManyWithoutBowlingTeamNestedInput
  }

  export type CricketTeamMatchDataUncheckedUpdateManyWithoutBattersInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    matchId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    runs?: IntFieldUpdateOperationsInput | number
    wideRuns?: IntFieldUpdateOperationsInput | number
    nbRuns?: IntFieldUpdateOperationsInput | number
    byeRuns?: IntFieldUpdateOperationsInput | number
    lbRuns?: IntFieldUpdateOperationsInput | number
    wickets?: IntFieldUpdateOperationsInput | number
    balls?: IntFieldUpdateOperationsInput | number
  }

  export type CricketOverUpdateWithoutStrikerScoreInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    runs?: IntFieldUpdateOperationsInput | number
    wickets?: IntFieldUpdateOperationsInput | number
    totalBalls?: IntFieldUpdateOperationsInput | number
    validBalls?: IntFieldUpdateOperationsInput | number
    match?: CricketMatchUpdateOneRequiredWithoutOver_matchNestedInput
    nonStrikerScore?: CricketMatchPlayerBattingScoreUpdateOneRequiredWithoutOver_non_strikerNestedInput
    bowlerScore?: CricketMatchPlayerBowlingScoreUpdateOneRequiredWithoutOver_bowlerNestedInput
    balls?: CricketOverBallUpdateManyWithoutOverNestedInput
    match_current_over?: CricketMatchUpdateManyWithoutCurrentOverNestedInput
  }

  export type CricketOverUncheckedUpdateWithoutStrikerScoreInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    matchId?: StringFieldUpdateOperationsInput | string
    runs?: IntFieldUpdateOperationsInput | number
    wickets?: IntFieldUpdateOperationsInput | number
    totalBalls?: IntFieldUpdateOperationsInput | number
    validBalls?: IntFieldUpdateOperationsInput | number
    nonStrikerScoreId?: StringFieldUpdateOperationsInput | string
    bowlerScoreId?: StringFieldUpdateOperationsInput | string
    balls?: CricketOverBallUncheckedUpdateManyWithoutOverNestedInput
    match_current_over?: CricketMatchUncheckedUpdateManyWithoutCurrentOverNestedInput
  }

  export type CricketOverUncheckedUpdateManyWithoutStrikerScoreInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    matchId?: StringFieldUpdateOperationsInput | string
    runs?: IntFieldUpdateOperationsInput | number
    wickets?: IntFieldUpdateOperationsInput | number
    totalBalls?: IntFieldUpdateOperationsInput | number
    validBalls?: IntFieldUpdateOperationsInput | number
    nonStrikerScoreId?: StringFieldUpdateOperationsInput | string
    bowlerScoreId?: StringFieldUpdateOperationsInput | string
  }

  export type CricketOverUpdateWithoutNonStrikerScoreInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    runs?: IntFieldUpdateOperationsInput | number
    wickets?: IntFieldUpdateOperationsInput | number
    totalBalls?: IntFieldUpdateOperationsInput | number
    validBalls?: IntFieldUpdateOperationsInput | number
    match?: CricketMatchUpdateOneRequiredWithoutOver_matchNestedInput
    strikerScore?: CricketMatchPlayerBattingScoreUpdateOneRequiredWithoutOver_strikerNestedInput
    bowlerScore?: CricketMatchPlayerBowlingScoreUpdateOneRequiredWithoutOver_bowlerNestedInput
    balls?: CricketOverBallUpdateManyWithoutOverNestedInput
    match_current_over?: CricketMatchUpdateManyWithoutCurrentOverNestedInput
  }

  export type CricketOverUncheckedUpdateWithoutNonStrikerScoreInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    matchId?: StringFieldUpdateOperationsInput | string
    runs?: IntFieldUpdateOperationsInput | number
    wickets?: IntFieldUpdateOperationsInput | number
    totalBalls?: IntFieldUpdateOperationsInput | number
    validBalls?: IntFieldUpdateOperationsInput | number
    strikerScoreId?: StringFieldUpdateOperationsInput | string
    bowlerScoreId?: StringFieldUpdateOperationsInput | string
    balls?: CricketOverBallUncheckedUpdateManyWithoutOverNestedInput
    match_current_over?: CricketMatchUncheckedUpdateManyWithoutCurrentOverNestedInput
  }

  export type CricketOverUncheckedUpdateManyWithoutNonStrikerScoreInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    matchId?: StringFieldUpdateOperationsInput | string
    runs?: IntFieldUpdateOperationsInput | number
    wickets?: IntFieldUpdateOperationsInput | number
    totalBalls?: IntFieldUpdateOperationsInput | number
    validBalls?: IntFieldUpdateOperationsInput | number
    strikerScoreId?: StringFieldUpdateOperationsInput | string
    bowlerScoreId?: StringFieldUpdateOperationsInput | string
  }

  export type CricketOverCreateManyBowlerScoreInput = {
    sis_id?: string
    matchId: string
    runs?: number
    wickets?: number
    totalBalls?: number
    validBalls?: number
    strikerScoreId: string
    nonStrikerScoreId: string
  }

  export type CricketTeamMatchDataUpdateWithoutBowlersInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    matchId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    runs?: IntFieldUpdateOperationsInput | number
    wideRuns?: IntFieldUpdateOperationsInput | number
    nbRuns?: IntFieldUpdateOperationsInput | number
    byeRuns?: IntFieldUpdateOperationsInput | number
    lbRuns?: IntFieldUpdateOperationsInput | number
    wickets?: IntFieldUpdateOperationsInput | number
    balls?: IntFieldUpdateOperationsInput | number
    batters?: CricketMatchPlayerBattingScoreUpdateManyWithoutMatch_battersNestedInput
    team?: CricketTeamUpdateOneWithoutCricket_match_teamDataNestedInput
    cricketMatchTeamA?: CricketMatchUpdateManyWithoutTeamAScoreNestedInput
    cricketMatchTeamB?: CricketMatchUpdateManyWithoutTeamBScoreNestedInput
    matchBttingTeam?: CricketMatchUpdateManyWithoutBattingTeamNestedInput
    matchBowlingTeam?: CricketMatchUpdateManyWithoutBowlingTeamNestedInput
  }

  export type CricketTeamMatchDataUncheckedUpdateWithoutBowlersInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    matchId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    runs?: IntFieldUpdateOperationsInput | number
    wideRuns?: IntFieldUpdateOperationsInput | number
    nbRuns?: IntFieldUpdateOperationsInput | number
    byeRuns?: IntFieldUpdateOperationsInput | number
    lbRuns?: IntFieldUpdateOperationsInput | number
    wickets?: IntFieldUpdateOperationsInput | number
    balls?: IntFieldUpdateOperationsInput | number
    batters?: CricketMatchPlayerBattingScoreUncheckedUpdateManyWithoutMatch_battersNestedInput
    cricketMatchTeamA?: CricketMatchUncheckedUpdateManyWithoutTeamAScoreNestedInput
    cricketMatchTeamB?: CricketMatchUncheckedUpdateManyWithoutTeamBScoreNestedInput
    matchBttingTeam?: CricketMatchUncheckedUpdateManyWithoutBattingTeamNestedInput
    matchBowlingTeam?: CricketMatchUncheckedUpdateManyWithoutBowlingTeamNestedInput
  }

  export type CricketTeamMatchDataUncheckedUpdateManyWithoutBowlersInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    teamId?: NullableStringFieldUpdateOperationsInput | string | null
    matchId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    runs?: IntFieldUpdateOperationsInput | number
    wideRuns?: IntFieldUpdateOperationsInput | number
    nbRuns?: IntFieldUpdateOperationsInput | number
    byeRuns?: IntFieldUpdateOperationsInput | number
    lbRuns?: IntFieldUpdateOperationsInput | number
    wickets?: IntFieldUpdateOperationsInput | number
    balls?: IntFieldUpdateOperationsInput | number
  }

  export type CricketOverUpdateWithoutBowlerScoreInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    runs?: IntFieldUpdateOperationsInput | number
    wickets?: IntFieldUpdateOperationsInput | number
    totalBalls?: IntFieldUpdateOperationsInput | number
    validBalls?: IntFieldUpdateOperationsInput | number
    match?: CricketMatchUpdateOneRequiredWithoutOver_matchNestedInput
    strikerScore?: CricketMatchPlayerBattingScoreUpdateOneRequiredWithoutOver_strikerNestedInput
    nonStrikerScore?: CricketMatchPlayerBattingScoreUpdateOneRequiredWithoutOver_non_strikerNestedInput
    balls?: CricketOverBallUpdateManyWithoutOverNestedInput
    match_current_over?: CricketMatchUpdateManyWithoutCurrentOverNestedInput
  }

  export type CricketOverUncheckedUpdateWithoutBowlerScoreInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    matchId?: StringFieldUpdateOperationsInput | string
    runs?: IntFieldUpdateOperationsInput | number
    wickets?: IntFieldUpdateOperationsInput | number
    totalBalls?: IntFieldUpdateOperationsInput | number
    validBalls?: IntFieldUpdateOperationsInput | number
    strikerScoreId?: StringFieldUpdateOperationsInput | string
    nonStrikerScoreId?: StringFieldUpdateOperationsInput | string
    balls?: CricketOverBallUncheckedUpdateManyWithoutOverNestedInput
    match_current_over?: CricketMatchUncheckedUpdateManyWithoutCurrentOverNestedInput
  }

  export type CricketOverUncheckedUpdateManyWithoutBowlerScoreInput = {
    sis_id?: StringFieldUpdateOperationsInput | string
    matchId?: StringFieldUpdateOperationsInput | string
    runs?: IntFieldUpdateOperationsInput | number
    wickets?: IntFieldUpdateOperationsInput | number
    totalBalls?: IntFieldUpdateOperationsInput | number
    validBalls?: IntFieldUpdateOperationsInput | number
    strikerScoreId?: StringFieldUpdateOperationsInput | string
    nonStrikerScoreId?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UsersCountOutputTypeDefaultArgs instead
     */
    export type UsersCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsersCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CricketTeamCountOutputTypeDefaultArgs instead
     */
    export type CricketTeamCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CricketTeamCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CricketPlayerCountOutputTypeDefaultArgs instead
     */
    export type CricketPlayerCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CricketPlayerCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CricketMatchCountOutputTypeDefaultArgs instead
     */
    export type CricketMatchCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CricketMatchCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CricketTeamMatchDataCountOutputTypeDefaultArgs instead
     */
    export type CricketTeamMatchDataCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CricketTeamMatchDataCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CricketOverCountOutputTypeDefaultArgs instead
     */
    export type CricketOverCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CricketOverCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CricketMatchPlayerBattingScoreCountOutputTypeDefaultArgs instead
     */
    export type CricketMatchPlayerBattingScoreCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CricketMatchPlayerBattingScoreCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CricketMatchPlayerBowlingScoreCountOutputTypeDefaultArgs instead
     */
    export type CricketMatchPlayerBowlingScoreCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CricketMatchPlayerBowlingScoreCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OTPDefaultArgs instead
     */
    export type OTPArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OTPDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsersDefaultArgs instead
     */
    export type UsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CricketTeamDefaultArgs instead
     */
    export type CricketTeamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CricketTeamDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CricketPlayerDefaultArgs instead
     */
    export type CricketPlayerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CricketPlayerDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CricketMatchDefaultArgs instead
     */
    export type CricketMatchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CricketMatchDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CricketTeamMatchDataDefaultArgs instead
     */
    export type CricketTeamMatchDataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CricketTeamMatchDataDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CricketOverDefaultArgs instead
     */
    export type CricketOverArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CricketOverDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CricketOverBallDefaultArgs instead
     */
    export type CricketOverBallArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CricketOverBallDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CricketMatchPlayerBattingScoreDefaultArgs instead
     */
    export type CricketMatchPlayerBattingScoreArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CricketMatchPlayerBattingScoreDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CricketMatchPlayerBowlingScoreDefaultArgs instead
     */
    export type CricketMatchPlayerBowlingScoreArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CricketMatchPlayerBowlingScoreDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VerificationTokenDefaultArgs instead
     */
    export type VerificationTokenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VerificationTokenDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TicketDefaultArgs instead
     */
    export type TicketArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TicketDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}