generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  SPORTS_HEAD
  DEPT_SPORTS_CC
}

model OTP {
  otp       String   @unique
  email     String
  createdAt DateTime @default(now())
}

model Users {
  userId             String              @id @unique
  email              String              @unique
  name               String?
  password           String?
  token              String?
  roles              Role[]              @default([USER])
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  // department         String?
  rec_status         Boolean             @default(false)
  cricketPlayerId    String?
  cricketPlayer      CricketPlayer?      @relation("cricketPlayer", fields: [cricketPlayerId], references: [sis_id])
  cricket_players    CricketPlayer[]     @relation("playerUser")
  verification_token VerificationToken[] @relation("verificationToken")
  user_tickets       Ticket[]            @relation("userTickets")
}

// model CricketSchedule {
//   sis_id        String       @id @default(uuid())
//   // matchId       String       @unique
//   match         CricketMatch @relation("scheduleMatches", fields: [sis_id], references: [sis_id])
//   team1Id       String
//   team1         CricketTeam  @relation("team1", fields: [team1Id], references: [sis_id])
//   team2Id       String
//   team2         CricketTeam  @relation("team2", fields: [team2Id], references: [sis_id])
//   dependendency Boolean      @default(false)
//   date          DateTime
//   year          String
// }

model CricketTeam {
  sis_id String @id @default(uuid())
  // teamId    String   @unique
  name   String
  year   String
  // playerIds String[]

  players           CricketPlayer[] //   @relation("playerTeam", fields: [playerIds], references: [sis_id])
  team2_matches     CricketMatch[]  @relation("team2")
  team1_matches     CricketMatch[]  @relation("team1")
  // schedule_team1    CricketSchedule[] @relation("team1")
  // schedule_team2    CricketSchedule[] @relation("team2")
  winning_team      CricketMatch[]  @relation("winningTeam")
  toss_winning_team CricketMatch[]  @relation("tossWinningTeam")
  player_team       CricketPlayer[] @relation("playerTeam")
  // @@unique([sis_id, year])
}

model CricketPlayer {
  sis_id            String  @id @default(uuid())
  // playerId             String         @unique
  userId            String  @unique
  user              Users   @relation("playerUser", fields: [userId], references: [userId])
  teamId            String?
  isSelected        Boolean @default(false)
  isCaptain         Boolean @default(false)
  isWicketKeeper    Boolean @default(false)
  isAllRounder      Boolean @default(false)
  isBatsman         Boolean @default(false)
  isBowler          Boolean @default(false)
  runs              Int     @default(0)
  noOfMatchesPlayed Int     @default(0)
  noOfSixes         Int     @default(0)
  noOfFours         Int     @default(0)
  noOfWicketsTaken  Int     @default(0)
  noOfRunsScored    Int     @default(0)
  noOfHalfCenturies Int     @default(0)
  noOfCenturies     Int     @default(0)
  noOfWickets       Int     @default(0)

  matches              CricketMatch[] @relation("playerMatches")
  team                 CricketTeam?   @relation("playerTeam", fields: [teamId], references: [sis_id])
  user_cricket_players Users[]        @relation("cricketPlayer")
  overs                CricketOver[]  @relation("bowler")
  team_players         CricketTeam[] //@relation("playerTeam")
  over_striker         CricketOver[]  @relation("striker")
  over_non_striker     CricketOver[]  @relation("nonStriker")
}

model CricketMatch {
  sis_id String  @id @default(uuid())
  // matchId          String           @unique
  played Boolean @default(false)

  tossWonBy     String?
  tossWonByTeam CricketTeam? @relation("tossWinningTeam", fields: [tossWonBy], references: [sis_id])
  tossDecision  String?

  date  DateTime
  venue String?
  year  String

  dependency  Boolean @default(false)
  dependentOn String?

  team1Wickets Int? @default(0)
  team2Wickets Int? @default(0)

  team1Runs Int? @default(0)
  team2Runs Int? @default(0)

  team1Balls Int? @default(0)
  team2Balls Int? @default(0)

  overs          Int? @default(0)
  powerPlayOvers Int? @default(0)
  overPerBowler  Int? @default(0)

  currentOverSis_id String?
  currentOver       CricketOver? @relation("currentOver", fields: [currentOverSis_id], references: [sis_id])

  wonBy     String?
  wonByTeam CricketTeam? @relation("winningTeam", fields: [wonBy], references: [sis_id])

  team1Id String
  team1   CricketTeam @relation("team1", fields: [team1Id], references: [sis_id])
  team2Id String
  team2   CricketTeam @relation("team2", fields: [team2Id], references: [sis_id])

  players            CricketPlayer[]                  @relation("playerMatches")
  // schedule_matches   CricketSchedule?                 @relation("scheduleMatches")
  over_match         CricketOver[]                    @relation("match")
  team_batting_score CricketMatchPlayerBattingScore[] @relation("playerBattingScoreMatch")
  team_bowling_score CricketMatchPlayerBowlingScore[] @relation("playerBowlingScoreMatch")
}

model CricketOver {
  sis_id   String        @id @default(uuid())
  bowlerId String
  bowler   CricketPlayer @relation("bowler", fields: [bowlerId], references: [sis_id])
  matchId  String
  match    CricketMatch  @relation("match", fields: [matchId], references: [sis_id])

  runs    Int @default(0)
  wickets Int @default(0)

  balls      Int @default(0)
  validBalls Int @default(0)

  strikerId String
  striker   CricketPlayer @relation("striker", fields: [strikerId], references: [sis_id])

  nonStrikerId String
  nonStriker   CricketPlayer @relation("nonStriker", fields: [nonStrikerId], references: [sis_id])

  balls_played       CricketOverBall[] @relation("overBall")
  match_current_over CricketMatch[]    @relation("currentOver")
}

model CricketOverBall {
  sis_id   String      @id @default(uuid())
  overId   String
  over     CricketOver @relation("overBall", fields: [overId], references: [sis_id])
  ballNo   Int
  runs     Int
  wicket   Boolean     @default(false)
  ballType String      @default("normal")
}

model CricketMatchPlayerBattingScore {
  sis_id     String @id
  matchId    String
  runs       Int    @default(0)
  balls      Int    @default(0)
  fours      Int    @default(0)
  sixes      Int    @default(0)
  strikeRate Float  @default(0)

  match CricketMatch @relation("playerBattingScoreMatch", fields: [matchId], references: [sis_id])
}

model CricketMatchPlayerBowlingScore {
  sis_id  String @id
  matchId String
  runs    Int    @default(0)
  balls   Int    @default(0)
  fours   Int    @default(0)
  sixes   Int    @default(0)

  match CricketMatch @relation("playerBowlingScoreMatch", fields: [matchId], references: [sis_id])
}

model VerificationToken {
  sis_id     String   @id @default(uuid())
  token      String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  expiration DateTime
  user       Users    @relation("verificationToken", fields: [sis_id], references: [userId])
}

model Ticket {
  sis_id      String    @id @default(uuid())
  userEmail   String
  userName    String
  userId      String?
  user        Users?    @relation("userTickets", fields: [userId], references: [userId])
  title       String
  description String
  visited     Boolean   @default(false)
  status      String    @default("open")
  createdAt   DateTime  @default(now())
  closedAt    DateTime?
}
