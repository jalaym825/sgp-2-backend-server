generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  SPORTS_HEAD
  DEPT_SPORTS_CC
}

model User {
  userId             String              @id @unique
  email              String              @unique
  name               String?
  password           String?
  refreshToken       String?
  role               Role                @default(USER)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  rec_status         Boolean             @default(false)
  cricketPlayerId    String?
  cricketPlayer      CricketPlayer?      @relation("cricketPlayer", fields: [cricketPlayerId], references: [sis_id])
  cricket_players    CricketPlayer[]     @relation("playerUser")
  verification_token VerificationToken[] @relation("verificationToken")
}

model CricketSchedule {
  sis_id        String       @id @default(uuid())
  // matchId       String       @unique
  match         CricketMatch @relation("scheduleMatches", fields: [sis_id], references: [sis_id])
  team1Id       String
  team1         CricketTeam  @relation("team1", fields: [team1Id], references: [sis_id])
  team2Id       String
  team2         CricketTeam  @relation("team2", fields: [team2Id], references: [sis_id])
  dependendency Boolean      @default(false)
  date          DateTime
  year          String
}

model CricketTeam {
  sis_id String @id @default(uuid())
  // teamId    String   @unique
  name   String
  year   String
  // playerIds String[]

  players           CricketPlayer[] //   @relation("playerTeam", fields: [playerIds], references: [sis_id])
  team2_matches     CricketMatch[]    @relation("team2")
  team1_matches     CricketMatch[]    @relation("team1")
  schedule_team1    CricketSchedule[] @relation("team1")
  schedule_team2    CricketSchedule[] @relation("team2")
  winning_team      CricketMatch[]    @relation("winningTeam")
  toss_winning_team CricketMatch[]    @relation("tossWinningTeam")

  // @@unique([sis_id, year])
}

model CricketPlayer {
  sis_id            String  @id @default(uuid())
  // playerId             String         @unique
  userId            String  @unique
  user              User    @relation("playerUser", fields: [userId], references: [userId])
  isCaptain         Boolean @default(false)
  isWicketKeeper    Boolean @default(false)
  isAllRounder      Boolean @default(false)
  isBatsman         Boolean @default(false)
  isBowler          Boolean @default(false)
  noOfMatchesPlayed Int     @default(0)
  noOfSixes         Int     @default(0)
  noOfFours         Int     @default(0)
  noOfWicketsTaken  Int     @default(0)
  noOfRunsScored    Int     @default(0)
  noOfHalfCenturies Int     @default(0)
  noOfCenturies     Int     @default(0)

  matches              CricketMatch[] @relation("playerMatches")
  user_cricket_players User[]         @relation("cricketPlayer")
  overs                CricketOver[]  @relation("bowler")
  team_players         CricketTeam[] //@relation("playerTeam")
}

model CricketMatch {
  sis_id        String       @id @default(uuid())
  // matchId          String           @unique
  played        Boolean      @default(false)
  tossWonBy     String?
  tossWonByTeam CricketTeam? @relation("tossWinningTeam", fields: [tossWonBy], references: [sis_id])
  tossDecision  String?
  date          DateTime
  venue         String

  wonBy     String?
  wonByTeam CricketTeam? @relation("winningTeam", fields: [wonBy], references: [sis_id])

  team1Id String
  team1   CricketTeam @relation("team1", fields: [team1Id], references: [sis_id])
  team2Id String
  team2   CricketTeam @relation("team2", fields: [team2Id], references: [sis_id])

  players            CricketPlayer[]                  @relation("playerMatches")
  schedule_matches   CricketSchedule?                 @relation("scheduleMatches")
  over_match         CricketOver[]                    @relation("match")
  team_batting_score CricketMatchPlayerBattingScore[] @relation("playerBattingScoreMatch")
  team_bowling_score CricketMatchPlayerBowlingScore[] @relation("playerBowlingScoreMatch")
}

model VerificationToken {
  sis_id     String   @id @default(uuid())
  token      String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  expiration DateTime
  user       User     @relation("verificationToken", fields: [sis_id], references: [userId])
}

model CricketOver {
  sis_id   String        @id @default(uuid())
  bowlerId String
  bowler   CricketPlayer @relation("bowler", fields: [bowlerId], references: [sis_id])
  matchId  String
  match    CricketMatch  @relation("match", fields: [matchId], references: [sis_id])
  runs     Int           @default(0)
  wickets  Int           @default(0)
  balls    Int           @default(0)
  isMaiden Boolean       @default(false)
}

model CricketMatchPlayerBattingScore {
  sis_id     String @id
  matchId    String
  runs       Int    @default(0)
  balls      Int    @default(0)
  fours      Int    @default(0)
  sixes      Int    @default(0)
  strikeRate Float  @default(0)

  match CricketMatch @relation("playerBattingScoreMatch", fields: [matchId], references: [sis_id])
}

model CricketMatchPlayerBowlingScore {
  sis_id  String @id
  matchId String
  runs    Int    @default(0)
  balls   Int    @default(0)
  fours   Int    @default(0)
  sixes   Int    @default(0)

  match CricketMatch @relation("playerBowlingScoreMatch", fields: [matchId], references: [sis_id])
}
